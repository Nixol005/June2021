openapi: 3.0.3
info:
  title: JobReady Plus API
  description: |
    A RESTful API for managing JobReady Plus.


      # Overview
      
      The JobReady Plus application is exposed through a web services interface. This interface enables clients to request, create and modify records stored in JobReady Plus. This guide outlines the web services interface, the resources made available, and the operations that can be performed.

      
      # Media Types
      
      The API supports both XML and JSON formats. XML is the default format.
      
      To send and receive JSON, please include the following HTTP headers

    <pre><code>Content-Type: application/json; 
    Accept: application/json</code></pre>

      # Protocol
      
      All communication takes place over HTTPS. The API subdomain is different for each tenant and will take the form [https://subdomain.jobreadyplus.com](https://subdomain.jobreadyplus.com/) Request and response bodies are in the XML format.
      
      # Response codes
      
      The web services interface may return the following HTTP status codes:
      
      | **Code** | **Body** | **When Used** |
      | --- | --- | --- |
      | 200 OK | XML | When returning the result set of a resource GET query. |
      | 201 Created | XML | After a new record has been successfully created. |
      | 204 No Content | None | After an existing record has been successfully modified or deleted. |
      | 400 Bad Request | XML | The request body is invalid, e.g. malformed XML. |
      | 401 Unauthorized | XML | No or invalid authentication credentials have been supplied. |
      | 403 Forbidden | XML | The requested action is not allowed for this particular resource. |
      | 404 Not Found | XML | The requested resource does not exist. |
      | 405 Method Not Allowed | XML | The HTTP method being used is not allowed for this particular URL. |
      | 409 Conflict | XML | The resource could not be modified due to external dependencies. |
      | 422 Unprocessable Entity | XML | The requested creation or modification could not be completed because the values provided cause a validation error. |
      | 500 Internal Server Error | XML or HTML | The request caused an internal exception to be raised. A log entry is created and the developer team are notified. |
      | 503 Service Unavailable | XML or HTML | The service is currently unavailable due to maintenance. |
      
      # Authentication
      
      All API endpoints use HTTP Basic Authentication. [https://en.wikipedia.org/wiki/Basic\_access\_authentication](https://en.wikipedia.org/wiki/Basic_access_authentication).
      
      The password must be your provided API key, the username can be anything.
      
      A 401 response will be provided if authentication fails.
      
      ## Retrieving a paginated list of records
      
      When retrieving a list of records, .e.g. /webservice/parties, it is recommended to reduce the result set to the records of interest so not to put undue stress on the server. This can be done by applying filters through URL query parameters (e.g. &#39;created\_since&#39;, &#39;updated\_since&#39;) or by retrieving the result set in batches. Batches are retrieved by supplying the &#39;offset&#39; and &#39;limit&#39; query parameters. &#39;offset&#39; is a zero-based index indicating on which record to start and &#39;limit&#39; specifies the maximum number of records to return in the batch. If one wishes to retrieve all records the best way is often to start with a zero offset and then increase the &#39;offset&#39; parameter by the value of &#39;limit&#39; each time. If &#39;offset&#39; is greater than or equal to the total number of records, the server will return an empty set. This functionality is analogous to the OFFSET and LIMIT keywords in SQL
      
      Example: Retrieving the first 100 party records and then the next 100
      
    <pre><code>https://host/webservice/parties?offset=0&limit=100
    https://host/webservice/parties?offset=100&limit=100</code></pre>
      
      If not specified, the default values for &#39;offset&#39; and &#39;limit&#39; are zero and 100, respectively. The maximum value for the limit is 100. Therefore, if the total number of records in the database is larger than 100 and one wishes to retrieve all records, batch retrieving is necessary. When retrieving a list of records a &#39;total&#39; attribute is available on the root element. This attribute always indicates the total number of records available for the resource after additional filters have been applied, such as &#39;created\_since&#39;, barring the &#39;offset&#39; and &#39;limit&#39; parameters. The purpose of this attribute is hence to aid batch retrieving. Another way of knowing when to stop increasing the offset is when the server returns an empty result set.
      
      # Generating an API key
      
      An API key can be generated via the software&#39;s user interface by navigating to Administration → Configuration → Preferences. Select the relevant Provider, and then go to Integration → JobReady Open Integration. Add a new API key and make sure it is enabled.
      
      # API keys for Multi Provider Systems
      
      If the system is a multi-provider set-up, the API key will belong to a specific Provider, and all subsequent interaction with the web services interface will be carried out within the context of that Provider. As an exampe, when creating a new enrolment it will belong to the Provider associated with the API key used.
      
      Similarly searches will also be scoped to the provider associated with the used API key. If you want to search across all Providers for a particular record, you can add the &quot;all\_rtos&quot; query parameter to your search request.
      
      Examples of the usage of this query parameter are provided in **Party** and **Enrolment**
      
      # XML Encoding
      
      Records are encoded in XML, and both the request and response body follow the same format. The name of the root element for a particular record is always the record&#39;s type name in singular (e.g. &quot;party&quot;). If the record is sent or returned as part of a list, the record element is enclosed within a parent element whose name is the record type in plural (e.g. &quot;parties&quot;). This is referred to as a collection. A record may have a set of properties, which are specified as child elements of the record element. The values of the properties are given as the text content of the property element.
      
      The XML encoding is illustrated in the examples below. Here, the party resource has been as an example. Most party properties have been left out for brevity.
      
      Example 1: A single record
      
        <?xml version="1.0" encoding="UTF-8"?>
        <party>
          <surname>Johnson</surname>
          <first-name>Diana</first-name>
        </party>
      
      Example 2: A collection of records
      
        <?xml version="1.0" encoding="UTF-8"?>
        <parties total="2">
          <party>
            <surname>Johnson</surname>
            <first-name>Diana</first-name>
          </party>
          <party>
            <surname>Grey</surname>
            <first-name>Robert</first-name>
          </party>
        </parties>
      
      When querying the server for records, the result is either returned as a collection of multiple records or as a single record. The single-record structure is used when a specific record is requested (i.e. by referring to it by its ID number), and the collection structure is used when listing all records or querying for a list of records matching a certain set of criteria. The single-record structure is also always used when creating new records or modifying existing records.
      
      If some of the properties are left out when submitting a new record for creation, default values are assumed for these properties if applicable. If the properties are mandatory it may also result in a validation error (422). If properties are left out when updating an existing record those properties will be left untouched and only the properties supplied will be updated.
      
      A record may also contain child resources. The child resources are encoded as child elements of the parent record element and may themselves have properties and also child resources. The child resources may have a cardinality of one or many: if one, only a single element may appear, and if many, the elements will appear within a collection element – analogously to how the top-level elements work.
      
      Example 3: Child resources (contact-detail has multiple cardinality and AVETMISS single)
      
        <?xml version="1.0" encoding="UTF-8"?>
        <party>
          <surname>Johnson</surname>
          <first-name>Diana</first-name>
          <contact-details>
            <contact-detail>
              <value>0212341234</value>
              <contact-type>Phone</contact-type>
            </contact-detail>
            <contact-detail>
              <value>diana@nomail.com</value>
              <contact-type>Email</contact-type>
            </contact-detail>
          </contact-details>
          <avetmiss>
            <country-of-birth>Australia</country-of-birth>
          </avetmiss>
        </party>
      
      
      For most child resources with multiple cardinality, when updating the record all child records will be replaced with the ones provided in the request XML body. If an empty collection element for the child resource is given, all child records will be removed. In the example above, if an update request were performed with only one contact-detail element, the first contact detail would be updated to the new values and the second one removed. This is the default behaviour for child resources with multiple-cardinality, but does not apply to all child resource types.
      
      # Errors
      
      - In most error conditions, the server responds with a HTTP error status code and an error message encoded as XML. The XML error response has the following format:
      
         
        <?xml version="1.0" encoding="UTF-8"?>
        <error>
           <code>Rollbar UUID value</code>
           <message>Message explaining the error</message>
        </error>
 
        
      - When API’s return an `Internal Server Error` message a `Code` parameter will be returned. This is a reference to the JRPlus internal logs and should be included in any support request with assistance for these errors as it will help to track the root cause of the error quickly. 
      - If the error is of type Validation Error and the response code is 422, the error element will contain a validation-errors child element listing one error that was encountered during the validation process.
      - Each validation-error element contains a resource, index and can display one error at a time.
      - The resource element contains the name of the resource affected (e.g. &#39;party&#39;), the index element contains a zero-indexed number identifying the record if it was submitted as part of a series of records, and the message element contains a message explaining the validation error. Example:
      
  
        <?xml version="1.0" encoding="UTF-8"?>
        <error>
            <code>0f3880c6-9997-4fd2-82f4-5b2bb185feb8</code>
            <message>Validation failure</message>
            <validation-errors>
                <validation-error>
                    <resource>party</resource>
                    <index>0</index>
                    <message>Please enter a First Name</message>
                </validation-error>
            </validation-errors>
        </error>

      
      - If the server is temporarily unavailable or down for maintenance and the HTTP response code is a 5xx code, it may respond with a HTML response body. It is therefore recommended that the web services client always check the response content type and not try to parse a response body unless the &#39;application/xml&#39; content type has been used.
      
      # Ad-hoc Fields
      
      Some resource types support ad-hoc fields. Ad-hoc fields are custom fields that are set up for a specific entity type. Ad-hoc fields are made available via an ad-hoc-fields collection. When creating and updating ad-hoc fields matching is done by looking at the name property. Sending an empty ad-hoc-fields collection will not remove any previously added ad-hoc fields.
      
      Ad-hoc fields can be added against the following entities:
      
      - Party
      - Enrolment
      - Trainer
      - Program
      - Course
      
      An element of type ad-hoc-field accepts the following properties:
      
      - name (string) - A name of a valid ad-hoc field type
      - value (string) - The value to assign the field
      
      Example: A party record with two ad-hoc fields
      
        <?xml version="1.0" encoding="UTF-8"?>
        <party>
          <ad-hoc-fields>
            <ad-hoc-field>
              <name>Shoe size</name>
              <value>7</value>
            </ad-hoc-field>
            <ad-hoc-field>
              <name>Referrals</name>
              <value>Advertiser/Magazine</value>
            </ad-hoc-field>
          </ad-hoc-fields>
        </party>
      
      
      # Development
      
      In order to save bandwidth, the XML code returned by the server does by default not contain any white space. To aid readability while debugging, white space and indentation can be enabled by passing a `pretty_print=true` query parameter.
      
      The interface can easily be tested by using the UNIX command line program curl. Example querying for party records:


    <pre><code>curl -D - --user "api:faa1fbc07d51735274acf1e99f5b9c1056036839" \
    "https://subdomain.jobreadyplus.com/webservice/parties?updated_since=2011-01-01&pretty_print=true"</code></pre>

      Example creating a new party record (with the new party stored in party.xml):\n\n
      
    <pre><code>curl -D - --user "api:faa1fbc07d51735274acf1e99f5b9c1056036839" \
    -H "Content-Type: text/xml" –d @party.xml \
    -X POST "https://subdomain.jobreadyplus.com/webservice/parties?pretty_print=true"</code></pre>

      
      Example updating an existing party record:
      
    <pre><code>curl -D - --user "api:faa1fbc07d51735274acf1e99f5b9c1056036839" \
    -H "Content-Type: text/xml" –d @party.xml \
    -X POST https://subdomain.jobreadyplus.com/webservice/parties/PARTO02385</code></pre>
          
      # API FAQS
      
      **JOBREADY WEBSERVICE ACCESS**
      
      Q1: What is the Host name (URL) for Production?
      
      [https://subdomain.jobreadyplus.com/](https://subdomain.jobreadyplus.com/)
      
      Each client has a unique subdomain which must be used.
      
      Q2: How do we authenticate?
      
      See **Authentication**.
      
      Your API key must be generated in the browser application. See **Generating an API key**.
      
      Q3: Is the API key a session key or site key?
      
      The API key is a site key.
      
      Q4: Do we need to submit the key every time?
      
      HTTP Basic Authentication is stateless so the key must be provided with each request. Your browser or software may provide its own password caching mechanism.
      
      **COURSE QUERIES**
      
      Q1: How do we query new courses by program?
      
      <pre><code>curl -H "Content-Type: text/xml" -X GET -u username:api_key -v https://subdomain.jobreadyplus.com/webservice/courses/?course_scope_code=BSB20107&start_date_from=2015-01-01</code></pre>
      
      Q2: Do courses have different statuses Eg: Active, Inactive, deleted/removed, archived?
      
      While there is an &#39;enabled&#39; concept for courses, this isn&#39;t exposed in the API as the rules are quite complex. Instead, this query is generally done using dates. There are 2 sets of dates that assist with this query &#39;Course Dates&#39; which relate to the period that the course is open for and &#39;Enrolment Dates&#39; that act as a control and relate to the period that enrolments are allowed for the course. You may choose to include a condition to include/exclude courses based on these date fields.\n\n
      
      **BOOKING AND ENROLMENTS**
      
      **Q1: How do we set up a booking and enrolments model?
      
      Clients can &#39;scrape&#39; the JobReady API periodically to extract the course details. It is possible to keep a local copy to ensure your website response times are rapid and not dependent on external API calls.
      
      A sample query they use to extract the first 100 results for courses over the next 6 months is:
      
      <pre><code>curl -H "Content-Type: text/xml" -X GET -u username:api_key -v https://subdomain.jobreadyplus.com/webservice/courses/?limit=100&offset=0&start_date_from=2015-06-28&start_date_to=2015-12-28</code></pre>
      
      A &#39;Book Now&#39; button can embed a course-related link to facilitate enrolment using JobReady&#39;s Online Enrolment Portal.
      
      Q2: What is the URL format for a specific course enrolment via the Online Enrolment Portal?\n\n
      
      [https://subdomain.jobreadyplus.com/terminal/online\_book\_course/course\_id](https://subdomain.jobreadyplus.com/terminal/online_book_course/course_id)
      
      Q3: What webservice do we use to determine the available spaces for a course?
      
      This can be determined from the total_enrolments and maximum_enrolments attributes of a course available from the Courses webservice.
      
      Q4: How do we create a new enquiry (prospect)? We have to create a Party with a role &#39;Prospect&#39;?
      
      A new Prospect record needs both a Party and a Course. You may need to create the Party in an initial request and then use that &#39;party-identifier&#39; in the request to create a Prospect.
      
      **UPDATING CHILD RESOURCES**
      
      Q1: How can I update a single child resource of a party like contact\_detail?
      
      POST: /webservice/parties/id/contact\_details/id 
      
      Q2: How can I update multiple child resources of a party at one time? 
      
      POST: /webservice/parties/id
      
      # API Support
      
      If you have any API related issues, you can lodge a ticket on: [https://jobready.zendesk.com](https://jobready.zendesk.com/)
      
      If you are a 3rd party developer, please have your JobReady client contact us to authorise your access.
      
      # API Pricing
      
      As the API is an additional module, please contact our Customer Experience Team to help you get started.
      
      # Changelog
      
      All notable changes to this project will be documented in this section.
      
      The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
      
      ## 2021-05-27
      
      - Attributes "Document Id" and "Document Url" added to **Certificate API**
      
      ## 2021-05-20
      
      - Added Delete Timetable endpoint
      - Added new resource - **User Role**
      
      ## 2021-05-13
      
      - Attribute "Allow Enrolments" exposed to **Course API**
      - Added new resource - **Template**

      ## 2021-02-22
      
      - Added new resource - **Party Image**

      ## 2021-02-02
      
      - Added Information Session block to **Web Content API** 

      ## 2021-01-22
      
      - Added a new resource - **Course Application** 

      ## 2021-01-15

      - Added new resources - **Course Payment Options** and **Invoice Template**    
      
      ## 2019-07-04
      
      - Employer records for **resource Enrolment** now visible on enrolments under the array employers with 3 attributes: id, party-identifier and name.

      ## 2019-06-04
      
      - Attribute &#39;job-seeker-identifier&#39; exposed to the **resource party**. Note: This won&#39;t display unless &quot;Employment Services&quot; is enabled.
      
      ## 2019-03-25
      
      - Documentation updated to reflect &#39;Course Scope&#39; to &#39;Program&#39; to bring it in line with the UI updates.
      - The resource **resource Location** has now been updated so that the users can update the Address from the API. The attributes that are now editable are &#39;unit\_details, unit\_number, street\_number, street\_name, street\_type, suburb, state, post\_code&#39;
      - Attribute &#39;id&#39; exposed to the **resource location** for easier identification of location.

      ## 2018-09-23
      
      - Created new query parameter &#39;updated\_since&#39; for the **resource course**
      
      ## 2018-08-08
      
      - Attribute &#39;rto-name&#39; exposed to the resource: **resource party**, **resource Course**, **resource payments**, **resource invoice**
      
      ## 2018-07-12
      
      - Query parameter &#39;enrolment\_status&#39; added for **resource Enrolment** that enables filtering enrolment based on their statuses
      - Query parameter &#39;course\_type&#39; added for **resource Course** that allows users to filter courses based on the type

      ## 2018-05-28
      
      - Enrolment Identifier has now been exposed to **resource Invoice** for easier identification of which Enrolment the invoice is associated to in case it is linked to an enrolment 
      - A new query parameter &#39;created\_before&#39; has been designed for **resource Enrolment** and **resource Invoice** that enables users to extract enrolments / invoices which were created before a given date.
      - Query parameters &#39;party\_identifier&#39; and &#39;event\_type&#39; documented for **resource Event**
      
      ## 2018-05-28
      
      - Attributes &#39;total-scheduled-hours&#39; and &#39;attended-hours&#39; now exposed to the **resource Event Attendance Summary**      
      
      ## 2018-05-08
      
      - A new resource type: **resource quote** exposed to the API which now lets you create, update and delete quotes in the same way you&#39;re accustomed to doing it through the UI.
      - Attribute prior-education-achievement-identifier that denotes the qualification accreditation type can now be found under **resource avetmiss** 
      - Added more information on how to find &#39;tags&#39; in the Plus system which aids in passing the value on the attribute &#39;tags&#39; against **resource course** and **resource party**
      
       ## 2018-04-03
      
      - Documentation updated to reflect JSON support and with instructions on how to use the format     

      ## 2018-03-15
      
      - Created new query parameter &#39;created\_since&#39; and &#39;updated\_since&#39; for the **resource attendee**
      
      ## 2018-03-14
      
      - Corrected query parameters on the Invoice resource
      
      ## 2018-03-05
      
      - Added more details to **resource employee** that clarify target parties      
      
      ## 2018-02-05
      
      - Removed the Beta status from the Documentation
            
      ## 2018-01-31
      
      - Fixed a typo for the example of attribute: client-occupation-identifier under **resource enrolment**
      - Updated correct example for attribute: client-industry-employment under **resource enrolment**      

      ## 2018-01-29
      
      - Corrected documentation for finding and updating **child resource party group member** 
      - Marked attribute group-type as Read Only

      ## 2018-01-19
      
      - Release of HTML documentation
      

## Notes
  termsOfService: https://xxxxxxxx.com/legal
  contact:
    name: API Support
    url:  https://jobready.zendesk.com
    email: support@example.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.3
servers:
- url: https://subdomain.jobreadyplus.com
  description: Production server


paths:

#######################################
# Academic Period                     #          
#######################################
  /webservice/academic_periods:
    get:
      tags:
      - Academic Period
      summary: List Academic Periods
      description: |
        Lists all Academic Periods in the system or restricted by query parameters, one or more parameters can be specified and will return all matching record that match ALL parameters (logical AND).
      operationId: listAcademicPeriods
      parameters:
      - name: id
        in: query
        description: Find Academic Periods with the specified Internal ID
        schema:
          type: string
      - name: code
        in: query
        description: Find Academic Periods with the specified Academic Period code
        schema:
          type: string
      - name: name
        in: query
        description: |
          Finds Academic Periods with the specified Academic Period name. 
          NOTE the name may not be unique so the code should always be used to distinguish objects.
        schema:
          type: string
      - name: year
        in: query
        description: Returns all Academic periods tagged against a particular year. ISO year Format
        schema:
          type: string
      - name: enabled
        in: query
        description: Returns Academic periods which match this parameter
        schema:
          type: boolean
      - name: starts_after
        in: query
        description: Returns all Academic Periods that start after the specified date. ISO 8601 Date format
        schema:
          type: string
          format: date
      - name: ends_before
        in: query
        description: Returns all Academic Periods that end before the specified date. ISO 8601 format
        schema:
          type: string
          format: date
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: academic-periods
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  academic-periods:
                    type: array
                    items:
                      $ref: '#/components/schemas/AcademicPeriodDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AcademicPeriodDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Academic Period
      summary: Create an Academic Period
      description: This operation will create a new Academic Period
      operationId: createAcademicPeriods
      requestBody:
        description: The payload containing the details of the Academic Period to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/AcademicPeriodDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/AcademicPeriodDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AcademicPeriodDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/AcademicPeriodDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/academic_periods/{id}:
    get:
      tags:
      - Academic Period
      summary: Retrieve an Academic Period
      description: Gets a single Academic Period with the specified academic period code.
      operationId: retrieveAcademicPeriods
      parameters:
      - name: id
        in: path
        description: The ID of the Academic Period to be retrieved
        required: true
        schema:
          type: string

      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AcademicPeriodDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/AcademicPeriodDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Academic Period
      summary: Update an Academic Period
      description: This operation will update an Academic Period
      operationId: updateAcademicPeriods
      parameters:
      - name: id
        in: path
        description: The Internal ID of the Academic Period to be updated
        required: true
        schema:
          type: string

      requestBody:
        description: The payload containing details of the Academic Period to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/AcademicPeriodDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/AcademicPeriodDetails'
        required: true

      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AcademicPeriodDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/AcademicPeriodDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# ADDRESS                             #          
#######################################
  /webservice/parties/{party_identifier}/contact_addr:
    get:
      tags:
      - Address
      summary: List Party Addresses
      description: This operation lists all Party Addresses
      operationId: listPartyAddress
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: |
            Successful operation. 
            
            Address object will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: addresses
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  addresses:
                    type: array
                    items:
                      $ref: '#/components/schemas/PartyAddress'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartyAddress'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Address
      summary: Create a Party Address
      description: This operation creates a party Address
      operationId: createPartyAddress
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the party Address to be created.
        content:
          application/xml: 
              schema:
                $ref: '#/components/schemas/PartyAddress'
          application/json:
              schema:
               $ref: '#/components/schemas/PartyAddress'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyAddress'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyAddress'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/parties/{party_identifier}/contact_addr/{id}:
    get:
      tags:
      - Address
      summary: Find Party Address
      description: This operation finds a Party Address
      operationId: RetrievePartyAddress
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Address id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyAddress'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyAddress'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Address
      summary: Update a Party Address
      description: This operation will update a party group member
      operationId: updatePartyAddress
      parameters:
      - name: id
        in: path
        description: The address Id
        required: true
        schema:
          type: integer
          format: int32
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the party address to be updated.
        content:
          application/xml: 
              schema:
               $ref: '#/components/schemas/PartyAddress'
          application/json:
              schema:
                $ref: '#/components/schemas/PartyAddress'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyAddress'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyAddress'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/parties/{party_identifier}/contact_addr/{id}/delete:
    post:
      tags:
      - Address
      summary: Delete a Party Address
      description: This API deletes a Party Address
      operationId: deletePartyAddress
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: id of the Address to be deleted. 
        required: true
        schema:
          type: integer
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# ATTENDEE                            #          
#######################################
#This resource is used for listing and manipulating attendance for parties invited to events. It is therefore necessary for the party to be associated with the event via the invitees resource in order for any details entered via this resource to be meaningful.

  /webservice/attendees:
    get:
      tags:
      - Attendee
      summary: List Attendees
      description: This operation lists all Attendees to events
      operationId: listAttendee
      parameters:
      - name: event_id
        in: query
        description: Find by event
        schema:
          type: string
          example: XXXX
      - name: id
        in: query
        description: Find by party identifier
        schema:
          type: string
          example: 1
      - name: created_since
        in: query
        description: |
          Finds attendee records created on or after this date and time. date+time in ISO 8601 format.
          
          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2017-11-20T15:13:58+10:00"
      - name: updated_since
        in: query
        description: |
          Finds attendee records updated on or after this date and time. date+time in ISO 8601 format.

          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2017-11-20T15:13:58+10:00"
      responses:
        200:
          description: |
            Successful operation. 
            
            Attendee object will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: attendees
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  attendees:
                    type: array
                    items:
                      $ref: '#/components/schemas/AttendeeDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttendeeDetails'
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/courses/{course_number}/events/{event_id}/attendees:
    post:
      tags:
      - Attendee
      summary: Create an Attendee
      description: This operation creates an Attendee
      operationId: createAttendee
      parameters:
      - name: course_number
        in: path
        description: Course number
        required: true
        schema:
          type: string
          example: 1
      - name: event_id
        in: path
        description: Event Identifier
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the attendee to be created.
        content:
          application/xml: 
              schema:
                $ref: '#/components/schemas/AttendeeDetails'
          application/json:
              schema:
               $ref: '#/components/schemas/AttendeeDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AttendeeDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/AttendeeDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/courses/{course_number}/events/{event_id}/attendees/{party_identifier}:
    get:
      tags:
      - Attendee
      summary: Find an Attendee
      description: This operation finds an Attendee
      operationId: RetrieveAttendee
      parameters:
      - name: course_number
        in: path
        description: Find by course
        required: true
        schema:
          type: string
          example: 1
      - name: event_id
        in: path
        description: Find by event
        required: true
        schema:
          type: string
          example: 1
      - name: party_identifier
        in: path
        description: ID of the attendee
        required: true
        schema:
          type: string
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AttendeeDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/AttendeeDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Attendee
      summary: Update an Attendee
      description: This operation will update an attendee
      operationId: updateAttendee
      parameters:
      - name: course_number
        in: path
        description: Find by course
        required: true
        schema:
          type: string
          example: 1
      - name: event_id
        in: path
        description: Find by event
        required: true
        schema:
          type: string
          example: 1
      - name: party_identifier
        in: path
        description: ID of the attendee
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the attendee to be updated.
        content:
          application/xml: 
              schema:
               $ref: '#/components/schemas/AttendeeDetails'
          application/json:
              schema:
                $ref: '#/components/schemas/AttendeeDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AttendeeDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/AttendeeDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/courses/{course_number}/events/{event_id}/attendees/{party_identifier}/delete:
    post:
      tags:
      - Attendee
      summary: Delete an Attendee
      description: This operation deletes an attendee
      operationId: deleteAttendee
      parameters:
      - name: course_number
        in: path
        description: Find by course
        required: true
        schema:
          type: string
          example: 1
      - name: event_id
        in: path
        description: Find by event
        required: true
        schema:
          type: string
          example: 1
      - name: party_identifier
        in: path
        description: ID of the attendee
        required: true
        schema:
          type: string
          example: 1
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# AVETMISS                            #          
#######################################
# There is a maximum of 1 child of this resource per party. To create or update these records, the details should be included as part of the party xml and sent to the party (i.e. the ‘parent’ of the ‘child’) endpoint.

  /webservice/party_avetmiss:
    get:
      tags:
      - AVETMISS
      summary: List a Party AVETMISS
      description: This a Party AVETMISS.
      operationId: listPartyAvetmiss
      responses:
        200:
          description: |
            Successful operation
            
            AVETMISS object will be returned. 
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AvetmissDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/AvetmissDetails'

#          application/xml: 
#              schema:
#                type: object
#                xml:
#                  name: party
#                properties:
#                      avetmiss:
#                         $ref: '#/components/schemas/AvetmissDetails'
#          application/json:
#              schema:
#                type: object
#                properties:
#                      avetmiss:
#                         $ref: '#/components/schemas/AvetmissDetails'

        default:
          $ref: '#/components/responses/defaultError'

  /webservice/parties/{party_identifier}:
    post:
      tags:
      - AVETMISS
      summary: Create or Update a Party AVETMISS
      description: This API creates/ updates a party AVETMISS
      operationId: createPartyAvetmiss
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the party AVETMISS to be created/Updated.
        content:
          application/xml: 
              schema:
                type: object
                xml:
                  name: party
                properties:
                      avetmiss:
                         $ref: '#/components/schemas/AvetmissDetails'
          application/json:
              schema:
                type: object
                properties:
                      avetmiss:
                         $ref: '#/components/schemas/AvetmissDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AvetmissDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/AvetmissDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# BatchLog                            #          
#######################################
  /webservice/batch_logs:
    get:
      tags:
      - BatchLog
      summary: List Batch Processing Statuses and Errors
      description: Lists batch processing statuses and errors back from JRPlus to resolve upload issues.
      operationId: listBatchLogs
      responses:
        200:
          description: |
            Successful operation. 
            
            Batchlog object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: batch-logs
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  batch-logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/BatchLogDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BatchLogDetails'
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/batch_logs/{id}:
    get:
      tags:
      - BatchLog
      summary: Retrieve Batch Processing Status and Errors
      description: Retrieves batch processing status and errors back from JRPlus to resolve upload issues.
      operationId: retrieveBatchLogs
      parameters:
      - name: id
        in: path
        description: Batch Log id
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/BatchLogDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/BatchLogDetails'
        default:
          $ref: '#/components/responses/defaultError'


#######################################
# Brand                               #          
#######################################
  /webservice/brands:
    get:
      tags:
      - Brand
      summary: List Brands
      description: List Bands
      operationId: listBrands
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: brands
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  brands:
                    type: array
                    items:
                      $ref: '#/components/schemas/BrandDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BrandDetails'
        default:
          $ref: '#/components/responses/defaultError'
                
  /webservice/brands/{id}:
    get:
      tags:
      - Brand
      summary: Retrieve a Brand
      description: Retrieve a Brand specified by a brand id
      operationId: retrieveBrands
      parameters:
      - name: id
        in: path
        description: INT - Unique Internal ID of the Brand object to be retrieved. 
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/BrandDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetails'
        default:
          $ref: '#/components/responses/defaultError'


#######################################
# Certificate                         #          
#######################################
# This resource can be used to access certificate records for a particular enrolment. Normally, when creating a certificate through the user interface the system will also generate a PDF document based on a template. Creating a certificate record through this resource will not generate such a document, just the certificate record. If the certificate indicates that the student has completed his or her qualification or statement of attainment, the qualification issued or statement-issued flag on the enrolment has to be manually updated through the enrolment resource.

  /webservice/certificates:
    get:
      tags:
      - Certificate
      summary: List Certificates
      description: This operation lists all Certificates, or alternatively can be used to search for all Certificates which match one or more of the parameters provided.
      operationId: listCertificates
      parameters:
      - name: enrolment_identifier
        in: query
        description: Find by enrolment identifier
        schema:
          type: string
          example: ENJOB63375
      - name: certificate_number
        in: query
        description: Find by certificate number
        schema:
          type: string
          example: 1
      - name: document_id
        in: query
        description: Find a Certificate by the associated document_id
        schema:
          type: string
          example: 1
      - name: created_since
        in: query
        description: |
          Find certificates created since a particular date, ISO8601 format.

          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded
        schema:
          type: string
          format: date-time
          example: "2020-08-17T15:25:23+10:00"
      - name: updated_since
        in: query
        description: |
          Find certificates updated since a particular date, ISO8601 format.
          
          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded   
        schema:
          type: string
          format: date-time
          example: "2020-08-17T15:25:23+10:00"
      - name: issue_date
        in: query
        description: Find certificates issued on a particular date, ISO8601 format.
        schema:
          type: string
          format: date
          example: "2017-07-21"
      - name: issued_since
        in: query
        description: Find certificates issued since a particular date, ISO8601 format.
        schema:
          type: string
          format: date
          example: "2017-10-15"
          
      responses:
        200:
          description: |
           Successful operation
           
           Certificate object(s) will be returned. 
  
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: certificates
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  certificates:
                    type: array
                    items:
                      $ref: '#/components/schemas/CertificateDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CertificateDetails'
        default:
          $ref: '#/components/responses/defaultError'
          
  /webservice/enrolments/{enrolment_identifier}/certificates:
    post:
      tags:
      - Certificate
      summary: Create a Certificate
      description: This operation creates a certificate.
      operationId: createCertificate
      parameters:
      - name: enrolment_identifier
        in: path
        description: Enrolment identifier
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the Certificate to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/CertificateDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/CertificateDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CertificateDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

      
  /webservice/certificates/{id}:
    get:
      tags:
      - Certificate
      summary: Retrieve a Certificate. 
      description: This operation gets the details for a certificate specified by the id of the certificate
      operationId: findCertificate
      parameters:
      - name: id
        in: path
        description: ID of the certificate
        required: true
        schema:
          type: number
          example: 1

      responses:
        200:
          description: |
           Successful operation
           
           A single Certificate will be returned. 
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CertificateDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Certificate
      summary: Update a Certificate
      description: This operation updates a certificate.
      operationId: updateCertificate
      parameters:
      - name: id
        in: path
        description: ID of the certificate
        required: true
        schema:
          type: number
          example: 1
      requestBody:
        description: The payload containing the details of the Enrolment to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/CertificateDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/CertificateDetails'
        required: true
      responses:
        202:
          description: Successful operation - Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CertificateDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/certificates/{id}/delete:
    post:
      tags:
      - Certificate
      summary: Delete a Certificate
      description: This operation deletes a Certificate.
      operationId: deleteCertificate
      parameters:
      - name: id
        in: path
        description: ID of the certificate
        required: true
        schema:
          type: number
          example: 1
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Client Agent                        #          
#######################################
#A course enrolment can have one or more agents and the following fields can be used to add the related details. Note: In order to view agents added through API in UI, the ‘Has Agent’ checkbox under Enrolment > Agents tab has to be ticked.

  /webservice/client_agent:
    get:
      tags:
      - Client Agent 
      summary: List Client Agents
      description: This API lists all Client Agents or alternatively can be used to search for all Client Agents which match the parameter provided.
      operationId: listClientAgents
      parameters:
      - name: id
        in: query
        description: Find by client agent id
        schema:
          type: string
      responses:
        200:
          description: |
           Successful operation
           
            Client Agents object(s) will be returned. 
  
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: client-agents
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  client-agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClientAgentDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientAgentDetails'
        default:
          $ref: '#/components/responses/defaultError'


  /webservice/client_agent/{id}:
    get:
      tags:
      - Client Agent
      summary: Find a Client Agent 
      description: This operation retrieves a client agent
      operationId: retrieveClientAgent
      parameters:
      - name: id
        in: path
        description: The client agent Id
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ClientAgentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ClientAgentDetails'
        default:
          $ref: '#/components/responses/defaultError'
          

  /webservice/enrolments/{enrolment_identifier}/client_agent:
    post:
      tags:
      - Client Agent
      summary: Create a Client Agent
      description: This API creates a Client Agent.
      operationId: createClientAgents
      parameters:
      - name: enrolment_identifier
        in: path
        description: Enrolment identifier
        required: true
        schema:
          type: string
          example: ENJOB63375
      requestBody:
        description: The payload containing the details of the Client Agent to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/ClientAgentDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/ClientAgentDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ClientAgentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ClientAgentDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      
  /webservice/enrolments/{enrolment_identifier}/client_agent/{id}:
    get:
      tags:
      - Client Agent
      summary: Retrieve a Client Agent. 
      description: This API gets the details for a Client Agent specified by the client agent identifier with additional
      operationId: findClientAgent
      parameters:
      - name: enrolment_identifier
        in: path
        description: Find by enrolment identifier
        required: true
        schema:
          type: string
          example: ENJOB63375
      - name: id
        in: path
        description: Find by client agent id
        required: true
        schema:
          type: string
          example: 12
      responses:
        200:
          description: |
           Successful operation
           
           A single client agent will be returned. 
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ClientAgentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ClientAgentDetails'
        default:
          $ref: '#/components/responses/defaultError'
    post:
      tags:
      - Client Agent
      summary: Update a Client Agent
      description: |
        This API updates a Client Agent.
      operationId: updateClientAgents
      parameters:
      - name: enrolment_identifier
        in: path
        description: Enrolment identifier
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Find by client agent id
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the client agent to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/ClientAgentDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/ClientAgentDetails'
        required: true
      responses:
        202:
          description: Successful operation - Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ClientAgentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ClientAgentDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Contact detail                     #          
#######################################
#Contact detail refers to Phone, Mobile, Fax and Email

  /webservice/parties/{party_identifier}/contact_detail:
    get:
      tags:
      - Contact Detail
      summary: List Party Contact Details
      description: This operation lists party contact details.
      operationId: listContactDetails
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      responses:
        200:
          description: |
            Successful operation. 
            
            Contact detail object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: contact-details
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  contact-details:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContactDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Contact Detail
      summary: Create a Contact Detail
      description: This operation creates a Contact detail
      operationId: createContactDetails
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      requestBody:
        description: The payload containing the contact details to be created.
        content:
          application/xml: 
              schema:
                 $ref: '#/components/schemas/ContactDetails'
          application/json:
              schema:
                 $ref: '#/components/schemas/ContactDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ContactDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/parties/{party_identifier}/contact_detail/{id}:
    get:
      tags:
      - Contact Detail
      summary: Find a Contact Detail
      description: This operation retrieves a contact detail
      operationId: retrieveContactDetails
      parameters:
      - name: id
        in: path
        description: The contact detail Id
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ContactDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Contact Detail
      summary: Update a Contact Detail
      description: This operation will update a contact detail
      operationId: updateContactDetails
      parameters:
      - name: id
        in: path
        description: The contact detail Id
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      requestBody:
        description: The payload containing the contact to be updated.
        content:
          application/xml: 
              schema:
#                type: object
#                xml:
#                  name: party
#                properties:
#                      avetmiss:
                         $ref: '#/components/schemas/ContactDetails'
          application/json:
              schema:
#                type: object
#                properties:
#                      avetmiss:
                         $ref: '#/components/schemas/ContactDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ContactDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/parties/{party_identifier}/contact_detail/{id}/delete:
    post:
      tags:
      - Contact Detail
      summary: Delete a Contact Detail
      description: This API deletes a Party Contact
      operationId: deleteContacDetail
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: |
          id of the contact detail to be deleted. 
        required: true
        schema:
          type: integer
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Course                              #          
#######################################
# A course is a way of grouping common enrolments and is one of the most common entities used on the API. This is often the record that is called and published on a provider’s website to facilitate online student enrolment. It is also where the Online Enrolment Portal (OEP) settings are enabled and configured.

# When creating a new course, either one or both of the attributes course-scope-code and course-scope-name need to be present. The elements represent, respectively, the code and name of an existing program in the system.

  /webservice/courses:
    get:
      tags:
      - Course
      summary: List Courses
      description: This API lists all Courses, or alternatively can be used to search for all Courses which match one or more of the parameters provided.
      operationId: listCourses
      parameters:
      - name: academic_period_code
        in: query
        description: Find Courses with the specified Academic Period Code
        schema:
          type: string
      - name: allow_enrolments
        in: query
        description: Find by Course that have Allow Enrolments flag enabled/disabled.
        schema:
          type: boolean
          example: true
      - name: course_number
        in: query
        description: Find by course number
        schema:
          type: string
          example: 1
      - name: course_scope_code
        in: query
        description: Find by program code
        schema:
          type: string
          example: 1
      - name: course_status
        in: query
        description: Find by course Status
        schema:
          type: string
          example: Course Status A
      - name: course_type
        in: query
        description: Find by course type
        schema:
          type: string
          example: Business
      - name: online
        in: query
        description: Find by Course that have Online Enrolment enabled/disabled
        schema:
          type: boolean
          example: true
      - name: subject_code
        in: query
        description: Finds Courses that use this subject (unit of study)
        schema:
          type: string
      - name: unit_scope
        in: query
        description: Find Courses that use Units with the specified Unit Code
        schema:
          type: string
      - name: include[]
        in: query
        description: Details of objects to inlude in the response
        schema:
          type: array
          items:
            type: string
            enum: [academic_period, subject, unit]
      - name: enabled_includes_only
        in: query
        description: |
          States whether the objects to included must be enabled or not.  
          
          This works correctly when used with other valid ?include[] parameters (it will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false)
        schema:
          type: boolean
          example: true
      - name: start_date_from
        in: query
        description: Find records with a start date after this. Date in ISO 8601 format
        schema:
          type: string
          format: Date
          example: "2017-11-20"
      - name: start_date_to
        in: query
        description: Find records with a start date before this. Date in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "2017-11-20"
      - name: end_date_from
        in: query
        description: Find records with a end date after this. Date in ISO 8601 format.
        schema:
          type: string
          format: Date
      - name: end_date_to
        in: query
        description: Find records with a end date before this. Date in ISO 8601 format
        schema:
          type: string
          format: Date
          example: "2017-11-20"
      - name: created_since
        in: query
        description: |
          Find records created on or after this date. Date in ISO 8601 format

          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2017-11-20"
      - name: updated_since
        in: query
        description: |
          Find records updated on or after this date. Date in ISO 8601 format

          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2017-11-20"
      responses:
        200:
          description: |
           Successful operation
           
            Course object(s) with optional additonal objects included in the request will be returned. 
            
            `enabled_includes_only` flag will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false.

            If included in the request, minimal data sets for Units and Subjects associated with the course object(s) will be returned.
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: courses
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  courses:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/CourseDetails' 
                        - $ref: '#/components/schemas/IncludeCourse' 

            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/CourseDetails' 
                    - $ref: '#/components/schemas/IncludeCourse' 
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Course
      summary: Create a Course
      description: This operation will create a Course in JR Plus
      operationId: createCourse
      requestBody:
        description: The payload containing the details of the Course to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/CourseDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/CourseDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CourseDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
  
  
  /webservice/courses/{course_number}:
    get:
      tags:
      - Course
      summary: Retrieve a Course. 
      description: This API gets the details for one Course specified by the Course number with additional object(s)
      operationId: findACourse
      parameters:
      - name: course_number
        in: path
        description: Find by Course Number of the course
        required: true
        schema:
          type: string
      - name: include[]
        in: query
        description: Objects to inlude in the response
        schema:
          type: array
          items:
            type: string
            enum: [academic_period, subject, unit]
      - name: enabled_includes_only
        in: query
        description: |
          States whether the objects to included must be enabled or not.  
          
          This works correctly when used with other valid ?include[] parameters (it will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false)
        schema:
          type: boolean
          example: true
      responses:
        200:
          description: |
           Successful operation
           
            A single Course object with optional additonal objects included in the request will be returned. 

            `enabled_includes_only` flag will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false.

            If included in the request, minimal data sets for Units and Subjects associated with the course object will be returned.
          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CourseDetails' 
                  - $ref: '#/components/schemas/IncludeCourse' 
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CourseDetails' 
                  - $ref: '#/components/schemas/IncludeCourse'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Course
      summary: Update a Course
      description: This operation will update a Course in JR Plus
      operationId: updateCourses
      parameters:
      - name: course_number
        in: path
        description: Find by Course Number of the course
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the Location to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/CourseDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/CourseDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CourseDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      
  /webservice/courses/{course_number}/subjects:
    get:
      tags:
      - Course
      summary: Retrieve subjects associated to a Course
      description: This API gets the Subjects for one Course specified by the Course_number.
      operationId: retrieveCourseSubjects
      parameters:
      - name: course_number
        in: path
        description: The course number associated with that Course
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: subjects
                properties:
                  total:
                    type: integer
                    description: Total count of records returned              
                    xml:  
                      attribute: true
                  units:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubjectDetailsLite-Course'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectDetailsLite-Course'
        default:
          $ref: '#/components/responses/defaultError'

  /courses/{course_number}/units:
    get:
      tags:
      - Course
      summary: Retrieve units associated to a Course
      description: This API get the Units for one Course specified by the Course_number.
      operationId: retrieveCourseUnits
      parameters:
      - name: course_number
        in: path
        description: The course number associated with that Course
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: units
                properties:
                  total:
                    type: integer
                    description: Total count of records returned              
                    xml:  
                      attribute: true
                  units:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitDetailsLite-Course'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitDetailsLite-Course'
        default:
          $ref: '#/components/responses/defaultError'


#######################################
# Course Applications                 #          
#######################################
# This purpose-built API will enable Course Applications to be created externally via the API and an Offer (enrolment) attached to that Application.  It will also allow updating and archiving of the Course Application.

  /webservice/course_applications:
    get:
      tags:
      - Course Application
      summary: List Course Applications
      description: This API lists all Course Applications, or alternatively can be used to search for all Course Applications which match one or more of the parameters provided.
      operationId: listCourseApplications
      parameters:
      - name: application_id
        in: query
        description: Find by the Application identifier
        schema:
          type: string
          example: CA00001
      - name: ext_id
        in: query
        description: Find by External Identifier of the application
        schema:
          type: string
          example: EXT-CA00001
      - name: application_status
        in: query
        description: Find by Application status
        schema:
          type: string
          example: Applied
      - name: course_number
        in: query
        description: Find by Course Number
        schema:
          type: string
          example: 1
      - name: employer_id
        in: query
        description: Find all Applications of employees of the given party
        schema:
          type: string
          example: 1
      - name: enrolment_id
        in: query
        description: Find by enrolment identifier
        schema:
          type: string
          example: 1
      - name: location_id
        in: query
        description: Find by course location id
        schema:
          type: string
          example: 1
      - name: party_id
        in: query
        description: Find by party identifier
        schema:
          type: string
          example: PABE001
      - name: study_mode_id
        in: query
        description: Find by study mode
        schema:
          type: string
      - name: created_since
        in: query
        description: |
          Find applications created on or after this date. Date in ISO 8601 format.
          
          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2020-08-17T15:25:23+10:00"
      - name: modified_since
        in: query
        description: |
          Find applications updated on or after this date. Date in ISO 8601 format
          
          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2020-08-17T15:25:23+10:00"
      - name: include[]
        in: query
        description: Details of objects to include in the response
        schema:
          type: array
          items:
            type: string
            enum: [documents, progress, interviews]
      responses:
        200:
          description: |
           Successful operation
           
            Applications object(s) with optional additional objects included in the request will be returned. 
            
            `documents`, `progress`, and `interview` collections will not be returned unless the required include[]= parameter for that collection is used.
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: course-applications
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  applications:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/ApplicationDetails' 
                        - $ref: '#/components/schemas/IncludeApplication' 

            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/ApplicationDetails' 
                    - $ref: '#/components/schemas/IncludeApplication' 
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Course Application
      summary: Create a Course Application
      description: This operation will create a Course Application
      operationId: createCourseApplication
      requestBody:
        description: The payload containing the details of the Application to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/ApplicationDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/ApplicationDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApplicationDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
  
  
  /webservice/course_applications/{application_id}:
    get:
      tags:
      - Course Application
      summary: Retrieve a Course Application. 
      description: This API gets the details for one Course Application specified by the application id with additional object(s)
      operationId: findACourseApplication
      parameters:
      - name: application_id
        in: path
        description: |
          Find by application identifier
          
          `external_id (string) can be sent in place of the application_id in the form of "ext_id:<external_id>"`.
        required: true
        schema:
          type: string
      - name: include[]
        in: query
        description: Objects to include in the response
        schema:
          type: array
          items:
            type: string
            enum: [documents, progress, interviews]
      responses:
        200:
          description: |
           Successful operation
           
            A single Application object with optional additional objects included in the request will be returned. 
            
            `documents`, `progress`, and `interview` collections will not be returned unless the required include[]= parameter for that collection is used.

          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApplicationDetails' 
                  - $ref: '#/components/schemas/IncludeApplication' 
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApplicationDetails' 
                  - $ref: '#/components/schemas/IncludeApplication'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Course Application
      summary: Update a Course Application
      description: This API will update a Course Application
      operationId: updateCourseApplication
      parameters:
      - name: application_id
        in: path
        description: |
          Identifier of the application
          
          `external_id (string) can be sent in place of the application_id in the form of "ext_id:<external_id>"`.
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the Application to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/ApplicationDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/ApplicationDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApplicationDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      
  /webservice/course_application/statuses:
    get:
      tags:
      - Course Application
      summary: Lists Statuses of Course Application
      description: This API lists statuses of Course Application.
      operationId: ListApplicationsStatuses
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: course-application-statuses
                properties:
                  total:
                    type: integer
                    description: Total count of records returned              
                    xml:  
                      attribute: true
                  course-application-statuses:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApplicationStatusDetails'
            application/json:
              schema:
                type: array
                items:
                      $ref: '#/components/schemas/ApplicationStatusDetails'
        default:
          $ref: '#/components/responses/defaultError'


#######################################
# Course Payment Options              #          
#######################################
# 

  /webservice/course_payment_options:
    get:
      tags:
      - Course Payment Options
      summary: List Course Payment Options
      description: This API lists all course payment options, or alternatively can be used to search for all Course payment options which match one or more of the parameters provided.
      operationId: listCoursePaymentOptions
      parameters:
      - name: course_number
        in: query
        description: Find by course number
        schema:
          type: string
          example: 1
      - name: id
        in: query
        description: Find by Course payment option id
        schema:
          type: number
          example: 1
      - name: date_from
        in: query
        description: Find records with a start date after this. Date in ISO 8601 format
        schema:
          type: string
          format: Date
          example: "2017-11-20"
      - name: date_to
        in: query
        description: Find records with a start date before this. Date in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "2017-11-20"
      - name: created_since
        in: query
        description: Find records created on or after this date. Date in ISO 8601 format
        schema:
          type: string
          format: Date
          example: "2017-11-20"
      - name: created_before
        in: query
        description: Find records created before this date. Date in ISO 8601 format
        schema:
          type: string
          format: Date
          example: "2017-11-20"
      responses:
        200:
          description: |
           Successful operation
           
            Course object(s) with optional additonal objects included in the request will be returned. 
            
            `enabled_includes_only` flag will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false.

            If included in the request, minimal data sets for Units and Subjects associated with the course object(s) will be returned.
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: course-payment-options
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  courses:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/CoursePaymentOptionsDetails' 

            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/CoursePaymentOptionsDetails' 
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Course Payment Options
      summary: Create a Course Payment Option
      description: This operation will create a Course Payment Option in JR Plus
      operationId: createCoursePaymentOption
      requestBody:
        description: The payload containing the details of the Course payment option to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/CoursePaymentOptionsDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/CoursePaymentOptionsDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CoursePaymentOptionsDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CoursePaymentOptionsDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
  
  
  /webservice/course_payment_options/{id}:
    get:
      tags:
      - Course Payment Options
      summary: Retrieve a Course Payment Option. 
      description: This API gets the details for one course payment option specified by the course payment option id with additional object(s)
      operationId: findACoursePaymentOption
      parameters:
      - name: id
        in: path
        description: Find by Course Payment Option id
        required: true
        schema:
          type: number
          example: 1
      responses:
        200:
          description: |
           Successful operation
           
            A single Course object with optional additonal objects included in the request will be returned. 

            `enabled_includes_only` flag will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false.

            If included in the request, minimal data sets for Units and Subjects associated with the course object will be returned.
          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CoursePaymentOptionsDetails' 
                  - $ref: '#/components/schemas/IncludeCourse' 
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CoursePaymentOptionsDetails' 
                  - $ref: '#/components/schemas/IncludeCourse'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Course Payment Options
      summary: Update a Course Payment Option
      description: This operation will update a Course payment option in JR Plus
      operationId: updateCoursePaymentOption
      parameters:
      - name: id
        in: path
        description: Find by Course Payment Option id
        required: true
        schema:
          type: number
          example: 1
      requestBody:
        description: The payload containing the details of the Location to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/CoursePaymentOptionsDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/CoursePaymentOptionsDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CoursePaymentOptionsDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CoursePaymentOptionsDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      


#######################################
# Credit Note                         #          
#######################################
  /webservice/credit_notes:
    get:
      tags:
      - Credit Note
      summary: List Credit Notes
      description: This operation lists all credit notes, or alternatively can be used to search for all credit notes which match one or more of the parameters provided.
      operationId: listCreditNote
      parameters:
      - name: party_id
        in: query
        description: Find credit notes by party id
        schema:
          type: string
          example: PART123
      - name: credit_note_number
        in: query
        description: Find credit notes by credit note number
        schema:
          type: string
          example: CRN123
      - name: invoice_number
        in: query
        description: Find credit notes by invoice number
        schema:
          type: string
          example: INV123
      - name: created_since
        in: query
        description: Find credit notes created since, date+time in ISO 8601 format
        schema:
          type: string
          format: date-time
          example: "2017-11-20"
      - name: updated_since
        in: query
        description: Find invoices updated since, date+time in ISO 8601 format.
        schema:
          type: string
          format: date-time
          example: "2017-11-20"
      - name: credit_note_date
        in: query
        description: Find invoices by credit note date.
        schema:
          type: string
          format: Date
          example: "2017-11-20"
      responses:
        200:
          description: |
           Successful operation
           
            Credit Note object(s) will be returned. 
  
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: credit-notes
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  credit-notes:
                    type: array
                    items:
                      $ref: '#/components/schemas/CreditNoteDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditNoteDetails'

        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Credit Note
      summary: Create a Credit Note
      description: This operation creates a Credit Note
      operationId: createCreditNote
      requestBody:
        description: The payload containing the details of the credit note to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/CreditNoteDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/CreditNoteDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CreditNoteDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNoteDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      
  /webservice/credit_notes/{credit_note_number}:
#   /webservice/credit_note/{credit_note_number}:
    get:
      tags:
      - Credit Note
      summary: Retrieve a Credit Note. 
      description: This operation gets the details for a credit note specified by the credit note number
      operationId: findCreditNote
      parameters:
      - name: credit_note_number
        in: path
        description: Credit Note number
        required: true
        schema:
          type: string
          example: ABC123
      responses:
        200:
          description: |
           Successful operation
           
           A single Invoice will be returned. 
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CreditNoteDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNoteDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Credit Note
      summary: Update a Credit Note
      description: This API updates a Credit Note.
      operationId: updateCreditNote
      parameters:
      - name: credit_note_number
        in: path
        description: Credit Note number
        required: true
        schema:
          type: string
          example: ABC123
      requestBody:
        description: The payload containing the details of the Invoice to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/CreditNoteDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/CreditNoteDetails'
        required: true
      responses:
        202:
          description: Successful operation - Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CreditNoteDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNoteDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# DOCUMENT                            #          
#######################################
  /webservice/parties/{party_identifier}/documents:
    get:
      tags:
      - Document
      summary: List Documents of a Party
      description: This operation lists all documents of a Party
      operationId: listDocument
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: 1
      responses:
        200:
          description: |
            Successful operation. 
            
            Document object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: documents
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Document
      summary: Create a Document
      description: This operation creates a document
      operationId: createDocument
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the party document to be created.
        content:
          application/xml: 
              schema:
                $ref: '#/components/schemas/DocumentDetails'
          application/json:
              schema:
               $ref: '#/components/schemas/DocumentDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DocumentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/parties/{party_identifier}/documents/{id}:
    get:
      tags:
      - Document
      summary: Find a Document
      description: This operation finds a document
      operationId: RetrieveDocument
      parameters:
      - name: party_identifier
        in: path
        description: Find by Party
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Find by document id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DocumentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Document
      summary: Update a Document
      description: This operation will update a document
      operationId: updateDocument
      parameters:
      - name: id
        in: path
        description: The document Id
        required: true
        schema:
          type: integer
          format: int32
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the document to be updated.
        content:
          application/xml: 
              schema:
               $ref: '#/components/schemas/DocumentDetails'
          application/json:
              schema:
                $ref: '#/components/schemas/DocumentDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyAddress'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyAddress'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# EMPLOYEE                            #          
#######################################
  /webservice/parties/{party_id}/employees:
    get:
      tags:
      - Employee
      summary: List Employees
      description: This operation lists all employees of an employer with the specified party_id
      operationId: listEmployee
      parameters:
      - name: party_id
        in: path
        description: ID of the Employer Party
        required: true
        schema:
          type: string
          example: 1
      responses:
        200:
          description: |
            Successful operation. 
            
            Employee Contact object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: employees
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  employees:
                    type: array
                    items:
                      $ref: '#/components/schemas/PartyEmployee'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartyEmployee'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Employee
      summary: Create an Employee
      description: This operation creates an employee
      operationId: createPartyEmployee
      parameters:
      - name: party_id
        in: path
        description: Id of the Employer Party
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the party employee to be created.
        content:
          application/xml: 
              schema:
                $ref: '#/components/schemas/PartyEmployee'
          application/json:
              schema:
               $ref: '#/components/schemas/PartyEmployee'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyEmployee'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyEmployee'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


  /webservice/parties/{party_id}/employees/{id}:
    get:
      tags:
      - Employee
      summary: Find an Employee
      description: This operation finds an Employee
      operationId: RetrievePartyEmployee
      parameters:
      - name: party_id
        in: path
        description: ID of the Employer Party
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: ID of the Employee
        required: true
        schema:
          type: integer
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyEmployee'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyEmployee'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Employee
      summary: Updates an Employee
      description: This operation will update an employee
      operationId: updatePartyEmployee
      parameters:
      - name: party_id
        in: path
        description: ID of the Employer Party
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: ID of the Employee
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        description: The payload containing the details of the employee to be updated.
        content:
          application/xml: 
              schema:
               $ref: '#/components/schemas/PartyEmployee'
          application/json:
              schema:
                $ref: '#/components/schemas/PartyEmployee'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyEmployee'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyEmployee'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


  /webservice/parties/{party_id}/employees/{id}/delete:
    post:
      tags:
      - Employee
      summary: Delete a Party Employee
      description: This API deletes an employee
      operationId: deletePartyEmployee
      parameters:
      - name: party_id
        in: path
        description: ID of the Employer Party
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: |
          ID of the Employee to be deleted. 
        required: true
        schema:
          type: integer
          example: 1
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Enrolment                           #          
#######################################
# An enrolment is effectively a role against a party. A party can have many enrolments. The enrolment captures attributes specific to the student (e.g. start date, target end date, delivery mode etc)

  /webservice/enrolments:
    get:
      tags:
      - Enrolment
      summary: List Enrolments
      description: This API lists all Enrolments, or alternatively can be used to search for all Enrolment which match one or more of the parameters provided.
      operationId: listEnrolments
      parameters:
      - name: party_identifier
        in: query
        description: Find by party identifier
        schema:
          type: string
          example: PATRA412
      - name: rto_identifier
        in: query
        description: Find by RTO identifier
        schema:
          type: string
          example: 1A4ASB
      - name: employer_identifier
        in: query
        description: Find all enrolments of employees of the given party
        schema:
          type: string
          example: EMP123
      - name: unit_id
# must this be the unit code??
        in: query
        description: Find all enrolments forthe given unitcode
        schema:
          type: string
          example: ASD132
      - name: created_since
        in: query
        description: |
          Find records created since. A date+time in ISO 8601 format.

          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2020-08-17T15:25:23+10:00"
      - name: updated_since
        in: query
        description: |
          Find records updated since. A date+time in ISO 8601 format.

          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2020-08-17T15:25:23+10:00"
      - name: created_before
        in: query
        description: Find records created before, exclusive of this date. A date in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "2014-01-01"
      - name: course_number
        in: query
        description: Find by course number
        schema:
          type: string
          example: CSEJOB01885
      - name: eligibility_exemption_indicator
        in: query
        description: Find by eligibility exemption indicator
        schema:
          type: boolean
          example: false
      - name: enrolment_identifier
        in: query
        description: Find by enrolment identifier
        schema:
          type: string
          example: ENJOB63375
      - name: enrolment_status
        in: query
        description: Find by enrolment Status
        schema:
          type: string
          example: Active
      - name: ext_id
        in: query
        description: Find by External Identifier of the enrolment
        schema:
          type: string
          example: EXT-ENR00001
      - name: start_date_from
        in: query
        description: Find enrolments with start date since this date, date in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "2015-01-01"
      - name: start_date_to
        in: query
        description: Find enrolments with start date till this date, date in ISO 8601 format
        schema:
          type: string
          format: Date
          example: "2017-01-01"
      - name: target_end_date_from
        in: query
        description: Find enrolments with target end date since this date, in ISO 8601 format
        schema:
          type: string
          format: Date
          example: "2017-01-01"
      - name: target_end_date_to
        in: query
        description: Find enrolments with target end date till this date, in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "2017-01-01"
      - name: unit_created_since
        in: query
        description: Find enrolments with start date since this date, in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "2017-01-01"
      - name: unit_updated_since
        in: query
        description: Find enrolments with units updated since this date, in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "2017-01-01"
      - name: all_rtos
        in: query
        description: If this query parameter is set, results will not be scoped to the provider associated with your API key
        schema:
          type: string
      - name: academic_period_code
        in: query
        description: Find enrolments with the specified Academic Period Code
        schema:
          type: string
      - name: include[]
        in: query
        description: Details of objects to inlude in the response
        schema:
          type: array
          items:
            type: string
            enum: [academic_period]
      - name: enabled_includes_only
        in: query
        description: |
          States whether the objects to included must be enabled or not.  
          
          This works correctly when used with other valid ?include[] parameters (it will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false)
        schema:
          type: boolean
          example: true
      responses:
        200:
          description: |
           Successful operation
           
            Enrolment object(s) with optional additonal objects included in the request will be returned. 
          
            `enabled_includes_only` flag will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false.

          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: enrolments
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  enrolments:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/EnrolmentDetails' 
                        - $ref: '#/components/schemas/IncludeEnrolment' 
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/EnrolmentDetails' 
                    - $ref: '#/components/schemas/IncludeEnrolment' 
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Enrolment
      summary: Create an Enrolment
      description: This API creates an Enrolment.
      operationId: createEnrolments
      requestBody:
        description: The payload containing the details of the Enrolment to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/EnrolmentDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/EnrolmentDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/EnrolmentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/EnrolmentDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      
  /webservice/enrolments/{enrolment_identifier}:
    get:
      tags:
      - Enrolment
      summary: Retrieve an Enrolment. 
      description: This API gets the details for an enrolment specified by the Enrolment identifier with additional object(s)
      operationId: findEnrolment
      parameters:
      - name: enrolment_identifier
        in: path
        description: |
          Enrolment identifier

          `external_id (string) can be sent in place of the enrolment_identifier in the form of "ext_id:<external_id>"`.
        required: true
        schema:
          type: string
      - name: include[]
        in: query
        description: Objects to inlude in the response
        schema:
          type: array
          items:
            type: string
            enum: [academic_period]
      - name: enabled_includes_only
        in: query
        description: |
          States whether the objects to included must be enabled or not.  
          
          This works correctly when used with other valid ?include[] parameters (it will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false)
        schema:
          type: boolean
          example: true
      responses:
        200:
          description: |
           Successful operation
           
           A single Enrolment with optional additonal objects included in the request will be returned. 
          
           `enabled_includes_only` flag will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false.

          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/EnrolmentDetails' 
                  - $ref: '#/components/schemas/IncludeEnrolment' 
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/EnrolmentDetails' 
                  - $ref: '#/components/schemas/IncludeEnrolment' 
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/parties/{enrolment_identifier}:
    post:
      tags:
      - Enrolment
      summary: Update an Enrolment
      description: |
        This API updates an enrolment of a party.
      operationId: updateEnrolment
      parameters:
      - name: enrolment_identifier
        in: path
        description: |
          Enrolment identifier

          `external_id (string) can be sent in place of the enrolment_identifier in the form of "ext_id:<external_id>"`.
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the Enrolment to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/EnrolmentDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/EnrolmentDetails'
        required: true
      responses:
        202:
          description: Successful operation - Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/EnrolmentDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/EnrolmentDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Enrolment Employer                  #          
#######################################
  /webservice/employee_enrolments:
    get:
      tags:
      - Enrolment Employer
      summary: List Employers for an Enrolment
      description: This operaion lists all Employers for an Enrolment
      operationId: listEnrolmentEmployers
      parameters:
      - name: enrolment_identifier
        in: query
        description: Find by enrolment identifier
        schema:
          type: string
          example: ENJOB63375
      responses:
        200:
          description: |
           Successful operation
           
            Enrolment employer object(s) will be returned. 

          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: employers
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  employers:
                    type: array
                    items:
                        $ref: '#/components/schemas/EnrolmentEmployerDetails' 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnrolmentEmployerDetails' 
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Enrolment Employer
      summary: Create an Enrolment Employer
      description: This operation creates an Enrolment Employer
      operationId: createEnrolmentEmployer
      parameters:
      - name: enrolment_identifier
        in: query
        description: Enrolment identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the Enrolment to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/EnrolmentEmployerDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/EnrolmentEmployerDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/EnrolmentEmployerDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/EnrolmentEmployerDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      
  /webservice/enrolments/{enrolment_identifier}/employee_enrolments:
    get:
      tags:
      - Enrolment Employer
      summary: Retrieve an Employee Enrolment. 
      description: This API gets the details for an enrolment specified by the Enrolment identifier with additional object(s)
      operationId: findEnrolmentEmployer
      parameters:
      - name: enrolment_identifier
        in: path
        description: Enrolment identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: |
           Successful operation
           
           A single Enrolment with optional additonal objects included in the request will be returned. 
          
           `enabled_includes_only` flag will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false.

          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: employers
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  employers:
                    type: array
                    items:
                        $ref: '#/components/schemas/EnrolmentEmployerDetails' 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnrolmentEmployerDetails' 
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Enrolment Employer
      summary: Create an Enrolment Employer
      description: This operation creates an enrolment employer.
      operationId: createEnrolmentEmployer2
      parameters:
      - name: enrolment_identifier
        in: path
        description: Enrolment identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the Enrolment to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/EnrolmentEmployerDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/EnrolmentEmployerDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/EnrolmentEmployerDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/EnrolmentEmployerDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Events                              #          
#######################################
# Events are records for scheduling and include properties such as dates, times, locations and attendees.
  /webservice/events:
    get:
      tags:
      - Event
      summary: List Events
      description: |
        This API lists all Events or alternatively can be used to search for all Events which match one or more of the parameters provided.
      operationId: listEvents
      parameters:
      - name: course_number
        in: query
        description: Find by Course code, returns zero, 1 or multiple records.
        schema:
          type: string 
          example: 1
      - name: timetable_id
        in: query
        description: Find by Timetable id, returns zero, 1 or multiple records.
        schema:
          type: string
          example: 1
      - name: event_id
        in: query
        description: Find by Identifier of the Course Event, will only ever return 1 record.
        schema:
          type: string
          example: 1
      - name: ext_id
        in: query
        description: Find by External Identifier of the Event, will only ever return 1 record.
        schema:
          type: string
      - name: party_identifier
        in: query
        description: Find course events by Party Identifier. 
        schema:
          type: string
          example: PA0001
      - name: event_type
        in: query
        description: Find course events by type 
        schema:
          type: string
          example: Class
      - name: date_from
        in: query
        description: Finds course events with this or a later date. Date in ISO 8601 format. YYYY-MM-DD
        schema:
          type: string
          format: date
          example: "2016-01-01"
      - name: date_to
        in: query
        description: Finds course events with this or an earlier date. Date in ISO 8601 format. YYYY-MM-DD
        schema:
          type: string
          format: date
          example: "2016-02-01"
      - name: created_since
        in: query
        description: |
          Finds course events created on or after this date and time. date+time in ISO 8601 format.

          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2017-11-20T15:13:58+10:00"
      - name: updated_since
        in: query
        description: |
          Finds course events updated on or after this date and time. date+time in ISO 8601 format.

          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2017-11-20T15:13:58+10:00"
      responses:
        200:
          description: |
            Successful operation. Event Object(s) will be returned.
            
            Contents in the <event-links> tag will only be returned if object(s) is/are linked to the event.
      
            `Note:` <events-links> are not returned if Events are part of a Course i.e. when <course-number> is not NULL. They are returned for Timetable Events i.e when <timetable-id> has a value.
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: events
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  events:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/EventDetails' 
                        - $ref: '#/components/schemas/EventLinks' 

            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - $ref: '#/components/schemas/EventDetails' 
                  - $ref: '#/components/schemas/EventLinks' 
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/events/{id}:
    get:
      tags:
      - Event
      summary: Retrieve an Event
      description: |
        This API retrieves the details for an Event specified by the Event Identifier 
#        (this can either be event_id or event_external_id)
      operationId: retrieveEvents
      parameters:
      - name: id
        in: path
        description: |
          Identifier of the Event
          
          `id can be substituted with the external_id using "ext_id:external_id"` for the same result.
          
          `external_id` is the id of the event from an external system.
        required: true
        schema:
          type: string
          example: 1

      responses:
        200:
          description: |
            Successful operation. A single Event Object will be returned.
            
            Contents in the <event-links> tag will only be returned if object(s) is/are linked to the event.
      
            `Note:` <events-links> are not returned if Events are part of a Course i.e. when <course-number> is not NULL. They are returned for Timetable Events i.e when <timetable-id> has a value.

          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/EventDetails' 
                  - $ref: '#/components/schemas/EventLinks' 
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/EventDetails' 
                  - $ref: '#/components/schemas/EventLinks' 
        default:
          $ref: '#/components/responses/defaultError'


#######################################
# Event - Course                      #          
#######################################

  /webservice/courses/{course_number}/events:
    post:
      tags:
      - Event - Course
      summary: Create a Course Event
      description: This API creates a Course Event.
      operationId: createCourseEvents
      parameters:
      - name: course_number
        in: path
        description: The course number associated with the Course Event
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the Course Event to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/EventDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/EventDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/EventDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/courses/{course_number}/events/{id}:
    get:
      tags:
      - Event - Course
      summary: Retrieve a Course Event
      description: |
        This API retrieves the details for one Course Event specified by the Event Identifier 
#        (this can either be event_id or event_external_id)
      operationId: retrieveCourseEvents
      parameters:
      - name: course_number
        in: path
        description: The course number associated with the Course Event
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: |
          Identifier of the Course Event
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
           `external_id` is the id of the event from an external system.
        required: true
        schema:
          type: string
          example: 1

      responses:
        200:
          description: Successful operation. A single Course Event Object will be returned.

          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/EventDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Event - Course
      summary: Update a Course Event
      description: This API updates a Course Event.
      operationId: updateCourseEvents
      parameters:
      - name: course_number
        in: path
        description: The course number associated with that Course Event
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: |
          Identifier of the Event. 
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
           `external_id` is the id of the event from an external system.
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the Course Event to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/EventDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/EventDetails'
        required: true
      responses:
        202:
          description: Successful operation - Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/EventDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/courses/{course_number}/events/{id}/delete:
    post:
      tags:
      - Event - Course
      summary: Delete a Course Event
      description: This API deletes a Course Event.
      operationId: deleteCourseEvents
      parameters:
      - name: course_number
        in: path
        description: The course number associated with that Course Event
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: |
          Identifier of the Course Event. 
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
           `external_id` is the id of the event from an external system.         
        required: true
        schema:
          type: string
          example: 1
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Event - Timetable                   #          
#######################################
  /webservice/timetables/{timetable_id}/events:
    post:
      tags:
      - Event - Timetable
      summary: Create an Event
      description: This API creates an Event.
      operationId: createTimtableEvents
      parameters:
      - name: timetable_id
        in: path
        description: The identifier of timetable associated with the Event
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the Event to be created.
        content:
          application/xml: 
            schema:
                allOf:
                  - $ref: '#/components/schemas/EventDetails' 
                  - $ref: '#/components/schemas/EventLinks' 
          application/json: 
            schema:
                allOf:
                  - $ref: '#/components/schemas/EventDetails' 
                  - $ref: '#/components/schemas/EventLinks' 
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/EventDetails' 
                  - $ref: '#/components/schemas/EventLinks' 
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/EventDetails' 
                  - $ref: '#/components/schemas/EventLinks' 
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/timetables/{timetable_id}/events/{id}:
    get:
      tags:
      - Event - Timetable
      summary: Retrieve an Event
      description: |
        This API retrieves the details for one Event specified by the Event Identifier 
#        (this can either be event_id or event_external_id)
      operationId: retrieveTimetableEvents
      parameters:
      - name: timetable_id
        in: path
        description: The identifier of timetable associated with the Event
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: |
          Identifier of the Event
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
           `external_id` is the id of the event from an external system.
        required: true
        schema:
          type: integer

      responses:
        200:
          description: Successful operation. A single Event Object will be returned.

          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/EventDetails' 
                  - $ref: '#/components/schemas/EventLinks' 
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/EventDetails' 
                  - $ref: '#/components/schemas/EventLinks' 
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Event - Timetable
      summary: Update an Event
      description: This API updates an Event.
      operationId: updateTimetableEvents
      parameters:
      - name: timetable_id
        in: path
        description: The identifier of timetable associated with the Event
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: |
          Identifier of the Event. 
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
           `external_id` is the id of the event from an external system.
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the Event to be updated.
        content:
          application/xml: 
            schema:
              allOf:
                - $ref: '#/components/schemas/EventDetails' 
                - $ref: '#/components/schemas/EventLinks' 
          application/json: 
            schema:
              allOf:
                - $ref: '#/components/schemas/EventDetails' 
                - $ref: '#/components/schemas/EventLinks' 
        required: true
      responses:
        202:
          description: Successful operation - Accepted
          content:
            application/xml:
              schema:
                  allOf:
                    - $ref: '#/components/schemas/EventDetails' 
                    - $ref: '#/components/schemas/EventLinks' 
            application/json:
              schema:
                  allOf:
                    - $ref: '#/components/schemas/EventDetails' 
                    - $ref: '#/components/schemas/EventLinks' 
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/timetables/{timetable_id}/events/{id}/delete:
    post:
      tags:
      - Event - Timetable
      summary: Delete an Event
      description: This API deletes an Event.
      operationId: deleteTimetableEvents
      parameters:
      - name: timetable_id
        in: path
        description: The identifier of timetable associated with the Event
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: |
          Identifier of the Event. 
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
           `external_id` is the id of the event from an external system.
        required: true
        schema:
          type: string
          example: 1
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Event Attendance Summary            #          
#######################################
# A course enrolment will attend one or more events and attendance will be marked in them. The calculated percentages of actual attendance, projected attendance and overall attendance (if ELICOS is present) can be known from Event Attendance Summary child resource.

  /webservice/enrolments/{enrolment_identifier}/event_attendance_summary:
    get:
      tags:
      - Event Attendance Summary
      summary: Retrieve Event Summary for an Enrolment 
      description: This operation Retrieves the Event Attendance Summary for an Enrolment.
      operationId: findEventAttendance
      parameters:
      - name: enrolment_identifier
        in: path
        description: Find event attendance summary by enrolment id.
        required: true
        schema:
          type: string
      responses:
        200:
          description: |
           Successful operation
           
           Event Attendance Summary will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: role-clients
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  role-clients:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventAttendanceSummary'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventAttendanceSummary'
        default:
          $ref: '#/components/responses/defaultError'


#######################################
# Event Series                        #          
#######################################
  /webservice/event_series:
    get:
      tags:
      - Event Series
      summary: List Event Series
      description: |
        Lists all Events Series in the system or restricted by query parameters, one or more parameters can be specified and will return all matching record that match ALL parameters (logical AND).
      operationId: listEventSeries
      parameters:
      - name: course_number
        in: query
        description: Find by Course code, returns zero, 1 or multiple records.
        schema:
          type: string
          example: 1
      - name: id
        in: query
        description: Find by Event Series Id, will only ever return 1 record.
        schema:
          type: string
          example: 1
      - name: ext_id
        in: query
        description: Find by external identifier of the Event Series, will only ever return 1 record.
        schema:
          type: string
          example: 1
      - name: type
        in: query
        description: Search for a series with Series Type, will return multiple records  With exact match to table:event_series_type:name 
        schema:
          type: string
          example: Course Series
      - name: name
        in: query
        description: Search for a series with Series Name, can return multiple records if more than one exact match exists.
        schema:
          type: string
          example: Event Series A
      - name: event_id
        in: query
        description: Find by Event Id, will only ever return 1 Event Series (events can’t be associated to more than one series).
        schema:
          type: string
          example: 1
      - name: unit_scope
        in: query
        description: Find series with the events linked to a specified unit code 
        schema:
          type: string
          example: 1
      - name: include[]
        in: query
        description: Details of objects to include in the response
        schema:
          type: array
          items:
            type: string
            enum: [events]
      - name: enabled_includes_only
        in: query
        description: |
          States whether the objects to included must be enabled or not.  
          
          This works correctly when used with other valid ?include[] parameters (it will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false)
        schema:
          type: boolean
          example: true
      - name: starts_after
        in: query
        description: Find records with a start date after this. Date in ISO 8601 format. YYYY-MM-DD
        schema:
          type: string
          format: date
          example: "2016-01-01"
      - name: ends_before
        in: query
        description: Find records with a start date before this. Date in ISO 8601 format, YYYY-MM-DD
        schema:
          type: string
          format: date
          example: "2016-02-01"
      - name: updated_since
        in: query
        description: Find records updated on or after this date. Date in ISO 8601 format, YYYY-MM-DD
        schema:
          type: string
          format: date
          example: "2016-01-01"
      responses:
        200:
          description: |
            Successful operation. Event Series Object(s) will be returned. 
            
            If `include[]=events` flag is set, then additional Events collections composing of each Event associated with the Event Series object(s) will be returned. 
            
            Content in the `<event>` tag will not be returned with the Event Series if `include[]=events` flag in the query parameter is not set.  
          
            `enabled_includes_only` flag will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false.

          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: event-series
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  event-series:
                    type: array
                    items:
                      allOf:
                      - $ref: '#/components/schemas/EventSeriesDetails'
                      - $ref: '#/components/schemas/IncludeEvent'
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - $ref: '#/components/schemas/EventSeriesDetails'
                  - $ref: '#/components/schemas/IncludeEvent'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Event Series
      summary: Create an Event Series
      description: This API creates an Event Series.
      operationId: createEventSeries
      requestBody:
        description: The payload containing the details of the Event Series to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/EventSeriesDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/EventSeriesDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/EventSeriesDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/EventSeriesDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/event_series/{id}:
    get:
      tags:
      - Event Series
      summary: Retrieve an Event Series
      description: This API retrieves the details for one Event Series specified by the ID.
      operationId: retrieveEventSeries
      parameters:
      - name: id
        in: path
        description: |
          Event Series Identifier. 
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
          `external_id` is the id of the event series from an external system.
        required: true
        schema:
          type: string
          example: 1
      - name: include[]
        in: query
        description: Details of objects to include in the response
        schema:
          type: array
          items:
            type: string
            enum: [events]

      responses:
        200:
          description: |
            Successful operation. A single Series Object will be returned. 
            
            If `include[]=events` flag is set, then additional Events collections composing of each Event associated with the Event Series object will be returned. 
          
            Content in the `<event>` tag will not be returned with the Event Series if `include[]=events` flag in the query parameter is not set.
            
            `enabled_includes_only` flag will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false.

          content:
            application/xml:
              schema:
                  allOf:
                  - $ref: '#/components/schemas/EventSeriesDetails'
                  - $ref: '#/components/schemas/IncludeEvent'
            application/json:
              schema:
                  allOf:
                  - $ref: '#/components/schemas/EventSeriesDetails'
                  - $ref: '#/components/schemas/IncludeEvent'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Event Series
      summary: Update an Event Series
      description: This API updates an Event Series.
      operationId: updateEventSeries
      parameters:
      - name: id
        in: path
        description: |
          id of the Event Series to be updated.
          
          `id can be substituted with the external_id in the form of "ext_id:<external_id>"` for the same result.
          
          `external_id` is the id of the event series from an external system.
        required: true
        schema:
          type: integer
          example: 1
      requestBody:
        description: The payload containing the details of the Event Series to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/EventSeriesDetails'
          application/json: 
            schema:
             $ref: '#/components/schemas/EventSeriesDetails'
        required: true
      responses:
        202:
          description: Successful operation - Updated
          content:
            application/xml:
              schema:
               $ref: '#/components/schemas/EventSeriesDetails'
            application/json:
              schema:
               $ref: '#/components/schemas/EventSeriesDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/event_series/{id}/delete:
    post:
      tags:
      - Event Series
      summary: Delete an Event Series
      description: |
        This API deletes an Event Series Associated with a Course.
        
        Deleting an Event Series will unassociate and the Events only delete the Event_series itself.   Any associated Events will need to be separately deleted using the Events API.
      operationId: deleteEventSeries
      parameters:
      - name: id
        in: path
        description: |
          id of the Event Series to be deleted. 
          
          `id can be substituted with the external_id in the form of "ext_id:<external_id>"` for the same result.
          
          `external_id` is the id of the event series from an external system.
        required: true
        schema:
          type: integer
          example: 1
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/event_series/{id}/events:
    post:
      tags:
      - Event Series
      summary: Associate Event(s) to an Event Series.
      description: |
        This API associates events(s) to an Event Series.
        
        If an Event is currently associated with another Event Series the association will be updated with the new Event Series and the old association removed. 
        
        Events can only be associated to a single Event_Series at one time.
      operationId: associateEventSeries
      parameters:
      - name: id
        in: path
        description: |
          Event Series Identifier.  
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
          `external_id` is the id of the event series from an external system.
        required: true
        schema:
          type: integer
          example: 1
      requestBody:
        description: |
          The payload containing the details of the Event(s) to be added to the Event Series.

          `id of the event can be substituted with the external_id of the event using "ext_id:<external_id>"` for the same result. 
          
          id and external_id can be mixed in the same call, i.e. "event_1" might be id and "event_2" in the call might use external_id
          
          `NOTE` - Only id OR external_id should be sent for each event. Sending both is not supported.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/AddEventDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/AddEventDetails'
            example:
              {
                  "event-series": {
                      "events": {
                          "event": [
                              {
                                  "id": "1"
                              },
                              {
                                  "id": "2"
                              }
                          ]
                      }
                  }
              }

        required: true
      responses:
        202:
          description: Successful operation - Updated
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/EventSeriesDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/EventSeriesDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


  /webservice/courses/{course_number}/event_series:
    get:
      tags:
      - Event Series
      summary: List all Event Series Associated to a course
      description: Lists all Events Series associated to a course.
      operationId: listCourseEventSeries
      parameters:
      - name: course_number
        in: path
        required: true
        description: Course code the series is asociated to
        schema:
          type: string
          example: 1
      responses:
        200:
          description: Successful operation. Event Series Object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: event-series
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  event-series:
                    type: array
                    items:
                       $ref: '#/components/schemas/EventSeriesDetails'

            application/json:
              schema:
                type: array
                items:
                   $ref: '#/components/schemas/EventSeriesDetails'
                   
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/timetables/{timetable_id}/event_series:
    get:
      tags:
      - Event Series
      summary: List all Event Series Associated to a timetable
      description: Lists all Events Series associated to a timetable.
      operationId: listTimetableEventSeries
      parameters:
      - name: timetable_id
        in: path
        required: true
        description: identifier of the timetable Course code the series is asociated to
        schema:
          type: string
          example: 1
      responses:
        200:
          description: Successful operation. Event Series Object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: event-series
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  event-series:
                    type: array
                    items:
                       $ref: '#/components/schemas/EventSeriesDetails'

            application/json:
              schema:
                type: array
                items:
                   $ref: '#/components/schemas/EventSeriesDetails'

        default:
          $ref: '#/components/responses/defaultError'


#######################################
# FILE NOTE                           #          
#######################################
# At the moment, only file notes associated with parties are available. The URL must contain the unique party identifier of an existing party record whose file notes are to be retrieved, modified or created.

# A file note can be assigned to either a user or a user group. This is specified by providing a username in the assigned-user field or a name of a user group in the assigned-user-group field. If both values are provided the behaviour is undefined, as a file note can only be assigned to either or.

  /webservice/parties/{party_id}/file_notes:
    get:
      tags:
      - File Note
      summary: List File Notes
      description: This operation lists all File Notes of a Party
      operationId: listFileNote
      parameters:
      - name: party_id
        in: path
        description: Find file notes by party id
        required: true
        schema:
          type: string
          example: ABC123
      - name: created_since
        in: query
        description: Find file notes created since, date in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "2016-06-02"
      - name: updated_since
        in: query
        description: Find file notes updated since, date in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "2016-09-14"
      - name: assigned_user
        in: query
        description: Find by Username
        schema:
          type: string
          example: Abhinesh
      - name: assigned_user_group
        in: query
        description: Find by Name of User Group
        schema:
          type: string
          example: Admins
      responses:
        200:
          description: |
            Successful operation. 
            
            File Note object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: file-notes
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  file-notes:
                    type: array
                    items:
                      $ref: '#/components/schemas/FileNoteDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileNoteDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - File Note
      summary: Create a File Note
      description: This operation creates a File Note
      operationId: createFileNote
      parameters:
      - name: party_id
        in: path
        description: Find file notes by party id
        required: true
        schema:
          type: string
          example: ABC123
      requestBody:
        description: The payload containing the details of the File Note to be created.
        content:
          application/xml: 
              schema:
                $ref: '#/components/schemas/FileNoteDetails'
          application/json:
              schema:
               $ref: '#/components/schemas/FileNoteDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/FileNoteDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/FileNoteDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


  /webservice/parties/{party_id}/file_notes/{id}:
    get:
      tags:
      - File Note
      summary: Find a File Note
      description: This operation finds a File Note
      operationId: RetrieveFileNote
      parameters:
      - name: party_id
        in: path
        description: Find file notes by party id
        required: true
        schema:
          type: string
          example: ABC123
      - name: id
        in: path
        description: Find by file note id
        required: true
        schema:
          type: string
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/FileNoteDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/FileNoteDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - File Note
      summary: Update a File Note
      description: This operation will update a file note
      operationId: updateFileNote
      parameters:
      - name: party_id
        in: path
        description: Find file notes by party id
        required: true
        schema:
          type: string
          example: ABC123
      - name: id
        in: path
        description: Find by file note id
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the file note to be updated.
        content:
          application/xml: 
              schema:
               $ref: '#/components/schemas/FileNoteDetails'
          application/json:
              schema:
                $ref: '#/components/schemas/FileNoteDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/FileNoteDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/FileNoteDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/parties/{party_id}/file_notes/{id}/delete:
    post:
      tags:
      - File Note
      summary: Delete a File Note
      description: This API deletes a File Note
      operationId: deleteFileNote
      parameters:
      - name: party_id
        in: path
        description: Find file notes by party id
        required: true
        schema:
          type: string
          example: ABC123
      - name: id
        in: path
        description: id of the File Note to be deleted. 
        required: true
        schema:
          type: string
          example: 1
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Identification                      #          
#######################################
  /webservice/parties/{party_identifier}/identifications:
    get:
      tags:
      - Identification
      summary: List Party Identifications
      description: This operation lists Party Identifications.
      operationId: listPartyIdentification
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      responses:
        200:
          description: |
            Successful operation. 
            
            Identification object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: identifications
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  identifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/IdentificationDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdentificationDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Identification
      summary: Create a Party Identification
      description: This operation creates a party Identification
      operationId: createPartyIdentification
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      requestBody:
        description: The payload containing the details of the party identification to be created.
        content:
          application/xml: 
              schema:
                   $ref: '#/components/schemas/IdentificationDetails'
          application/json:
              schema:
                   $ref: '#/components/schemas/IdentificationDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/IdentificationDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentificationDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/identifications/{id}:
    get:
      tags:
      - Identification
      summary: Find a Party Identification
      description: This operation retrieves a party identification
      operationId: retrieveIdentification
      parameters:
      - name: id
        in: path
        description: The identification Id
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/IdentificationDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentificationDetails'
        default:
          $ref: '#/components/responses/defaultError'

  /parties/{party_identifier}/identifications/{id}:        
    post:
      tags:
      - Identification
      summary: Update a Party Identification
      description: This operation will update a party identification
      operationId: updateIdentifications
      parameters:
      - name: id
        in: path
        description: The identification Id
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      requestBody:
        description: The payload containing the details of the party identifation to be updated.
        content:
          application/xml: 
              schema:
                   $ref: '#/components/schemas/IdentificationDetails'
          application/json:
              schema:
                   $ref: '#/components/schemas/IdentificationDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/IdentificationDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentificationDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Invitee                            #          
#######################################
#This resource is used for listing and manipulating parties invited to events. Create a record via this resource to associate a party with an event. The party will then be expected to participate in the event and show up on event screens in the user interface.

# Parties can be implicitly invited to events if and only if all of the following conditions hold true: • The event is attached directly to a course, not through a separate timetable. • The party is a student or a trainer of the course. • all-clients or all-staff is true on the event record for students and trainers, respectively.

  /webservice/courses/{course_number}/events/{event_id}/invitees:
    get:
      tags:
      - Invitee
      summary: List Invitees
      description: This operation lists all Invitees to events
      operationId: listInvitee
      parameters:
      - name: course_number
        in: path
        description: Find by course
        required: true
        schema:
          type: string
          example: 1
      - name: event_id
        in: path
        description: Find by event
        required: true
        schema:
          type: string
          example: 1

      responses:
        200:
          description: |
            Successful operation. 
            
            Invitee object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: Invitees
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  Invitees:
                    type: array
                    items:
                      $ref: '#/components/schemas/InviteeDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InviteeDetails'
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/courses/events/invitees:
    post:
      tags:
      - Invitee
      summary: Create an Invitee
      description: This operation creates an Invitee
      operationId: createInvitee
#  
#   parameters:
#      - name: course_number
#        in: path
#        description: Course number
#        required: true
#        schema:
#          type: string
#          example: 1
#      - name: event_id
#        in: path
#        description: Event Identifier
#        required: true
#        schema:
#          type: string
#          example: 1
      requestBody:
        description: The payload containing the details of the Invitee to be created.
        content:
          application/xml: 
              schema:
                $ref: '#/components/schemas/InviteeDetails'
          application/json:
              schema:
               $ref: '#/components/schemas/InviteeDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InviteeDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/InviteeDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/courses/{course_number}/events/{event_id}/invitees/{id}:
    get:
      tags:
      - Invitee
      summary: Find an Invitee
      description: This operation finds an Invitee
      operationId: RetrieveInvitee
      parameters:
      - name: course_number
        in: path
        description: Find by course
        required: true
        schema:
          type: string
          example: 1
      - name: event_id
        in: path
        description: Find by event
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: Find by party identifier
        required: true
        schema:
          type: string
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InviteeDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/InviteeDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Invitee
      summary: Update an Attendee
      description: This operation will update an Invitee
      operationId: updateInvitee
      parameters:
      - name: course_number
        in: path
        description: Find by course
        required: true
        schema:
          type: string
          example: 1
      - name: event_id
        in: path
        description: Find by event
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: Find by party identifier
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the Invitee to be updated.
        content:
          application/xml: 
              schema:
               $ref: '#/components/schemas/InviteeDetails'
          application/json:
              schema:
                $ref: '#/components/schemas/InviteeDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InviteeDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/InviteeDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/courses/{course_number}/events/{event_id}/invitees/{id}/delete:
    post:
      tags:
      - Invitee
      summary: Delete an Invitee
      description: This operation deletes an Invitee
      operationId: deleteInvitee
      parameters:
      - name: course_number
        in: path
        description: Find by course
        required: true
        schema:
          type: string
          example: 1
      - name: event_id
        in: path
        description: Find by event
        required: true
        schema:
          type: string
          example: 1
      - name: id
        in: path
        description: Find by party indentifier
        required: true
        schema:
          type: string
          example: 1
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Invoice                             #          
#######################################
  /webservice/invoices:
    get:
      tags:
      - Invoice
      summary: List Invoices
      description: This operation lists all Invoices, or alternatively can be used to search for all Invoices which match one or more of the parameters provided.
      operationId: listInvoice
      parameters:
      - name: party_identifier
        in: query
        description: Find invoices by party identifier
        schema:
          type: string
          example: PRT123
      - name: created_since
        in: query
        description: Find invoices created since, date+time in ISO 8601 format
        schema:
          type: string
          format: date-time
          example: "2017-11-20"
      - name: updated_since
        in: query
        description: Find invoices updated since, date+time in ISO 8601 format.
        schema:
          type: string
          format: date-time
          example: "2017-11-20"
      - name: created_before
        in: query
        description: Find invoices created before, date+time in ISO 8601 format.
        schema:
          type: string
          format: date-time
          example: "2014-02-21"
      - name: invoice_date
        in: query
        description: Find invoices by invoice date in ISO 8601 format.
        schema:
          type: string
          format: date
          example: "2017-11-20"
      - name: enrolment_identifier
        in: query
        description: Find by enrolment identifier
        schema:
          type: string
          example: ENJOB63375
        required: true
      - name: ledger_code
        in: query
        description: Find invoices by ledger code
        schema:
          type: string
          example: 1916-01
        required: true
      responses:
        200:
          description: |
           Successful operation
           
            Invoice object(s) will be returned. 
  
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: invoices
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  invoices:
                    type: array
                    items:
                      $ref: '#/components/schemas/InvoiceDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceDetails'

        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Invoice
      summary: Create an Invoice
      description: This operation creates an Invoice.
      operationId: createInvoice
      requestBody:
        description: The payload containing the details of the Invoice to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/InvoiceDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/InvoiceDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InvoiceDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      
  /webservice/invoice/{invoice_number}:
#   /webservice/invoices/{invoice_number}:
    get:
      tags:
      - Invoice
      summary: Retrieve an Invoice. 
      description: This operation gets the details for an invoice specified by the Invoice number
      operationId: findInvoice
      parameters:
      - name: invoice_number
        in: path
        description: Invoice number
        required: true
        schema:
          type: string
      responses:
        200:
          description: |
           Successful operation
           
           A single Invoice will be returned. 
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InvoiceDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Invoice
      summary: Update an Invoice
      description: |
        This API updates an invoice.
      operationId: updateInvoice
      parameters:
      - name: invoice_number
        in: path
        description: Invoice number
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the Invoice to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/InvoiceDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/InvoiceDetails'
        required: true
      responses:
        202:
          description: Successful operation - Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InvoiceDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload



#######################################
# Invoice  Templates                  #          
#######################################
  /webservice/invoice_templates:
    get:
      tags:
      - Invoice Template
      summary: List Invoice Templates
      description: This operation lists all Invoices, or alternatively can be used to search for all Invoices which match one or more of the parameters provided.
      operationId: listInvoiceTemplate
      parameters:
      - name: id
        in: query
        description: Find invoice template by id
        schema:
          type: number
          example: 1
      - name: invoice_option_id
        in: query
        description: Find by invoice option id
        schema:
          type: number
          example: 1
      responses:
        200:
          description: |
           Successful operation
           
            Invoice object(s) will be returned. 
  
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: invoice-templates
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  invoices:
                    type: array
                    items:
                      $ref: '#/components/schemas/InvoiceTemplateDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceTemplateDetails'

        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Invoice Template
      summary: Create an Invoice Template
      description: This operation creates an Invoice Template.
      operationId: createInvoiceTemplate
      requestBody:
        description: The payload containing the details of the Invoice to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/InvoiceTemplateDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/InvoiceTemplateDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      
  /webservice/invoice_templates/{id}:
    get:
      tags:
      - Invoice Template
      summary: Retrieve an Invoice Template. 
      description: This operation gets the details for an invoice specified by the Invoice number
      operationId: findInvoiceTemplate
      parameters:
      - name: id
        in: path
        description: Invoice template id
        required: true
        schema:
          type: string
      responses:
        200:
          description: |
           Successful operation
           
           A single Invoice will be returned. 
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Invoice Template
      summary: Update an Invoice Template
      description: This API updates an invoice.
      operationId: updateInvoiceTemplate
      parameters:
      - name: id
        in: path
        description: Invoice template id
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the Invoice to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/InvoiceTemplateDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/InvoiceTemplateDetails'
        required: true
      responses:
        202:
          description: Successful operation - Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Location                            #          
#######################################
  /webservice/location:
    get:
      tags:
      - Location
      summary: List Locations
      description: List all Locations
      operationId: listLocations
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: locations
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  locations:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocationDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDetails'
        default:
          $ref: '#/components/responses/defaultError'
                
    post:
      tags:
      - Location
      summary: Create a Location
      description: This operation will create a Location
      operationId: createLocations
      requestBody:
        description: The payload containing the details of the Location to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/LocationDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/LocationDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/LocationDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/location/{id}:
    get:
      tags:
      - Location
      summary: Retrieve a Location
      description: Retrieve Locations
      operationId: retrieveLocations
      parameters:
      - name: id
        in: path
        description: Location Id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/LocationDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDetails'
        default:
          $ref: '#/components/responses/defaultError'
        
    post:
      tags:
      - Location
      summary: Update a Location
      description: This operation will update a Location in JR Plus
      operationId: updateLocations
      parameters:
      - name: id
        in: path
        description: Location Id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: The payload containing the details of the Location to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/LocationDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/LocationDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/LocationDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Party                               #          
#######################################
  /webservice/parties:
    get:
      tags:
      - Party
      summary: List Parties
      description: This API lists all Parties, or alternatively can be used to search for all Parties which match one or more of the parameters provided.
      operationId: listParty
      parameters:
      - name: birth_date
        in: query
        description: Find by birth date. Date in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "1988-01-01"
      - name: child_parties_of
        in: query
        description: Provide the Party identifier whose linked party to list.
        schema:
          type: string
          example: PRT123
      - name: created_since
        in: query
        description: |
          Find records created since. A date+time in ISO 8601 format.
          
          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2020-08-17T15:25:23+10:00"
      - name: email
        in: query
        description: Find by email address
        schema:
          type: string
          example: JobReady@jobready.com
      - name: employer_party_identifier
        in: query
        description: Provide party identifier of the employer to list its employee.
        schema:
          type: string
          example: EMP123
      - name: first_name
        in: query
        description: Find by first name. Used only for party-type person.
        schema:
          type: string
          example: Chris
      - name: Identification_number
        in: query
        description: Find by Identification number. 
        schema:
          type: string
          example: ABC123456
      - name: Identification_type_id
        in: query
        description: Find by Identification type id. From reference data table identification_type.
        schema:
          type: integer
          example: 102202
      - name: legal_name
        in: query
        description: Find by legal name. Used only for party-type employer.
        schema:
          type: string
          example: JobReady
      - name: login
        in: query
        description: Find by login.
        schema:
          type: string
          example: support
      - name: parent_parties_of
        in: query
        description: Provide the Party identifier whose linked party to list.
        schema:
          type: string
          example: PRT111
      - name: party_type
        in: query
        description: Find by party type, e.g. Person or Employer.
        schema:
          type: string
          example: Person
      - name: phone
        in: query
        description: Find by phone number
        schema:
          type: string
          example: "02133223232"
      - name: surname
        in: query
        description: Find by surname. Used only for party-type person.
        schema:
          type: string
          example: Smith
      - name: trading_name
        in: query
        description: Find by trading name. Used only for party-type employer.
        schema:
          type: string
          example: JobReady
      - name: usi_number
        in: query
        description: Find by the Unique Student Indentifier. Used only for party-type person.
        schema:
          type: string
          example: USI123
      - name: updated_since
        in: query
        description: |
          Find records updated since. A date+time in ISO 8601 format.

          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2016-01-01"
      - name: all_rtos
        in: query
        description: If this query parameter is set, results will not be scoped to the provider associated with your API key
        schema:
          type: string
      responses:
        200:
          description: |
           Successful operation
           
           Party object(s) will be returned. 

          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: parties
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  parties:
                    type: array
                    items:
                      $ref: '#/components/schemas/PartyDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartyDetails'
        default:
          $ref: '#/components/responses/defaultError'

#
# This can be added to calls if necessary
#        422:
#          $ref: '#/components/responses/validationError'


    post:
      tags:
      - Party
      summary: Create a Party
      description: This API creates a Party.
      operationId: createParty
      requestBody:
        description: The payload containing the details of the Party to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/PartyDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/PartyDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      
# party_identifier changed to party_id
  /webservice/parties/{party_id}:
    get:
      tags:
      - Party
      summary: Retrieve a Party. 
      description: This API gets the details for a Party specified by the Party identifier
      operationId: findParty
      parameters:
      - name: party_id
        in: path
        description: Party identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: |
           Successful operation
           
           A single Party object will be returned. 
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Party
      summary: Update a Party
      description: This API updates Party.
      operationId: updateParty
      parameters:
      - name: party_id
        in: path
        description: Party identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the Party to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/PartyDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/PartyDetails'
        required: true
      responses:
        202:
          description: Successful operation - Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Party Authentication                #          
#######################################

  /webservice/party_authentication:
    post:
      tags:
      - Party Authentication
      summary: Verify Party Authentication
      description: Party Authentication
      operationId: PartyAuthentication
      requestBody:
        description: The payload containing the details of the party AVETMISS to be created/Updated.
        content:
          application/xml: 
              schema:
                $ref: '#/components/schemas/PartyAuthentication'
          application/json:
              schema:
                 $ref: '#/components/schemas/PartyAuthentication'
        required: true
      responses:
        200:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyAuthentication'
            application/json:
              schema:
                 $ref: '#/components/schemas/PartyAuthentication'
            
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# PARTY CONTACT                       #          
#######################################
  /webservice/parties/{party_identifier}/party_contacts:
    get:
      tags:
      - Party Contact
      summary: List Party Contacts
      description: This operation lists all Party Contacts
      operationId: listPartyContact
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: ABC123
      responses:
        200:
          description: |
            Successful operation. 
            
            Party Contact object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: party-contacts
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  party-contacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/PartyContact'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartyContact'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Party Contact
      summary: Create a Party Contact
      description: This operation creates a party contact
      operationId: createPartyContact
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: ABC123
      requestBody:
        description: The payload containing the details of the party contact to be created.
        content:
          application/xml: 
              schema:
                $ref: '#/components/schemas/PartyContact'
          application/json:
              schema:
               $ref: '#/components/schemas/PartyContact'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyContact'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyContact'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


  /webservice/parties/{party_identifier}/party_contacts/{id}:
    get:
      tags:
      - Party Contact
      summary: Find a Party Contact
      description: This operation finds a Party Contact
      operationId: RetrievePartyContact
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: ABC123
      - name: id
        in: path
        description: Party contact id
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyContact'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyContact'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Party Contact
      summary: Update a Party Contact
      description: This operation will update a party contact
      operationId: updatePartyContact
      parameters:
      - name: id
        in: path
        description: Party contact Id
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: ABC123
      requestBody:
        description: The payload containing the details of the party address to be updated.
        content:
          application/xml: 
              schema:
               $ref: '#/components/schemas/PartyContact'
          application/json:
              schema:
                $ref: '#/components/schemas/PartyContact'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyContact'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyContact'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/parties/{party_identifier}/party_contacts/{id}/delete:
    post:
      tags:
      - Party Contact
      summary: Delete a Party Contact
      description: This API deletes a Party Contact
      operationId: deletePartyContact
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: ABC123
      - name: id
        in: path
        description: id of the Party Contact to be deleted. 

        required: true
        schema:
          type: integer
          example: 1
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# PARTY CRICOS                        #          
#######################################
# There is a maximum of 1 child of this resource per party. To create or update these records, the details should be included as part of the party xml and sent to the party (i.e. the ‘parent’ of the ‘child’) endpoint.

  /party_cricos:
    get:
      tags:
      - Party CRICOS
      summary: List all Party CRICOS
      description: This operation lists all Party CRICOS
      operationId: listPartyCricos
      responses:
        200:
          description: |
              Successful operation. 
              
              Party CRICOS object will be returned. 
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyCricos'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyCricos'

#          application/xml: 
#              schema:
#                type: object
#                xml:
#                  name: party
#                properties:
#                      avetmiss:
#                         $ref: '#/components/schemas/PartyCricos'
#          application/json:
#              schema:
#                type: object
#                properties:
#                      avetmiss:
#                         $ref: '#/components/schemas/PartyCricos'

        default:
          $ref: '#/components/responses/defaultError'

  /parties/{party_identifier}/party_cricos:
    get:
      tags:
      - Party CRICOS
      summary: Find Party CRICOS
      description: This operation finds a Party CRICOS
      operationId: RetrievePartyCricos
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyCricos'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyCricos'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Party CRICOS
      summary: Create or Update a Party CRICOS
      description: This operation creates/ updates a party CRICOS
      operationId: createPartyCricos
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      requestBody:
        description: The payload containing the details of the party CRICOS to be created/Updated.
        content:
          application/xml: 
              schema:
                type: object
                xml:
                  name: party
                properties:
                      avetmiss:
                         $ref: '#/components/schemas/PartyCricos'
          application/json:
              schema:
                type: object
                properties:
                      avetmiss:
                         $ref: '#/components/schemas/PartyCricos'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyCricos'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyCricos'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# PARTY GROUP MEMBER                  #          
#######################################
# Party group member does not work like other child resources in that an update request does not replace all records with the new ones, and sending an empty party-group-members collection does not remove any party group member records. Instead, matching and updating is done by looking at the value of the group-type property. A party group can be reset by providing an empty name property.

  /webservice/party_group_member:
    get:
      tags:
      - Party Group Member
      summary: List all party group members
      description: This operation lists all party group memebers.
      operationId: listPartyGroupMembers
      responses:
        200:
          description: |
            Successful operation. 
            
            Party group members object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: party-group-members
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  party-group-members:
                    type: array
                    items:
                      $ref: '#/components/schemas/PartyGroupMember'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartyGroupMember'
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/parties/{party_identifier}/party_group_member:
    post:
      tags:
      - Party Group Member
      summary: Create a Party Group member
      description: This operation creates a party group member
      operationId: createPartyGroupMember
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      requestBody:
        description: The payload containing the details of the party group member to be created.
        content:
          application/xml: 
              schema:
                   $ref: '#/components/schemas/PartyGroupMember'
          application/json:
              schema:
                   $ref: '#/components/schemas/PartyGroupMember'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyGroupMember'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyGroupMember'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/parties/{party_identifier}/party_group_member/{id}:
    get:
      tags:
      - Party Group Member
      summary: Find a Party Group Member
      description: This operation retrieves a party group member
      operationId: retrievePartyGroupMember
      parameters:
      - name: id
        in: path
        description: The party group member Id
        required: true
        schema:
          type: integer
          format: int32
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyGroupMember'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyGroupMember'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Party Group Member
      summary: Update a Party Group Member
      description: This operation will update a party group member
      operationId: updatePartyGroupMember
      parameters:
      - name: id
        in: path
        description: The party group member Id
        required: true
        schema:
          type: integer
          format: int32
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
          example: PRT123
      requestBody:
        description: The payload containing the details of the party group member to be updated.
        content:
          application/xml: 
              schema:
               $ref: '#/components/schemas/PartyGroupMember'
          application/json:
              schema:
                $ref: '#/components/schemas/PartyGroupMember'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyGroupMember'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyGroupMember'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# PARTY IMAGE                         #          
#######################################
  /webservice/parties/{party_identifier} .:
    post:
      tags:
      - Party Image
      summary: Add/update a party image
      description: | 
        This operation adds/updates a party image
        
        JRPlus will download the file at the URL and store these in JRPlus S3 (using carrierwave to upload) as the Party image.  This is done asynchronously to the API call, this background job will not bog down create/update API

        `Note` that the Party must already exist before an image can be uploaded to the Party, this must be done in a separate call.  This constraint has been added to simplify implementation.

        Until the job is complete the Party profile image URL returned will be NULL or the existing URL if one is being replaced.
        
      operationId: addPartyImage
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the party image to be added/updated
        content:
          application/xml: 
              schema:
                $ref: '#/components/schemas/PartyImageDetails'
          application/json:
              schema:
               $ref: '#/components/schemas/PartyImageDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                  $ref: '#/components/schemas/PartyImageDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyImageDetails'
        x-batchLog:
          description: |
            Response showing status of batch log before successful completion
            
            `<batch-log-status>` can be "Running/Enqueued" when the batch is log is running  or enqueued OR "Error" when there is an error in processing
            
            `<batch-log-error>` will only be returned if there is an error
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: party
                properties:
                      image:
                        $ref: '#/components/schemas/PartyImageBatchLog'
            application/json:
              schema:
                type: object
                xml:
                  name: party
                properties:
                      image:
                        $ref: '#/components/schemas/PartyImageBatchLog'

      x-codegen-request-body-name: payload


#######################################
# Party VET fee help                  #          
#######################################
# There is a maximum of 1 child of this resource per party. To create or update these records, the details should be included as part of the party xml and sent to the party (i.e. the ‘parent’ of the ‘child’) endpoint.  

  /webservice/party_fee_help:
    get:
      tags:
      - Party VET fee help
      summary: List all Party VET fee help
      description: This operations lists all party VET fee help.
      operationId: listPartyVETFeeHelp
      responses:
        200:
          description: |
            Successful operation
            
            Party VET fee help object will be returned. 

          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: party-vet-fee-helps
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  party-vet-fee-helps:
                    type: array
                    items:
                      $ref: '#/components/schemas/PartyVetFeeHelp'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartyVetFeeHelp'
        default:
          $ref: '#/components/responses/defaultError'

# party_identifier changed to party_identifier.
  /webservice/parties/{party_identifier}.:
    post:
      tags:
      - Party VET fee help
      summary: Create or Update a Party VET fee help
      description: This API creates/ updates a party VET fee help
      operationId: createPartyVetFeeHelp
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the party VET fee help to be created/Updated.
        content:
          application/xml: 
              schema:
                type: object
                xml:
                  name: party
                properties:
                      avetmiss:
                         $ref: '#/components/schemas/PartyVetFeeHelp'
          application/json:
              schema:
                type: object
                properties:
                      avetmiss:
                         $ref: '#/components/schemas/PartyVetFeeHelp'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyVetFeeHelp'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyVetFeeHelp'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Payments                            #          
#######################################
  /webservice/payments:
    get:
      tags:
      - Payments
      summary: List Payments
      description: This operation lists all Payments, or alternatively can be used to search for all Payments which match one or more of the parameters provided.
      operationId: listPayments
      parameters:
      - name: invoice_number
        in: query
        description: Find by invoice number
        schema:
          type: string
          example: INVJOB50521
      - name: created_since
        in: query
        description: Find records created since this date in ISO 8601 format
        schema:
          type: string
          format: date
          example: "2016-01-01"
      - name: updated_since
        in: query
        description: Find records updated since this date in ISO 8601 format
        schema:
          type: string
          format: date
          example: "2016-06-02"
      - name: payment_date
        in: query
        description: Find by payment date
        schema:
          type: string
          format: date
          example: "2016-06-02"
      - name: location
        in: query
        description: Find by location
        schema:
          type: string
          example: Sydney
      responses:
        200:
          description: |
           Successful operation
           
            Payments object(s) will be returned. 
  
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: payments
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/PaymentsDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentsDetails'

        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Payments
      summary: Create a Payment
      description: This operation creates a Payment.
      operationId: createPayment
      requestBody:
        description: The payload containing the details of the payment to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/PaymentsDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/PaymentsDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentsDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# PRIOR QUALIFICATIONS                #          
#######################################
  /webservice/parties/{party_identifier}/prior_qualifications:
    get:
      tags:
      - Prior Qualification
      summary: List Party Prior Qualifications
      description: This operation lists all Party Prior Qualifications
      operationId: listPartyPriorQual
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: |
            Successful operation. 
            
            Prior Qualification object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: prior-qualifications
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  prior-qualifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/PartyPriorQual'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartyPriorQual'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Prior Qualification
      summary: Create/Update a Party Prior Qualification
      description: This operation creates/Updates a party Prior Qualification
      operationId: createPartyPriorQual
      parameters:
      - name: party_identifier
        in: path
        description: Party Identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The payload containing the details of the party prior qualfication to be created.
        content:
          application/xml: 
              schema:
                $ref: '#/components/schemas/PartyPriorQual'
          application/json:
              schema:
               $ref: '#/components/schemas/PartyPriorQual'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/PartyPriorQual'
            application/json:
              schema:
                $ref: '#/components/schemas/PartyPriorQual'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Program (Course Scope)              #          
#######################################
# A program record is a base record for a course. It contains all the fields common to that type of record (e.g. Course number, Unit outcome, etc)

  /webservice/course_scopes:
    get:
      tags:
      - Program
      summary: List Programs
      description: |
        This API lists all Programs (formally course_scopes), or alternatively can be used to search for all Programs which match one or more of the parameters provided.
      operationId: listPrograms
      parameters:
#      - name: academic_period_code
#        in: query
#        description: Find Programs with the specified Academic Period Code
#        schema:
#          type: string
      - name: campaign_id
        in: query
        description: Find Programs with the specified Campaign id
        schema:
          type: string      
      - name: course_code
        in: query
        description: Find by Program code
        schema:
          type: string
      - name: subject_code
        in: query
        description: Finds Programs that use this subject (unit of study)
        schema:
          type: string
      - name: unit_scope
        in: query
        description: Find Programs that use Units with the specified Unit Code
        schema:
          type: string
      - name: include[]
        in: query
        description: Details of objects to include in the response.
        schema:
          type: array
          items:
            type: string
            enum: [academic_period, campaign, subject, enabled_units, unit]
      - name: enabled_includes_only
        in: query
        description: |
          States whether the objects to included must be enabled or not.  
          
          This works correctly when used with other valid ?include[] parameters (it will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false)
        schema:
          type: boolean
          example: true
      - name: enabled
        in: query
        description: Find Programs that are active/inactive
        schema:
          type: boolean
          example: true
      - name: name
        in: query
        description: Find by Program name
        schema:
          type: string
          example: Certificate III in Retail
      - name: internal_name
        in: query
        description: Find by Program internal name
        schema:
          type: string
          example: C3 in Retail
      responses:
        200:
          description: |
            Successful operation. 
            
            Programs object(s) with optional additonal objects included in the request will be returned. 
 
          
            `enabled_includes_only` flag will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false.

  
            If included in the request, minimal data sets for Campaigns, Units and Subjects associated with the program object will be returned.            
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: course-scopes
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  course-scopes:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/ProgramDetails' 
                        - $ref: '#/components/schemas/IncludeProgram' 

            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/ProgramDetails' 
                    - $ref: '#/components/schemas/IncludeProgram' 
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/course_scopes/{course_code}:
    get:
      tags:
      - Program
      summary: Retrieve a Program
      description: |
        This API retrieves the details for one Program (formally course_scope) specified by the Course_Code (Program_code) with optional additional object(s).
      operationId: retrievePrograms
      parameters:
      - name: course_code
        in: path
        description: Find by Program Code
        required: true
        schema:
          type: string
      - name: include[]
        in: query
        description: Details of objects to include in the response
        schema:
          type: array
          items:
            type: string
            enum: [academic_period, campaign, subject, enabled_units, unit]
      - name: enabled_includes_only
        in: query
        description: |
          States whether the objects to included must be enabled or not.  
          
          This works correctly when used with other valid ?include[] parameters (it will return enabled for all the include associations when enabled == true, or it will return all disabled when enabled == false)
        schema:
          type: boolean
          example: true
      responses:
        200:
          description: |
            Successful operation. 

            A single Program object with optional additonal objects included in the request will be returned. 

            If enabled_units is specified, only units that are not disabled are included in the returns.
            
            If both enabled_units and units are specified, enabled_units is ignored.
  
            If included in the request, minimal data sets for Campaigns, Units and Subjects associated with the program object will be returned. 
          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProgramDetails' 
                  - $ref: '#/components/schemas/IncludeProgram' 
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProgramDetails' 
                  - $ref: '#/components/schemas/IncludeProgram' 
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/course_scopes/{course_code}/units:
    get:
      tags:
      - Program
      summary: Retrieve Units associated to a Program
      description: |
        This API get the Units for one Program (formally course_scope) specified by the Course_Code (Program_code).
      operationId: retrieveProgramUnits
      parameters:
      - name: course_code
        in: path
        description: The course code associated with that Program
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: units
                properties:
                  total:
                    type: integer
                    description: Total count of records returned              
                    xml:  
                      attribute: true
                  units:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitDetailsLite'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitDetailsLite'
        default:
          $ref: '#/components/responses/defaultError'


#######################################
# Prospects                           #          
#######################################
  /webservice/prospects:
    get:
      tags:
      - Prospect
      summary: List Prospects
      description: This operation lists all Prospects.
      operationId: listProspect
      parameters:
      - name: party_identifier
        in: query
        description: Find by party
        schema:
          type: string
          example: 1
      - name: sales_lead_id
        in: query
        description: Find by sales lead id
        schema:
          type: string
          example: 1
      responses:
        200:
          description: |
            Successful operation. 
            
            Prospect object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: prospects
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  prospects:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProspectDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProspectDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Prospect
      summary: Create a Prospect
      description: This operation creates a Prospect
      operationId: createProspect
      requestBody:
        description: The payload containing the Prospect details to be created.
        content:
          application/xml: 
              schema:
                 $ref: '#/components/schemas/ProspectDetails'
          application/json:
              schema:
                 $ref: '#/components/schemas/ProspectDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ProspectDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProspectDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/prospects/{id}:
    get:
      tags:
      - Prospect
      summary: Find a Prospect
      description: This operation retrieves a Prospect
      operationId: retrieveProspect
      parameters:
      - name: id
        in: path
        description: ID of the Prospect
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ProspectDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProspectDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Prospect
      summary: Update a Prospect
      description: This operation will update a Prospect details
      operationId: updateProspect
      parameters:
      - name: id
        in: path
        description: ID of the Prospect
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        description: The payload containing the Prospect to be updated.
        content:
          application/xml: 
              schema:
                 $ref: '#/components/schemas/ProspectDetails'
          application/json:
              schema:
                 $ref: '#/components/schemas/ProspectDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ProspectDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProspectDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Quote                               #          
#######################################
  /webservice/quotes:
    get:
      tags:
      - Quote
      summary: List Quotes
      description: This operation lists all quotes, or alternatively can be used to search for all quotes which match one or more of the parameters provided.
      operationId: listQuote
      parameters:
      - name: party_identifier
        in: query
        description: Find by quotes party identifier
        schema:
          type: string
          example: PRT123
      - name: created_since
        in: query
        description: Find quotes created since, date+time in ISO 8601 format
        schema:
          type: string
          format: date-time
          example: "2017-11-20"
      - name: updated_since
        in: query
        description: Find quotes updated since, date+time in ISO 8601 format.
        schema:
          type: string
          format: date-time
          example: "2017-11-20"
      - name: quote_date
        in: query
        description: Find quotes by quote date, in ISO 8601 format.
        schema:
          type: string
          format: Date
          example: "2017-11-20"
      - name: ledger_code
        in: query
        description: Find quotes by ledger code
        schema:
          type: string
          example: 1916-01
        required: true
      responses:
        200:
          description: |
           Successful operation
           
            Quote object(s) will be returned. 
  
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: quotes
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  quotes:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuoteDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuoteDetails'

        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Quote
      summary: Create a Quote
      description: This operation creates a Quote.
      operationId: createQuote
      requestBody:
        description: The payload containing the details of the Quote to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/QuoteDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/QuoteDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/QuoteDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      
  /webservice/quotes/{quote_number}:
    get:
      tags:
      - Quote
      summary: Retrieve a Quote. 
      description: This operation gets the details for a quote specified by the quote number
      operationId: findQuote
      parameters:
      - name: quote_number
        in: path
        description: Quote number
        required: true
        schema:
          type: string
          example: ABC123
      responses:
        200:
          description: |
           Successful operation
           
           A single Quote will be returned. 
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/QuoteDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Quote
      summary: Update a Quote
      description: This API updates a Quote.
      operationId: updateQuote
      parameters:
      - name: quote_number
        in: path
        description: Quote number
        required: true
        schema:
          type: string
          example: ABC123
      requestBody:
        description: The payload containing the details of the Quote to be updated.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/QuoteDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/QuoteDetails'
        required: true
      responses:
        202:
          description: Successful operation - Accepted
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/QuoteDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/quotes/{quote_number}/delete:
    post:
      tags:
      - Quote
      summary: Delete a Quote
      description: This operation deletes a quote
      operationId: deleteQuote
      parameters:
      - name: quote_number
        in: path
        description: Quote number
        required: true
        schema:
          type: string
          example: ABC123
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      

#######################################
# REFERENCE DATA                      #          
#######################################
  /webservice/references:
    get:
      tags:
      - Reference Data
      summary: List Reference Tables
      description: This operation lists all the reference tables
      operationId: listReferenceData
      parameters:
      - name: include[]
        in: query
        description: Details all items to inlude in the response. 
        schema:
          type: array
          items:
            type: string
            enum: [disabled]
      responses:
        200:
          description: |
            Successful operation. 
            
            Reference Data object(s) will be returned. 

            When `?include[]=disabled` is used ALL results for the reference data table will be returned including all items which are disabled.
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: references
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReferenceTables'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferenceTables'
        default:
          $ref: '#/components/responses/defaultError'


  /webservice/references/{table_name}:
    get:
      tags:
      - Reference Data
      summary: Returns Reference Data of that table
      description: This operation returne the reference data of a table
      operationId: FindReferenceData
      parameters:
      - name: table_name
        in: path
        description: The unique ID could be found on “/webservices/references” page as <table-name>
        required: true
        schema:
          type: string
      responses:
        200:
          description:  |
            Successful operation. 
            
            Reference data of a table specified by the table name will be returned. Attributes returned depends on the entries of the table.
            
            `tablename in the response is the {table_name} specified in the API call`. 
# confirm representation of this in the schema section
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: tablenames
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  tablenames:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReferenceTableData'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferenceTableData'

        default:
          $ref: '#/components/responses/defaultError'


#######################################
# Refunds                             #          
#######################################
# A refund can be created against an invoice belonging to an individual or employer resource party.
  /webservice/refunds:
    get:
      tags:
      - Refunds
      summary: List Refunds
      description: This operation lists all refunds, or alternatively can be used to search for all refunds which match one or more of the parameters provided.
      operationId: listRefunds
      parameters:
      - name: invoice_number
        in: query
        description: Find by invoice number
        schema:
          type: string
          example: INVJOB50521
      - name: created_since
        in: query
        description: Find records created since this date in ISO 8601 format
        schema:
          type: string
          format: date
          example: "2016-01-01"
      - name: updated_since
        in: query
        description: Find records updated since this date in ISO 8601 format
        schema:
          type: string
          format: date
          example: "2016-06-02"
      - name: refund_date
        in: query
        description: Find by refund date
        schema:
          type: string
          format: date
          example: "2016-06-02"
      - name: location
        in: query
        description: Find by location
        schema:
          type: string
          example: Sydney
      responses:
        200:
          description: |
           Successful operation
           
           Refund object(s) will be returned. 
  
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: refunds
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  refunds:
                    type: array
                    items:
                      $ref: '#/components/schemas/RefundDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RefundDetails'

        default:
          $ref: '#/components/responses/defaultError'
          
  /webservice/parties/{party_id}/refunds:
    post:
      tags:
      - Refunds
      summary: Create a Refund
      description: This operation creates a refund.
      operationId: createRefund
      parameters:
      - name: party_id
        in: path
        description: Find by Party Id
        required: true
        schema:
          type: string
          example: S12D34
      requestBody:
        description: The payload containing the details of the refund to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/RefundDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/RefundDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/RefundDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/RefundDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Sales Lead                          #          
#######################################
  /webservice/sales_lead:
    get:
      tags:
      - Sales Lead
      summary: List Sale Leads
      description: This operation lists all Sale Leads
      operationId: listSalesLead
      parameters:
      - name: name
        in: query
        description: The name of the sales lead
        schema:
          type: string
          example: Sales one
      responses:
        200:
          description: |
            Successful operation. 
            
            Sales Lead object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: sales-leads
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  sales-leads:
                    type: array
                    items:
                      $ref: '#/components/schemas/SalesLeadDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SalesLeadDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Sales Lead
      summary: Create a Sales Lead
      description: This operation creates a Sales lead
      operationId: createSalesLead
      requestBody:
        description: The payload containing the Sales lead details to be created.
        content:
          application/xml: 
              schema:
                 $ref: '#/components/schemas/SalesLeadDetails'
          application/json:
              schema:
                 $ref: '#/components/schemas/SalesLeadDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesLeadDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/SalesLeadDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/sales_lead/{id}:
    get:
      tags:
      - Sales Lead
      summary: Find a Sales Lead
      description: This operation retrieves a Sales Lead
      operationId: retrieveSalesLead
      parameters:
      - name: id
        in: path
        description: ID of the Sales Lead
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesLeadDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/SalesLeadDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Sales Lead
      summary: Update a Sales Lead
      description: This operation will update a Sales Lead details
      operationId: updateSalesLead
      parameters:
      - name: id
        in: path
        description: ID of the Sales Lead
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        description: The payload containing the Sales Lead to be updated.
        content:
          application/xml: 
              schema:
                 $ref: '#/components/schemas/SalesLeadDetails'
          application/json:
              schema:
                 $ref: '#/components/schemas/SalesLeadDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesLeadDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/SalesLeadDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Subjects                            #          
#######################################
  /webservice/subjects:
    get:
      tags:
      - Subject
      summary: List Subjects
      description: |
        This API lists all Subjects or alternatively can be used to search for all Subjects which match one or more of the parameters provided.
      operationId: listSubjects
      parameters:
      - name: course_code
        in: query
        description: Find by Program code. Search all subjects that belong to this Program
        schema:
          type: string
      - name: course_number
        in: query
        description: Find by Course number. Search all subjects that belong to this Course
        schema:
          type: string
      - name: subject_code
        in: query
        description: Find by Subject Code. Search for a Subject with this excar Subject_Code
        schema:
          type: string
      - name: name
        in: query
        description: Find by subject name
        schema:
          type: string
      - name: unit_scope
        in: query
        description: Search for the subject(s) a specified unit belongs to. Multiple subjects with this particular unit_code may be returned.
        schema:
          type: string
      responses:
        200:
          description: |
            Successful operation. 
            
            Subjects object(s) with associated units will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: subjects
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  subjects:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubjectDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectDetails'
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/subjects/{subject_code}:
    get:
      tags:
      - Subject
      summary: Retrieve a Subject
      description: |
        This API retrieves the details for one Subject specified by the Subject_Code
      operationId: retrieveSubjects
      parameters:
      - name: subject_code
        in: path
        description: Find by Subject Code
        required: true
        schema:
          type: string
          example: SUBJ123
      responses:
        200:
          description: |
            Successful operation. 

            A single Subject object with associated units will be returned. 
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SubjectDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectDetails'
        default:
          $ref: '#/components/responses/defaultError'



#######################################
# TEMPLATE                            #          
#######################################
# Endpoint to list and search System Templates configured within the system.  
  /webservice/templates:
    get:
      tags:
      - Template
      summary: List all System Templates 
      description: This operation lists all System Templates
      operationId: listTemplate
      parameters:
      - name: category
        in: query
        description: Finds Templates by 'Template Record' Category
        schema:
          type: string
          example: 1
      - name: document-category
        in: query
        description: Finds Templates that will be produced with default 'Document' Category value
        schema:
          type: string
          example: 1
      - name: entity
        in: query
        description: Finds Templates with Database Entity Type
        schema:
          type: string
          example: 1
      - name: status
        in: query
        description: Finds Feedback Forms with a Status of Enabled or Disabled
        schema:
          type: string
          example: 1
      - name: type
        in: query
        description: Finds Templates that will be produced with default 'Document' Type value.
        schema:
          type: string
          example: 1
      responses:
        200:
          description: |
            Successful operation. 
            
            Templates object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: templates
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  templates:
                    type: array
                    items:
                      $ref: '#/components/schemas/TemplateDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TemplateDetails'
        default:
          $ref: '#/components/responses/defaultError'


  /webservice/templates/{id}:
    get:
      tags:
      - Template
      summary: Find a System Template
      description: This operation finds a System Template with the specified ID
      operationId: RetrieveTemplate
      parameters:
      - name: id
        in: path
        description: Finds Templates with a specific database ID. 
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/TemplateDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateDetails'
        default:
          $ref: '#/components/responses/defaultError'



#######################################
# Timetable                           #          
#######################################
# Calendar framework to manage ‘Events’. A timetable can exist against either a course or at system level.
  /webservice/timetable:
    get:
      tags:
      - Timetable
      summary: List Timetables
      description: This operation lists timetables details.
      operationId: listTimetable
      parameters:
      - name: name
        in: query
        description: Find by name
        schema:
          type: string
          example: Class1
      - name: created_since
        in: query
        description: |
          Finds records created since, date+time in ISO 8601 format.
          
          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2020-08-17T15:25:23+10:00"
      - name: updated_since
        in: query
        description: |
          Finds records updated since, date+time in ISO 8601 format.
          
          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2016-01-01"
      - name: id
        in: query
        description: Find by Timetable by the internal Id, will only ever return 1 record.
        schema:
          type: string
      - name: ext_id
        in: query
        description: Find by Timetable by the external Id, will only ever return 1 record.
        schema:
          type: string
          
      responses:
        200:
          description: |
            Successful operation. 
            
            Timetable object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: timetables
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  timetables:
                    type: array
                    items:
                      $ref: '#/components/schemas/TimetableDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimetableDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Timetable
      summary: Create a Timetable
      description: This operation creates a Timetable
      operationId: createTimetable
      requestBody:
        description: The payload containing the timetable details to be created.
        content:
          application/xml: 
              schema:
                 $ref: '#/components/schemas/TimetableDetails'
          application/json:
              schema:
                 $ref: '#/components/schemas/TimetableDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/TimetableDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/TimetableDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/timetable/{id}:
    get:
      tags:
      - Timetable
      summary: Find a Timetable
      description: This operation retrieves a Timetable
      operationId: retrieveTimetable
      parameters:
      - name: id
        in: path
        description: |
          Find by Timetable by the internal Id.
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
          `external_id` is the id of the Timetable from an external system.
        required: true
        schema:
          type: string
          example: 1

      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/TimetableDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/TimetableDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Timetable
      summary: Update a Timetable
      description: This operation will update a timetable detail
      operationId: updateTimetable
      parameters:
      - name: id
        in: path
        description: |
          ID of the timetable
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
          `external_id` is the id of the Timetable from an external system.
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        description: The payload containing the timetable to be updated.
        content:
          application/xml: 
              schema:
                 $ref: '#/components/schemas/TimetableDetails'
          application/json:
              schema:
                 $ref: '#/components/schemas/TimetableDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/TimetableDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/TimetableDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


  /webservice/timetable/{id}/delete:
    post:
      tags:
      - Timetable
      summary: Delete a Timetable
      description: This API deletes a Timetable.  Deleting a Timetable will also delete all Event Series and Events that are under it.  Timetable containing event(s) with marked attendance cannot be deleted.
      operationId: deleteTimetable
      parameters:
      - name: id
        in: path
        description: |
          The identifier of timetable to be deleted. 
          
          `id can be substituted with the external_id using "ext_id:<external_id>"` for the same result.
          
           `external_id` is the id of the timetable from an external system.
        required: true
        schema:
          type: string
          example: 1
      responses:
        204:
          description: No Content
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload
      

#######################################
# Trainer                             #          
#######################################
  /webservice/trainers:
    get:
      tags:
      - Trainer
      summary: List Trainers
      description: This operation lists Trainers.
      operationId: listTrainer
      parameters:
      - name: accreditation_number
        in: query
        description: Find records using a unique number used to identify staff menbers.
        schema:
          type: string
          example: 321xyz
      - name: enabled
        in: query
        description: Find Trainers that are active/inactive
        schema:
          type: boolean
          example: true
      - name: id
        in: query
        description: Find staff by id
        schema:
          type: number
          example: 1
      - name: ind_assessor
        in: query
        description: Find staff that are assessors
        schema:
          type: boolean
          example: true
      - name: ind_coordinator
        in: query
        description: Find staff that are coordinators
        schema:
          type: boolean
          example: true
      - name: ind_trainer
        in: query
        description: Find staff that are trainers/academics
        schema:
          type: boolean
          example: true
      - name: party_identifier
        in: query
        description: Find by party id
        schema:
          type: string
          example: ABC123
      - name: staff_status_id
        in: query
        description: Find by staff status id. Id  from Reference data table name staff_status should be specified.
        schema:
          type: string
          example: 1
      - name: updated_since
        in: query
        description: |
          Find records updated on or after this date. Date in ISO 8601 format

          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
          example: "2017-11-20"     

      responses:
        200:
          description: |
            Successful operation. 
            
            Trainer object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: trainers
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  trainers:
                    type: array
                    items:
                      $ref: '#/components/schemas/TrainerDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrainerDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Trainer
      summary: Create a Trainer
      description: This operation creates a Trainer
      operationId: createTrainer
      requestBody:
        description: The payload containing the Trainer details to be created.
        content:
          application/xml: 
              schema:
                 $ref: '#/components/schemas/TrainerDetails'
          application/json:
              schema:
                 $ref: '#/components/schemas/TrainerDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/TrainerDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/TrainerDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload

  /webservice/trainers/{id}:
    get:
      tags:
      - Trainer
      summary: Find a Trainer
      description: This operation retrieves a Trainer
      operationId: retrieveTrainer
      parameters:
      - name: id
        in: path
        description: ID of the Trainer
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/TrainerDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/TrainerDetails'
        default:
          $ref: '#/components/responses/defaultError'

    post:
      tags:
      - Trainer
      summary: Update a Trainer
      description: This operation will update a Trainer detail
      operationId: updateTrainer
      parameters:
      - name: id
        in: path
        description: ID of the Trainer
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        description: The payload containing the Trainer to be updated.
        content:
          application/xml: 
              schema:
                 $ref: '#/components/schemas/TrainerDetails'
          application/json:
              schema:
                 $ref: '#/components/schemas/TrainerDetails'
        required: true
      responses:
        202:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/TrainerDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/TrainerDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Transfer                            #          
#######################################

  /webservice/enrolments/{enrolment_id}/transfers:
    get:
      tags:
      - Transfer
      summary: List Transfers
      description: This operation lists all Transfers
      operationId: listTransfer
      parameters:
      - name: enrolment_id
        in: path
        description: ID of the Enrolment
        required: true
        schema:
          type: string
          example: 1
      responses:
        200:
          description: |
           Successful operation
           
           Transfer object(s) will be returned. 
  
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: transfers
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  transfers:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransferDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransferDetails'
        default:
          $ref: '#/components/responses/defaultError'
          
    post:
      tags:
      - Transfer
      summary: Create a Transfer
      description: This operation creates a transfer.
      operationId: createTransfer
      parameters:
      - name: enrolment_id
        in: path
        description: ID of the enrolment
        required: true
        schema:
          type: string
          example: 1
      requestBody:
        description: The payload containing the details of the Certificate to be created.
        content:
          application/xml: 
            schema:
              $ref: '#/components/schemas/TransferDetails'
          application/json: 
            schema:
              $ref: '#/components/schemas/TransferDetails'
        required: true
      responses:
        201:
          description: Successful operation - Created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/TransferDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDetails'
        default:
          $ref: '#/components/responses/defaultError'
      x-codegen-request-body-name: payload


#######################################
# Units                               #          
#######################################
  /webservice/unit_scopes:
    get:
      tags:
      - Units
      summary: List Units
      description: "Lists all units in the system or restricted by query parameters, one or more parameters can be specified and will return all matching record that match ALL parameters (logical AND) "
      operationId: listUnits
      parameters:
      - name: course_code
        in: query
        description: Search all units that belong to this Program
        schema:
          type: string
      - name: course_number
        in: query
        description: Search all units that belong to this course
        schema:
          type: string
      - name: unit_scope
        in: query
        description: Search for a unit with this exact unit_scope, will return multiple units with the same unit_scope if they exist
        schema:
          type: string
      - name: internal_name
        in: query
        description: Search for the internal name of the unit. Used to distinguish units with the same code.
        schema:
          type: string
      - name: name
        in: query
        description: Search for a unit with this name, will return multiple units with the same name
        schema:
          type: string
      - name: outcome_id
        in: query
        description: |
           Returns all units that utilise unit outcome id table_name: outcome_identifier_avetmiss. 
           
           `NOTE:`This could be a very large number of units and this filter should normally be used in conjunction with other filters. The results will be paginated."
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: unit-scopes
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  unit-scopes:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitDetails'
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/unit_scopes/{unit_scope}:
    get:
      tags:
      - Units
      summary: Retrieve a Unit
      description: Retreive a unit with the specified unit_scope.
      operationId: retrieveUnits
      parameters:
      - name: unit_scope
        in: path
        description: Unit Code
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UnitDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDetails'
        default:
          $ref: '#/components/responses/defaultError'


#######################################
# USER ROLE                           #          
#######################################
# Endpoint to list and search User Roles configured within the system.  
  /webservice/roles:
    get:
      tags:
      - User Role
      summary: List all User Roles 
      description: This operation lists all User Roles
      operationId: listUserRole
      parameters:
      - name: role_user_id
        in: query
        description: Find by the User Role id
        schema:
          type: integer
          format: int32
          example: 1
      - name: role_rto_identifier
        in: query
        description: Find by the role RTO identifier
        schema:
          type: string
          example: 12345
      - name: enabled
        in: query
        description: Find user roles that are active/inactive
        schema:
          type: boolean
          example: true
      - name: trainer
        in: query
        description: Find user roles that are applicable/not applicable to Trainers.
        schema:
          type: boolean
          example: true
      responses:
        200:
          description: |
            Successful operation. 
            
            Roles object(s) will be returned. 
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: user-roles
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  user-roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserRoleDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRoleDetails'
        default:
          $ref: '#/components/responses/defaultError'


  /webservice/roles/{id}:
    get:
      tags:
      - User Role
      summary: Find a User Role
      description: This operation finds a User Role with the specified ID
      operationId: RetrieveUserRole
      parameters:
      - name: id
        in: path
        description: Finds User Role with a specific database ID. 
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserRoleDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoleDetails'
        default:
          $ref: '#/components/responses/defaultError'


#######################################
# Web Content                         #          
#######################################
  /webservice/campaigns:
    get:
      tags:
      - Web Content
      summary: List Campaigns
      description: |
        This API list available campaigns. Normal Pagination applies. 
        
        Only the latest version of a campaign will be returned for this call.
      operationId: listCampaigns
      parameters:
      - name: approved
        in: query
        description: Filters the returned list by the value of approved
        schema:
          type: boolean
      - name: enabled
        in: query
        description: Filters returned list by the value of enabled.
        schema:
          type: boolean
      - name: modified_since
        in: query
        description: |
          Returns list of all campaigns modified since the listed date/time. Full ISO 8601 Date-Time format.
          
          Supports the following formats: <ul>
            <li>YYYY-MM-DDThh:mm:ss +hh:mm  e.g 2020-08-26T22:10:31+00:00 </li>
            <li>YYYY-MM-DDThh:mm:ssZ e.g. 2020-08-26T22:10:31Z  (UTC time) </li>
            <li>YYYY-MM-DDThh:mm:ss  e.g 2020-08-26T22:10:31 (local time)</li>
            <li>YYYY-MM-DD  e.g. 2020-08-31 </li> </ul>

          `Note:`ISO date/times need to be URL encoded 
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: campaigns
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  campaigns:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebContentDetails'
            application/json:
              schema:
                type: array
                items:
                      $ref: '#/components/schemas/WebContentDetails'
        default:
          $ref: '#/components/responses/defaultError'

  /webservice/campaigns/{campaign_id}:
    get:
      tags:
      - Web Content
      summary: Retrieve a Campaign
      description: This API lists the full details for a particular campaign.
      operationId: retrieveCampaigns
      parameters:
      - name: campaign_id
        in: path
        description: Returns the Web content data related to that campaign_id only.
        required: true
        schema:
          type: string
      - name: version
        in: query
        description: |
          Returns the full details of a particular version of a campaign. 
          If not included the latest version will be returned.
        schema:
          type: integer
      - name: include_all_versions
        in: query
        description:  Set to true to include all versions of the specified campaign
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Successful operation
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: campaigns
                properties:
                  total:
                    type: integer
                    description: Total count of records returned
                    xml:  
                      attribute: true
                  campaigns:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebContentDetails'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebContentDetails'

        default:
          $ref: '#/components/responses/defaultError'

components:

######################################
# Security Scheme                   #
######################################
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic

  
  responses:
######################################
# Error responses                    #
######################################
    defaultError:
      description: Unexpected error
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    validationError:
      description: Validation error
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'

  schemas:

#######################################
# Ad Hoc fields                       #          
#######################################
    AdHocfields:
      title: Ad-hoc Fields
      description:  Ad-hoc fields are custom fields that are set up for a specific entity type. Ad-hoc fields are made available via an ad-hoc-fields collection. When creating and updating ad-hoc fields matching is done by looking at the name property. Sending an empty ad-hoc-fields collection will not remove any previously added ad-hoc fields.
      type: object
      xml:
        name: ad-hoc-field
      properties:
        name: 
          type: string
          description: A name of a valid ad-hoc field type
        value:
          type: string
          nullable: true
          description:  The value to assign the field  


#######################################
# Error Schema                        #          
#######################################
    ErrorResponse:
      title: Errors
      description:  Error response for most error conditions.
      required:
      - code
      - message
      type: object
      xml:
        name: error
      properties:
        code:
          type: string
          description: UUID value. This is a reference to the JRPlus internal logs and should be included in any support request with assistance for these errors as it will help to track the root cause of the error quickly. 
          example: "d53c73d6-31f6-4667-9eb4-228807b3bce9"      
        message:
          type: string
          description: Message describing the error.
          example: "Message describing the error"

    ValidationErrorResponse:
      title: Validation Error
      description:  Validation error response when the response code is 422. The error element will contain a validation-errors child element listing one error that was encountered during the validation process.  Each validation-error element contains a resource, index and can display one error at a time.  The resource element contains the name of the resource affected (e.g. ‘party’), the index element contains a zero-indexed number identifying the record if it was submitted as part of a series of records, and the message element contains a message explaining the validation error.
      required:
      - message
      type: object
      xml:
        name: error
      properties:
        message:
          type: string
          description: Message describing the error.
          example: "Validation Failure"
        validation-errors:
          type: array
          items:
            type: object
            properties:
                validation-error:
                  type: object
                  xml:
                    name: validation-error
                  properties:
                    resource:
                      type: string
#                      example: Party
                    index:
                      type: integer
                    message:
                      type: string
#                      example: "Please enter a First Name"



                     
#######################################
# Academic Period                     #          
#######################################  
    AcademicPeriodDetails:
      title: Academic Period
      description: |
        Academic Periods Object.  
        
        The parameters listed as required are only applicable for Create operations. 
        
        For an Update operation, all parameters are optional, if excluded they will not be updated.
      required:
      - name
      - start-date
      - end-date
      type: object
      xml:
        name: academic-period
      properties:
          id:
            type: string
            description: Academic Period internal id.
            readOnly: true
          code:
            type: string
            description: Academic Period code.
          name:
            type: string
            description: Name of the Academic Period.
          start-date:
            type: string
            format: date
            description: Start date of the academic period in ISO 8601 format.
          start-time:
            type: string
            description: The start time of the course in “HH:mm:ss” format. Example "18:30Z", "22:30+04", "1130−0700", or "15:00−03:30" (all the same instant)  
            example: "10:00:00"
          end-date:
            type: string
            format: date
            description: End date of the academic period in ISO 8601 format.
          end-time:
            type: string
            description: The start time of the course in “HH:mm:ss” format. Example "18:30Z", "22:30+04", "1130−0700", or "15:00−03:30" (all the same instant)
            example: "10:00:00"
          days:
            type: object
            properties:
              sunday:
                type: boolean
                description: Indicates if Sunday is an academic period day or not.
              monday:
                type: boolean
                description: Indicates if Monday is an academic periods day or not.
              tuesday:
                type: boolean
                description: Indicates if  Tuesday is an academic period day or not.
              wednesday:
                type: boolean
                description: Indicates if Wednesday is an academic period day or not.
              thursday:
                type: boolean
                description: Indicates if Thursday is an academic period day or not.
              friday:
                type: boolean
                description: Indicates if Friday is an academic period day or not.
              saturday:
                type: boolean
                description: Indicates if Saturday is an academic period day or not.
          duration:
            type: integer
            description: |
              Calculated value of the duration in number of days from start_date to end_date ignoring times.
              Ignored if provided when creating academic period.
            format: int32
          census-date:
            type: string
            format: date
            description: Census date of the academic period in ISO 8601 format.
          year:
            type: string
            description: Four digit year of the academic period.
            example: 2020
          enabled:
            type: boolean
            description: Indicates if the academic period is active or not.  When it is not enabled at a particular object (Program, Course, Unit) it will not be available for enrolment.  
            default: true
          enable-levels:
            type: boolean
            description: This enables a level to be tagged against an academic period at an enrolment level. 
            default: false


#######################################
# Academic Period Lite               #          
#######################################  
    AcademicPeriodDetailsLite:
      title: Academic Period Lite 
      description: Academic Periods Object.  
      required:
      - name
      - start-date
      - end-date
      type: object
      xml:
        name: academic-period
      properties:
          id:
            type: string
            description: Academic Period internal id.
            readOnly: true
          code:
            type: string
            description: Academic Period code.
            readOnly: true
          name:
            type: string
            description: Name of the Academic Period.
            readOnly: true


#######################################
# ADDRESS                             #          
#######################################
    PartyAddress:
      title: Address
      description: Party Address Details
      required:
      - primary
      - street-address1
      - suburb
      - post-code
      - state
      - country
      - location
      type: object
      xml:
        name: address
      properties:
        id:
          type: number
          format: int32
          readOnly: true
          description: Address id. Automatically generated – cannot be assigned
        primary:
          type: boolean
          description: If true, this will be the party’s primary address.
        street-address1:
          type: string
          description:  Building Name and Postal Delivery box is returned, e.g. “UNIT 1 84 ALEXANDER”
        street-address2:
          type: string
          description:  Street Address 2
        unit-type:
          type: string
          readOnly: true
          description: Results from JobReady Plus address verification, e.g. Flat, Unit, Suite. Read Only
        unit-number:
          type: string
          readOnly: true
          description: Results from JobReady Plus address verification. Read Only
        street-number:
          type: string
          readOnly: true
          description: Results from JobReady Plus address verification. Read Only
        street-name:
          type: string
          readOnly: true
          description: Results from JobReady Plus address verification. Read Only
# street-line not originally added to the existing doc
        street-line:
          type: string
          readOnly: true
          description: Results from JobReady Plus address verification. Read Only
        street-suffix:
          type: string
          readOnly: true
          description: Results from JobReady Plus address verification, e.g. West, North Read Only
        street-type:
          type: string
          readOnly: true
          description: Results from JobReady Plus address verification, e.g. RD, ST, CCT Read Only
        suburb:
          type: string
          description: Suburb
        post-code:
          type: string
          description: "If Country is Australia. Reference data table_name: postcode."
        state:
          type: string
          description: "If Country is Australia. Reference data table_name: state."
        country:
          type: string
          description: "Reference data table_name: country."
        location:
          type: string
          description: "Reference data table_name: contact_location."


#######################################
# ATTENDEE                            #          
#######################################
    AttendeeDetails:
      title: Attendee
      description: |
        Attendee Details
        
        This resource is used for listing and manipulating attendance for parties invited to events. It is therefore necessary for the party to be associated with the event via the invitees resource in order for any details entered via this resource to be meaningful.

      required:
      - party-identifier
      type: object
      xml:
        name: attendees
      properties:
        id:
          type: number
          format: int32
          readOnly: true
          description: Automatically generated
        party-identifier:
          type: string
          description: Unique id of an existing party record.
        attended:
          type: boolean
          description:  Specifies whether or not the party attended an event.
        arrived-at:
          type: string
          format: "10:00"
          description:  When a party arrived to an event in “HH:mm” format, e.g “10:00”
        left-at:
          type: string
          format: "14:00"
          description:  When a party left an event in “HH:mm” format, e.g “14:00”
        duration:
          type: string
          nullable: true
          readOnly: true
          description: Automatically calculated from arrived-at and left-at. Blank if those attributes are blank.
        notes:
          type: string
          description: RNotes about the attendance record.
        absence-reason:
          type: string
          example: Sick
          description: The reason for a party’s absence in an event. e.g. “Sick”
          nullable: true


#######################################
# AVETMISS                            #          
#######################################
    AvetmissDetails:
      title: AVETMISS
      description: |
        AVETMISS Details
        
        "There is a maximum of 1 child of this resource per party. To create or update these records, the details should be included as part of the party xml and sent to the party (i.e. the ‘parent’ of the ‘child’) endpoint.
      type: object
      xml:
        name: avetmiss
      properties:
        highest-school-level:
          type: string
          description: "Reference data table_name: highest_school_level."
        year-highest-school-level:
          type: number
          description:  Highest school completed year.
        indigenous-status:
          type: string
          description: "Reference data table_name: indigenous_status."
        main-language:
          type: string
          description: "Reference data table_name: language."
        employment-category:
          type: string
          description: "Reference data table_name: employment_category."
        labour-force-status:
          type: string
          description: "Reference data table_name: employment_category."
        disability-flag:
          type: string
          description: "If “Yes”, disabilities must have elements. Reference data table_name: disability_flag."
        prior-education-flag:
          type: string
          description: "If “Yes”, prior-educations must have elements. Reference data table_name: prior_education_flag."
        at-school-flag:
          type: string
          description: "Reference data table_name: at_school_flag."
        spoken-english-proficiency:
          type: string
          description: "Reference data table_name: spoken_english_proficiency."
        learner-unique-identifier:
          type: string
          description: ..
        school:
          type: string
          description: "Reference data table_name: school_type_identifier."
        client-identifier:
          type: string
          description: Client Identifier is exist.
        town-of-birth:
          type: string
          description: Town/City of Birth.
        country-of-birth:
          type: string
          description: "Reference data table_name: country."
        nationality:
          type: string
          description: "Reference data table_name: country."
        citizenship-status:
          type: string
          description: "Reference data table_name: citizenship_status."
        ethnic-origin:
          type: string
          description: "Reference data table_name: ethnic_origin."
        disabilities:
            type: array
            items:
              type: object
              properties:
                disability:
                  type: object
                  properties:
                    disability-type:
                      type: string
                      description: "Reference data table_name: disability_type."
        prior-educations:
            type: array
            items:
              type: object
              properties:
                prior-education:
                  type: object
                  properties:
                    id:
                      type: number
                      description: auto-assigned.
                    prior-education-type:
                      type: string
                      description: "Reference data table_name: prior_education_type."
                    prior-education-achievement-identifier:
                      type: string
                      description: "Denotes the qualification accreditation type and can be one of these three options:"
                      enum:  [Australian Qualification, Australian Equivalent, International]
                      

####################################### 
# Batch Logs                          #          
#######################################
    BatchLogDetails:
      title: Batch Log
      description: Batch Log Details - the processing status and errors back from JRPlus to resolve upload issues.
      type: object
      xml:
        name: batch-log
      properties:
        id:
          type: integer
          description: id of the Batch.
        status:
          type: string
          description: Batch status
        type:
          type: string
          description: Batch type
        created-at:
          type: string
          format: date-time
          example: "2020-06-11T11:49:39+10:00"
          description: Created at timestamp in ISO 8601 format. Read-Only
        started-at:
          type: string
          format: date-time
          example: "2020-06-11T11:49:39+10:00"
          description: Started at timestamp in ISO 8601 format. Read-Only
        ended-at:
          type: string
          format: date-time
          example: "2020-06-11T11:49:39+10:00"
          description: Ended at timestamp in ISO 8601 format. Read-Only
        batch-log-items:
            type: array
            xml:
              name: batch-log-items
            items:
              type: object
              properties:
                batch-log-item:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: batch log item id.
                    type:
                      type: string
                      description: batch log item type.
                    message:
                      type: string
                      description: message.                   
                    created-at:
                      type: string
                      format: date-time
                      example: "2020-06-11T11:49:39+10:00"
                      description: Created at timestamp in ISO 8601 format. Read-Only
                

#######################################
# Brand                               #          
#######################################
    BrandDetails:
      title: Brand
      description: Brand details.
      type: object
      xml:
        name: brand
      properties:
          id:
            type: integer
            format: int32
            example: "1"
            description: INT- Unique Internal ID of the brand object.
          name:
            type: string
            description: Name of the brand.
            example: "Brand Name"
          description:
            type: string
            description: Discription of the brand.
          enabled:
            type: boolean
            description: Indicates whether brand is enabled or not.
          external-id:
            type: string
            description: External Id of the brand.
          logo-url:
            type: string
            format: uri
            example: "https://subdomain.jobreadyplus.com/logo.png"
            description: URL of the logo image.
          header-colour:
            type: string
            example: "#ffffff"
            description: RGB Hex code for the Header colour.
          layout-colour:
            type: string
            example: "#ffffff"
            description: RGB Hex code for the Layout colour.


#######################################
# Certificate                         #          
#######################################
    CertificateDetails:
      title: Certificate
      description: This resource can be used to access certificate records for a particular enrolment. Normally, when creating a certificate through the user interface the system will also generate a PDF document based on a template. Creating a certificate record through this resource will not generate such a document, just the certificate record. If the certificate indicates that the student has completed his or her qualification or statement of attainment, the qualification issued or statement-issued flag on the enrolment has to be manually updated through the enrolment resource.
      required:
      - enrolment-identifier
      type: object
      xml:
        name: certificate
      properties:
          id:
            type: integer
            description: Auto-assigned Course Id
            format: int32
            readOnly: true
          enrolment-identifier:
            type: string
            description: Enrolment identifier.  
          party-identifier:
            type: string
            description: The party identifier. Read Only.
            readOnly: true
          certificate-number:
            type: string
            description: Has to be provided when creating the record and can be a combination of letters and numbers.
          reprint:
            type: boolean
            description: Whether this record is a reprint of a previously issued certificate.
          issue-date:
            type: string
            format: date
            description: The date when the certificate was issued. ISO8601 format.
          enabled:
            type: boolean
            description: Can be set to false if the certificate was created in error.
            default: true
          note:
            type: string
            description: Additional notes for the certificate.
          certificate-type:
            type: string
            description: The Certificate Type
            nullable: true
            enum:
            - Qualification
            - Statement of Attainment
            - Other
          document-id:
            type: string
            description: Identifier of the document the Certificate is stored as.  When sent as a Body param in a Create or Update will replace the exiting association with a new document.
          document-url:
            type: string
            format: uri
            description: URL of where the certificate is stored and can be downloaded from.  Read Only.
            readOnly: true
          created-on:
            type: string
            format: date-time
            description: When a certificate was created in ISO8601 format, e.g “2015-04-27T10:10:20+10:00”. Read Only
            readOnly: true
          updated-on:
            type: string
            format: date-time
            description: When a certificate was updated in ISO8601 format, e.g “2017-11-27T11:41:17+11:00”. Read Only 
            readOnly: true


#######################################
# Client Agent                        #          
#######################################
    ClientAgentDetails:
      title: Client Agent
      description: "A course enrolment can have one or more agents and the following fields can be used to add the related details. Note: In order to view agents added through API in UI, the ‘Has Agent’ checkbox under Enrolment > Agents tab has to be ticked."
      required:
      - agent-party-identifier
      xml:
        name: client-agent
      type: object
      properties:
          id: 
            type: integer
            description:  auto-assigned.
            readOnly: true
          agent-party-identifer:  
            type: string
            example: PATRA02507
            description: The party ID of the client agent. Can be retrieved from resource Party
#            readOnly: true
          agent-rate:
            type: number
            example: 3.32
            description:  "The agent’s rate. A client agent can only have either agent-rate or commission-rate. Format: 2 decimal precision float."    
          commission-rate:
            type: string
            example: Base Rate
            description:  The name of an Agent’s Commission Rate which can be found under Commission Rate list in Agent Profile


#######################################
# Contact Detail                      #          
#######################################
    ContactDetails:
      title: Contact Detail
      description: Contact detail refers to Phone, Mobile, Fax and Email.
      required:
      - primary
      - value
      - contact-type
      - location
      type: object
      xml:
        name: contact-detail
      properties:
          id:
            type: integer
            description: The party-contact Id
            readOnly: true
          primary:
            type: boolean
            description: If true, this email address or phone number will be the party’s primary.
          value:
            type: string
            description: Phone number or email address. The value must validate according to the format of a phone number or email address, depending on below contact_type.
          contact-type:
            type: string
            description: "Reference data table_name: contact_type."
          location:
            type: string
            description: "Reference data table_name: contact_location."


#######################################
# Course                              #          
#######################################
    CourseDetails:
      title: Course
      description: |
        A course is a way of grouping common enrolments and is one of the most common entities used on the API. This is often the record that is called and published on a provider’s website to facilitate online student enrolment. It is also where the Online Enrolment Portal (OEP) settings are enabled and configured.

        When creating a new course, either one or both of the attributes course-scope-code and course-scope-name need to be present. The elements represent, respectively, the code and name of an existing program in the system.
      type: object
      xml:
        name: course
      required:
      - start-date
      - end-date
      - maximum-enrolments
      - minimum-enrolments
      properties:
          id:
            type: integer
            description: Auto-assigned Course Id
            format: int32
            readOnly: true
          course-number:
            type: string
            description: Course number of the course which is automatically generated if blank
          course-name:
            type: string
            description: The Course’s name.
          rto-identifier:
            type: integer
            description: The identifier of the Provider.
          rto-name:
            type: string
            readOnly: true
            description: The name of the Provider.  Read only.
          tags:
            type: string
            description: A comma separated list of values as used against Course. Can be found under Administration > Lookup > Tags
          web-description:
            type: string
            description: Web description of the course   
          course-scope-code:
            type: string
            description: Could be a training.gov.au qualification code or a custom code. Mandatory if course-scope-name is blank. Can be retrieved from retrieved from resource program.
          course-scope-name:
            type: string
            description: Name of Program. Mandatory if course-scope-code is blank. Can be retrieved from retrieved from resource program
          course-scope-internal-name:
            type: string
            description: Internal Name of Program. Mandatory if course-scope-code is blank. Can be retrieved from retrieved from resource program
          trainer:
            type: string
            description: Trainer party identifier. Can be retrieved from resource trainer.
          other-trainer:
            type: string
            description: Other Trainer party identifier. Can be retrieved from resource trainer.
          assessor:
            type: string
            description: Trainer party identifier. Can be retrieved from retrieved from resource trainer.
          coordinator:
            type: string
            description: Trainer party identifier. Can be retrieved from retrieved from resource trainer
          start-date:
            type: string
            format: date
            description: Start date of the course in ISO 8601 format.
          end-date:
            type: string
            format: date
            description: End date of the course in ISO 8601 format.
          allow-enrolments:
            type: boolean
            default: true
            description: States whether or not enrolments are allowed for the course.
          enrolment-start-date:
            type: string
            format: date
            description: Start date for the course enrolment in ISO 8601 format.
          enrolment-end-date:
            type: string
            format: date
            description: End date for the course enrolment in ISO 8601 format.
          course-type:
            type: string
            description: "The type of course, e.g. Cert 3 Guarantee . Reference data table_name: course_type."
          maximum-enrolments:
            type: integer
            description: Maximum number of enrolments for the course
            format: int32
          minimum-enrolments:
            type: integer
            description: Minimum number of enrolments for the course
            format: int32
          total-enrolments:
            type: integer
            format: int32
            readOnly: true
            description: The total number of enrolments in the course.
          assessment-method:
            type: string
            description: "Assessment method of the course. Reference data table_name: assessment_method."
          avetmiss:
            type: boolean
            description: States whether or not the AVETMISS reporting for the Course is enabled.
          delivery-mode :
            type: string
            description: "Mandatory if avetmiss = true. Reference data table_name: delivery_mode."
          funding-source-national:
            type: string
            description: "Mandatory if avetmiss = true. Reference data table_name: funding_source_national."
          fee-exemption-state:
            type: string
            description: "Denotes the fee exemption state. Reference data table_name: fee_exemption_state."
          vet-in-school:
            type: boolean
            description: States whether or not a course is a Vet in Schools course
          location:
            type: string
            description: "The location where the course will be conducted which can be retrieved from retrieved from resource location."
          state:
            type: string
            description: "The state where the course will be conducted and mandatory if avetmiss = true. Reference data table_name: state."
          element-grade:
            type: boolean
            description: Specifies whether of not element grading for the course has been enabled
          invoice-template:
            type: string
            description: "Refers to the invoice template of the Course. Reference data table_name: invoice_template_type."
          complete:
            type: boolean
            description: Specifies whether or not the Course has been completed
          study-reason:
            type: string
            description: "The reason for studying the course. Reference data table_name: study_reason."         
          course-status:
            type: string
            description: Status of the the Course. It can be found under Menu item Administration > Lookups > References > Course Status
          language:
            type: string
            description: "The language in which the course will be conducted. Reference data table_name: language." 
          unit-of-study:
            type: boolean
            description: Allows Subjects/Units of Study to be enabled on a course   
          course-fee:
            type: number
            example: "0.0"
            description: The Course fee          
          priority:
            type: string
            description: "Denotes the priority type for the Course’s claims and funding. Reference data table_name: priority."
          funding-source-state:
            type: string
            description: "The funding source state for the course. Reference data table_name: funding_source_state."
          study-period:
            type: string
            description: The amount of period for which the course will run
            example: 18 months
          start-time:
            type: string
            description: The start time of the course in “HH:mm” format
            example: "10:00:00"           
          end-time:
            type: string
            description: The start time of the course in “HH:mm” format
            example: "10:00:00"       
          course-information:
            type: string
            description: Information regarding the course          
          contract:
            type: string
            description: Denotes the contract for claims and funding of the Course   
          cost-centre-code:
            type: string
            description: "The code value of the Reference data table_name: cost_centre."  
            nullable: true
          invoice-options:
            type: object
            readOnly: true
            xml:
              name: invoice-options
            properties:
              invoice-options:
                type: array
                readOnly: true
                items:
                  $ref: '#/components/schemas/InvoiceOptions'
          ad-hoc-fields:
            type: object
            xml:
              name: ad-hoc-fields
            properties:
              ad-hoc-fields:
                type: array
                description: Ad-hoc Fileds
                items:
                  $ref: '#/components/schemas/AdHocfields'

    IncludeCourse:
      title: Course Include Options
      type: object
      properties:
          academic-periods:
            type: object
            xml:
              name: academic-periods
            properties:
              academic-periods:
                type: array
                items:
                  $ref: '#/components/schemas/AcademicPeriodDetails'
          subjects:
            type: object
            xml:
              name: subjects
            properties:
              subjects:
                type: array
                description: Optional. Only returned if included in the query request.
                items:
                 $ref: '#/components/schemas/SubjectDetailsLite-Course'
          units:
            type: object
            xml:
              name: units
            properties:
              units:
                type: array
                description: Optional. Only returned if included in the query request.
                items:
                  $ref: '#/components/schemas/UnitDetailsLite-Course'
                  
      description: Response payload from a Get Course query with include options.


#######################################
# Course  Payment Options             #          
#######################################
    CoursePaymentOptionsDetails:
      title: Course Payment Options
      description: Course Payment Options details
      type: object
      xml:
        name: course-payment-option
      properties:
          id:
            type: integer
            description: Auto-assigned Course Id
            format: int32
            readOnly: true
          course-number:
            type: string
            description: Course number of the course which is automatically generated if blank
          course-name:
            type: string
            description: The Course’s name.
            readOnly: true
          date-from:
            type: string
            format: date
            description: Start date of the course in ISO 8601 format.
          date-to:
            type: string
            format: date
            description: End date of the course in ISO 8601 format.
          type:
            type: string
            description: Type of the  Course payment option
          category:
            type: string
            description: "Category of the payment option. Reference data table_name: Ledger_Category."
          default-option:
            type: boolean
            description: States whether or not this is the course default payment option
          additional-payment-gateway-parameters:
            type: string
            description: additional payment gateway parameters
          name:
            type: string
            description: The Course payment option name.
          description:
            type: string
            description: Description of the course ayment option
          available-on-course-application:
            type: boolean
            description: States whether or not the payment option is available on course application.
          available-on-student-portal:
            type: boolean
            description: States whether or not the payment option is available on student portal.
          available-on-oep:
            type: boolean
            description: States whether or not the payment option is available on oep.
          available-on-logged-oep-users:
            type: boolean
            description: States whether or not the payment option is available on logged oep users.
          discount-quantity:
            type: string
            description: Discount Quantity.
          discount-code-enabled:
            type: boolean
            description: States whether or not discount code is enabled for the payment option.
          discount-code-application-form:
            type: boolean
            description: States whether or not discount code application form is available for the payment option.
          scholarships:
            type: boolean
            description: States whether or not scholarships can be applied for the payment option.
          enabled:
            type: boolean
            description: States whether or not the payment option is enabled.
          invoice-templates:
            type: object
#            readOnly: true
            xml:
              name: invoice-templates
            properties:
              invoice-templates:
                type: array
 #               readOnly: true
                items:
                  $ref: '#/components/schemas/InvoiceTemplateDetails'


#######################################
# COURSE APPLICATIONS                 #          
#######################################
    ApplicationDetails:
      title: Course Application
      description: Course Application Details
      type: object
      xml:
        name: course-application
      required:
      - party-id
      - course-number
      - application-status-id
      properties:
          external-id:
            type: string
            description: | 
                External id of the Course Application. 
                Id defined by the user for use in integrating with external systems.
            nullable: true
          application-id:
            type: string
            description: Automatically generated for new records unless explicitly specified.
          party-id:
            type: string
            description:  |
              The party identifier of the Party the Application will be associated with.  
              Can be set on creation, cannot be updated post creation.
          enrolment-id:
            type: string
            description:  |
              The enrolment identifier of the Party the Application will be associated with.  
              Adding an <enrolment-id> either during a create or update call will update the Application object appropriately. 
          course-number:
            type: string
            description: The course number for the application. Can be retrieved from resource Course
          location-id:
            type: string
            nullable: true
            description: The location where the course will be conducted which can be retrieved from resource location.
          study-mode-id:
            type: string
            nullable: true
            description: "The study mode for the application. Reference data table_name: study_mode."
          application-status-id:
            type: string
            default: UNDEFINED
            description: "The current application status. Reference data values: course_application_status"
          assignee-id:
            type: string
            nullable: true
            description:  The party id of the application assignee.
          agent-party-id:
            type: string
            nullable: true
            description:  The party ID of the client agent. Can be retrieved from resource Party.
          employer-party-id:
            type: string
            nullable: true
            description:  The party identifier of the employer party.
          offer-number:
            type: string
            readOnly: true
            description: offer number.  Read only.
          offer-accepted-on:
            type: string
            format: date_time
            readOnly: true
            description: The offer acceptance date in ISO 8601 format. Read Only
          send-email:
            type: boolean
            default: False
            description: States whether to send an email or not as part of the application process.
          archived:
            type: boolean
            default: False
            description: States whether to archive the application or not.
          conditions-on-offer:
            type: boolean
            default: False
            description: States whether the offer is conditional or not.
          offer-condition:
            type: string
            nullable: true
            description: Conditions of offer
          entry-requirements:
            type: array
            items:
              type: object
              properties:
                entry-requirement:
                  type: object
                  properties:
                    id:
                      type: integer
                      readOnly: true
                      description: Reference data id of the requirement id. Read-Only.
                    description:
                      type: string
                      readOnly: true
                      description: Requirement description. Read-Only
                    notes:
                      type: string
                      nullable: true
                      description: Requirement note
                    entry-requirement-met:
                      type: boolean
                      default: False
                      description: States whether the applicant meets course entry requirement or not.
                    updated-by:
                      type: string
                      readOnly: true
                      description: id of the person who made the update last. Read-Only
                    updated-on:
                      type: string
                      format: date_time
                      readOnly: true
                      description: Updated at timestamp in ISO 8601 format. Read-Only
          created-on:
            type: string
            format: date_time
            readOnly: true
            description: Created at timestamp in ISO 8601 format. Read Only
          updated-on:
            type: string
            format: date_time
            readOnly: true
            description: Updated at timestamp in ISO 8601 format. Read-Only
          ad-hoc-fields:
            type: object
            xml:
              name: ad-hoc-fields
            properties:
              ad-hoc-fields:
                type: array
                description: Ad-hoc Fileds
                items:
                  $ref: '#/components/schemas/AdHocfields'

            
    IncludeApplication:
      title: Course Application Include Options
      type: object
      properties:
          documents:
            type: object
            xml:
              name: documents
            properties:
              documents:
                description: Read Only. Only included if the include[] parameter is used.
                type: array
                readOnly: true
                items:
                  $ref: '#/components/schemas/DocumentDetails'
          progress:
            type: object
            xml:
              name: progress
            properties:
              progress:
                type: array
                readOnly: true
                description: Application progress.
                items:
                 $ref: '#/components/schemas/ApplicationProgress'
          interviews:
            type: object
            xml:
              name: interviews
            properties:
              units:
                type: array
                readOnly: true
                description: Interviews.
                items:
                  $ref: '#/components/schemas/ApplicationInterview'
                  
      description: Response payload from a Get Course query with include options.


#######################################
# COURSE APPLICATION INTERVIEW        #          
#######################################
    ApplicationInterview:
      title: Course Application Interview
      description: Course Application Interview Details
      type: object
      readOnly: true
      xml:
        name: interview
      properties:
        event-id:
          type: string
          readOnly: true
          description: event id for the interview. Read-Only
        rating:
          type: string
          readOnly: true
          description: "Interview rating. Reference data table_name: interview_rating. Read-Only"


######################################
# COURSE APPLICATION PROGRESS        #          
######################################
    ApplicationProgress:
      title: Course Application Progress
      description: Course Application Progress Details
      type: object
      readOnly: true
      xml:
        name: progress-items
      properties:
        status:
          type: string
          readOnly: true
          description: Status of the application. Read-Only
        status-date:
          type: string
          format: date_time
          readOnly: true
          description: Application status timestamp in ISO 8601 format. Read-Only
        updated-by:
          type: string
          readOnly: true
          description: id of the person who made the update last. Read-Only
        reason:
          type: string
          readOnly: true
          description: Reason for application update. Read-Only


#######################################
# COURSE APPLICATION STATUS           #          
#######################################
    ApplicationStatusDetails:
      title: Course Application Status
      description: Course Application Status Details
      type: object
      readOnly: true
      xml:
        name: course-application-status
      properties:
        id:
          type: number
          format: int32
          readOnly: true
          description: Status Id
        name:
          type: string
          readOnly: true
          example: Applied
          description: Status name
        colour:
          type: string
          example: "#FFDC00"
          readOnly: true
          description: HEX COLOUR CODE
        kanban-status-id:
          type: string
          readOnly: true
          description: ID from ref data table 
        letter-template-id:
          type: string
          readOnly: true
          description: Internal ID of the letter template 
        duplicate-status:
          type: boolean
          readOnly: true
          description: States whether application status is a duplicate of not
        enabled:
          type: boolean
          readOnly: true
          description: States whether application status is enabled or not
        system-status:
          type: boolean
          readOnly: true
          description: System Status


#######################################
# Credit Note                         #          
#######################################
    CreditNoteDetails:
      title: Credit Note
      description: Credit Note details.
      required:
      - party-identifier
      - delivery-method 
      - status
      type: object
      xml:
        name: credit-note
      properties:
          credit-note-number:
            type: string
            description: Automatically generated for new records unless explicitly specified.
          invoice-number:
            type: string
            description: Automatically generated for new records unless explicitly specified.
          credit-note-date:
            type: string
            format: date
            description: Automatically defaulted to created date for new records unless explicitly specified, in ISO 8601 format. 
          party-identifier:
            type: string
            description: The party identifier of a valid party.
          delivery-method:
            type: string
            description:  "Delivery method options. Reference data table_name: Delivery_Method."
          description:
            type: string
            description:  Short note about the credit note.
          category:
            type: string
            description: "Category of the invoice. Reference data table_name: Ledger_Category."
          payment-due-terms:
            type: number
            example: 30
            description: "Number of days due for the payment, eg: ‘30’"
          status:
            type: string
            description: "Status of the credit note. Reference data table_name: Invoice_Status."           
          created-on:
            type: string
            format: date-time
            description:  Created on timestamp in ISO 8601 format. Read-Only
            readOnly: true
          updated-on:
            type: string
            format: date-time
            description:  Created on timestamp in ISO 8601 format. Read-Only
            readOnly: true
          credit-note-items:
            type: array
            required:
            - ledger-code
            - ledger-account-name
            - amount-ex
            - tax-treatment 
            xml:
              name: credit-note-items
            items:
                type: object
                properties:
                  credit-note-item:
                    type: object
                    properties:
                      quantity:  
                        type: number
                        example: 1
                        description: Defaults to 1 if not specified.
                        default: 1
                      ledger-code:
                        type: string
                        description:  "A valid ledger code. Reference data table_name: Ledger_Code_Lookup."   
                      ledger-account-name:
                        type: string
                        description: "A valid ledger account name. Reference data table_name: Ledger_Code_Lookup." 
                      description:
                        type: string
                        description:  Short description about the line item.  
                      job:
                        type: string
                        description: "A valid job code. Reference data table_name: Job_Account."
                      amount-ex:
                        type: number
                        description:  "AA negative amount being paid in this transaction for the line item. Can be the full or partial amount for the line item. Format: 2 decimal precision float."
                        example: -199.99
                      tax-treatment:
                        type: string
                        description: "A valid tax treatment code. Reference data table_name: Tax_Treatment."
                      tax-amount:
                        type: number
                        example: 1.99
                        description:  "Total tax amount. Format: 2 decimal precision float. Read-Only"
                        readOnly: true
                      sub-total:
                        type: number
                        example: 199.99
                        description:  "Total amount including tax. Format: 2 decimal precision float. Read-Only."
                        readOnly: true
                        

#######################################
# DOCUMENT                           #          
#######################################
    DocumentDetails:
      title: Document
      description: Document Details
      required:
      - document-category
      type: object
      xml:
        name: document
      properties:
        id:
          type: number
          format: int32
          readOnly: true
          description: The unique document id. Read-Only
        name:
          type: string
          description: The document’s name.
        description:
          type: string
          description:  Description of the document
        document-category:
          type: string
          example: Certificate
          description:  "Category of the document, e.g ‘Certificate’. Reference data table_name: document_category."
        document-type:
          type: string
          example: Multimedia
          description:  "The document type, e.g ‘Multimedia’ Reference data table_name: document_type."
        order-by:
          type: number
          example: 4
          description: Custom sort order number for the document that needs to be greater than 0, e.g ‘4’
        online:
          type: boolean
          description: States whether or not the document is available on additional portals
        web-public:
          type: boolean
          default: false
          description: "States whether or not the document is available to everyone without authentication. Default: false"
        filename:
          type: string
          description: File contents for upload as multipart/form-data
        url:
          type: string
          description: URL where document file can be downloaded from
          

#######################################
# Elements                            #          
#######################################
    ElementDetails:
      title: Element dataset
      description: |
        Element details
        
        Components of a unit of competency – often outlined in the training package, but more commonly they are custom and reflect the assessments/assignments involved in a unit.
      type: object
      xml:
        name: element
      properties:
        id:
          type: integer
          description: The id of the enrolment element
          readOnly: true
        code:
          type: string
          description: "A valid element scope code. Can be retrieved from the menu bar: Administration > Curriculum > Element scope"
        score:
          type: number
          example: 72
          description: Denotes the score in that enrolment element
        outcome:
          type: string
          description: "Refers to the enrolment element outcome table_name: outcome_identifier_avetmiss"
        outcome-date:
          type: string
          format: date
          description: Outcome date of the enrolment element in ISO 8601 format. Read Only
          readOnly: true
        start-date:
          type: string
          format: date
          description: Start date of the enrolment element in ISO 8601 format.
        end-date:
          type: string
          format: date
          description: End date of the enrolment element in ISO 8601 format. Mandatory if outcome is a final outcome (e.g. Competent)


#######################################
# EMPLOYEE                            #          
#######################################
    PartyEmployee:
      title: Employee
      description: Party Employee Details
      required:
      - employer-party-identifier
      - enrolment-identifier
      - start-date
      - end-date
      type: object
      xml:
        name: employee
      properties:
        id:
          type: number
          format: int32
          readOnly: true
          description: The unique employee id. auto-assigned.Read-Only
        employer-party-identifier:
          type: string
          description:  "An employer party identifier can be retrieved from resource party."
        enrolment-identifier:
          type: string
          description: Enrolment identifier of the Employee
        party-identifier:
          type: string
          description: Party identifier of the Employee
          readOnly: true
        employee-title:
          type: string
          description:  Title of the employee.
        start-date:
          type: string
          format: date
          description: Start Date of the employee in ISO 8601 format.
        end-date:
          type: string
          format: date
          description: End Date of the employee in ISO 8601 format.
        supervisor-contact-id:
          type: string
          readOnly: true
          description: An Employer contact ID. Read Only
                                                                   

#######################################
# Enrolment                           #          
#######################################
    EnrolmentDetails:
      title: Enrolment
      description: An enrolment is effectively a role against a party. A party can have many enrolments. The enrolment captures attributes specific to the student (e.g. start date, target end date, delivery mode etc).
      required:
      - party-identifier
      - course-number
      - start-date
      - target-end-date
      type: object
      xml:
        name: enrolment
      properties:
          id:
            type: integer
            description: Auto-assigned Course Id
            format: int32
            readOnly: true
          external-id:
            type: string
            description: | 
                External id of the Enrolment. 
                Id defined by the user for use in integrating with external systems.
            nullable: true
          enrolment-identifier:
            type: string
            description: Enrolment identifier.  Automatically generated for new records unless explicitly specified.
          party-identifier:
            type: string
            description: The party identifier which cannot be changed after creation. Can be retrieved from resource Party.
          rto-identifier:
            type: integer
            description: Unique Provider Code. Can be retrieved from Administration > Configuration > Preferences
          rto-name:
            type: string
            description: The name of the Provider.  Read only.
            readOnly: true
          course-number:
            type: string
            description: The course number for the enrolment. Cannot be changed after creation. Can be retrieved from resource Course
          start-date:
            type: string
            format: date
            description: Start date of the enrolment in ISO 8601 format.
          target-end-date:
            type: string
            format: date
            description: Target end date of the enrolment in ISO 8601 format.
          end-date:
            type: string
            format: date
            description: Actual end date of the enrolment in ISO 8601 format.
          study-reason:
            type: string
            description: "The reason for enrolment. Reference data table_name: study_reason"
          study-mode:
            type: string
            description: "The study mode for enrolment. Reference data table_name: study_mode"
          enrolment-status:
            type: string
            description: "The enrolment status which. Reference data table_name: enrolment_status"
          vet-in-school:
            type: boolean
            description: States whether or not a course is a Vet in Schools course
          employment-basis:
            type: string
            description: "The employment basis for the enrolment. Reference data table_name: employment_basis"
          enabled:
            type: boolean
            description: States whether or not the enrolment is enabled
          invoice-option:
            type: string
            description: The invoice options     
          worker-type:
            type: string
            nullable: true
            example: New Worker
            description: The worker type  
          eligibility-exemption-indicator:
            type: boolean
            description: Eligibility exemption indicator flag. When creating an enrolment if the value is not specified it will be set to false.  No change will be made if the value is not specified for an Enrolment update call.
            default: false
          traineeship:
            type: boolean
            description: States whether or not the traineeship is enabled for the enrolment
          tcid:
            type: string
            description:  "Note: TRS ID in the application. Requires traineeship= true"
          aac:
            type: string
            description:  "Reference data table_name: aac. Requires traineeship= true"
          end-reason:
            type: string
            description:  "The reason for the end of enrolment. Reference data table_name: end_reason. Requires traineeship= true"
          training-type:
            type: string
            nullable: true
            example: Apprentice
            description: The training type  
          traineeship-mode:
            type: string
            nullable: true
            example: On The Job
            description: The traineeship mode  
          training-plan:
            type: boolean
            description: "States whether or not training plan is enabled. Requires traineeship= true"
          training-plan-signed-date:
            type: string
            format: date
            description: "Training plan signed date of the enrolment in ISO 8601 format. Requires traineeship= true"          
          initial-skills-assessment-date:
            type: string
            format: date
            description: "Initial skills assessment date of the enrolment in ISO 8601 format. Requires traineeship=true"    
          annual-leave-balance:
            type: number
            example: 25.78
            description:  "Amount of annual leave balance. Format: 2 decimal precision float. Requires traineeship= true"          
          personal-leave-balance:
            type: number
            example: 25.78
            description:  "Amount of personal leave balance. Format: 2 decimal precision float. Requires traineeship= true"  
          pay-rate:
            type: number
            example: 25.78
            description:  "Pay rate of the employee. Format: 2 decimal precision float. Requires traineeship= true" 
          qualification-issued:
            type: boolean
            description: States whether or not the qualification has been issued for the enrolment
          location:
            type: string
            description: The location where the course will be conducted which can be retrieved from retrieved from resource location.   
          course-type:
            type: string
            example: Cert 3 Guarantee 
            description: "The type of course. Reference data table_name: course_type"            
          fee-exemption-state:
            type: string
            description: "Denotes the fee exemption state. Reference data table_name: fee_exemption_state"
          language:
            type: string
            description: "The language in which the enrolment course will be conducted. Reference data table_name: language"
          statement-issued:
            type: boolean
            description:  States whether or not a statement has been issued
          reporting-enabled:
            type: boolean
            description:  Whether to include the enrolment in AVETMISS reports
          priority:
            type: string
            description: "Denotes the priority type for the Enrolment Course’s claims and funding. Reference data table_name: priority"            
          funding-source-state:
            type: string
            description: "The funding source state for the Enrolment course. Reference data table_name: funding_source_state"
          funding-source-national:
            type: string
            description: "Mandatory if reporting-enabled = true. Reference data table_name: funding_source_national"
          delivery-mode:
            type: string
            description: "Mandatory if reporting-enabled = true. Reference data table_name: delivery_mode"
          contract:
            type: string
            description: Denotes the contract for claims and funding of the Course 
          victorian-student-number:
            type: string
            description: Only relevant if the course state is Victoria          
          unknown-victorian-student-number:
            type: boolean
            description:  States whether or not the Victoria Student Number for the enrolment is unknown. Only relevant if the course state is Victoria
          previous-victorian-student-number:
            type: boolean
            description:  States whether or not the enrolment party had any previous victorian education enrolments. Only relevant if the course state is Victoria.
          client-occupation-identifier:
            type: string
            nullable: true
            example: Managers
            description: Only relevant if the course state is Victoria 
          client-industry-employment:
            type: string
            nullable: true
            example: Agriculture, Forestry and Fishing
            description: Only relevant if the course state is Victoria 
          trainer:
            type: string
            description: Trainer party identifier. Can be retrieved from resource trainer.
          other-trainer:
            type: string
            description: Trainer party identifier. Can be retrieved from resource trainer.
          admission-basis:
            type: string
            nullable: true
            example: 01 - Not a commencing student
            description: Only relevant if the course state is Victoria
          applied-vfh:
            type: boolean
            description:  Relates to VET Fee-Help
          details-of-prior-study:
            type: string
            nullable: true
            example: No credit/RPL was offered
            description: Only relevant if the course state is Victoria
          foe-credit-offered:
            type: string
            nullable: true
            example: Mathematical Sciences/101
            description: Only relevant if the course state is Victoria
          level-of-education:
            type: string
            nullable: true
            example: Advanced Diploma/411
            description: Only relevant if the course state is Victoria
          provider-type:
            type: string
            nullable: true
            example: 90 - Not elsewhere categorised
            description: Only relevant if the course state is Victoria
          attendance-mode:
            type: string
            nullable: true
            example: 1 - Internal Mode of Attendance at an on-shore or off-shore campus (includes classroom based)       
            description: Only relevant if the course state is Victoria  
          student-status:
            type: string
            nullable: true
            example: 401 - Deferred all/part of tuition fee through VET FEE-HELP - non State Government subsidised 
            description: Only relevant if the course state is Victoria        
          requested-assistance:
            type: boolean
            description:  Relates to VET Fee-Help. Must be ‘True’ or ‘False’ if provided (not Null)
          form-received:
            type: string
            format: date
            description: The date the assistance form was received in ISO 8601 format. Relates to VET Fee-Help. Only relevant if request-assistance is true
          form-submitted:
            type: string
            format: date
            description: The date the assistance form was submitted in ISO 8601 format. Relates to VET Fee-Help. Only relevant if request-assistance is true
          signature-date:
            type: string
            format: date
            description: The date the assistance form was signed in ISO 8601 format. Relates to VET Fee-Help. Only relevant if request-assistance is true
          vet-opted-in:
            type: boolean
            description:  Whether on not VET has been opted in. Relates to VFH
          vet-opted-in-date:
            type: string
            format: date
            description: VET opt in date in ISO 8601 format. Relates to VFH            
          status-date:
            type: string
            format: date
            description: The status date in ISO 8601 format. Read-Only  
            readOnly: true
          created-on:
            type: string
            format: date-time
            description: Created on timestamp in ISO 8601 format. Read-Only
            readOnly: true
          updated-on:
            type: string
            format: date-time
            description: Updated on timestamp in ISO 8601 format. Read-Only  
            readOnly: true
          units:
            type: object
            xml:
              name: units
            properties:
              units:
                type: array
                description: A course enrolment should have a set of unit enrolments. Unit enrolments are available through the unit child resource. The unit child resource works in a slightly different way compared to other child resources. Updating an existing unit is done by matching the unit scope codes. Sending an empty units collection will not remove any existing associated units. A new enrolment will have any enabled core course units added by default. Additional units can be specified explicitly.
                items:
                  $ref: '#/components/schemas/UnitDetailsLite-Enrolment'            
          subjects:
            type: object
            xml:
              name: subjects
            properties:
              subjects:
                type: array
                description: If subject delivery has been enabled on the course, the subjects of an enrolment are available through the subject child resource. Adding a subject to a course enrolment via the subject child resource will also cause unit enrolments to be for those unit scopes that have an association with the subject scope.
                items:
                 $ref: '#/components/schemas/SubjectDetailsLite-Enrolment'

          elements:
            type: object
            xml:
              name: elements
            properties:
              elements:
                type: array
                description: A course enrolment can have a set of element enrolments. Elements are linked to units in the system and are auto generated on enrolment. Element enrolments are available through the element child resource. Updating an existing element is done by matching the element scope codes. Sending an empty elements collection will not remove any existing associated element.
                items:
                  $ref: '#/components/schemas/ElementDetails'

          invoice-options:
            type: array
            required:
            - name
            xml:
              name: invoice-options
            description: An enrolment may have zero, one or multiple invoice options allocated to it, and these can be managed via the invoice-options child resource. New invoice options can be added and old ones disabled. This child resource supersedes the now deprecated invoice-option property on the enrolment. Do not use both the invoice-option property and the invoice-options child resource as this might cause duplicate invoice options to be created.
            items:
                type: object
                properties:
                  invoice-option:
                    type: object
                    properties:
                      id: 
                        type: integer
                        description:  The id of the enrolment invoice option.
                      name:  
                        type: string
                        description: "A valid invoice option name as defined on the course. This value cannot be changed once the invoice option has been added to the enrolment. If a new enrolment is created, the special value “default” can be used for this parameter. The invoice option will then be the course default, if a default invoice option has been defined. Reference data table_name: invoice_option_type."
                      enabled:
                        type: boolean
                        description: States whether enabled or not  
                      created-on:
                        type: string
                        format: date-time
                        description: Created on timestamp in ISO 8601 format. Read-Only
                      updated-on:
                        type: string
                        format: date-time
                        description: Updated on timestamp in ISO 8601 format. Read-Only  
                      payment-made :
                        type: boolean
                        description: Set to true to make a full payment against an invoice that’s created immediately with this invoice option.  

          client-vet-student-loans:
            type: object
            description: VET Student Loans commenced on 1 January 2017, replacing the VET FEE‑HELP scheme, which ceased on 31 December 2016. An enrolment can opt in for VSL (VET Student Loans) and the following fields could be used to add the related details
            xml:
              name: client-vet-student-loans
            properties:
              vet-student-loans:
                type: boolean
                description: "Denotes whether or not the enrolment has VET Student Loans (VSL) enabled. Set to ‘True’ in order to view the following attributes:"
              admission-basis:
                type: string
                nullable: true
                example: 01 - Not a commencing student 
                description: Admission basis on the enrolment   
              credit-offered:
                type: number
                nullable: true
                example: 9.99
                description:  "Format: 2 decimal precision float"    
              credit-used:
                type: number
                nullable: true
                example: 9.99
                description:  "Format: 2 decimal precision float"    
              details-of-prior-study:
                type: string
                nullable: true
                example: No credit/RPL was offered 
                description: Denotes the details of previous study  
              foe-for-credit-offered:
                type: string
                nullable: true
                example: Mathematical Sciences/101
                description: Denotes the Field of Education for the credit offered in the enrolment. Can be retrieved from Menu Bar > Administration > Lookups > AVETMISS Reference Data > FOE Code   
              level-of-education:
                type: string
                nullable: true
                example: Advanced Diploma/411 
                description: Denotes the level of education of the enrolment 
              provider-type:
                type: string
                nullable: true
                example: 90 - Not elsewhere categorised
                description: The provider type
              attendance-mode:
                type: string
                nullable: true
                example: 1 - Internal Mode of Attendance at an on-shore or off-shore campus (includes classroom based)       
                description: Attendance mode for the enrolment  
              student-status:
                type: string
                nullable: true
                example: 401 - Deferred all/part of tuition fee through VET FEE-HELP - non State Government subsidised 
                description: The student status.        
              requested-for-assistance-form:
                type: boolean
                description:  Set to true if Assistance Form is requested.
              assistance-date-received:
                type: string
                format: date
                description: The date assistance form was received in ISO 8601 format. Only relevant if request-assistance is true.
              assistance-date-submitted:
                type: string
                format: date
                description: The date assistance form was submitted in ISO 8601 format. Only relevant if request-assistance is true.
              assistance-signature-date:
                type: string
                format: date
                description: The date assistance form was signed in ISO 8601 format. Only relevant if request assistance is true.

          client-agents:
            type: object
            xml:
              name: client-agents
            properties:
              client-agents:
                type: array
                description: "A course enrolment can have one or more agents and the following fields can be used to add the related details. Note: In order to view agents added through API in UI, the ‘Has Agent’ checkbox under Enrolment > Agents tab has to be ticked."
                items:
                  $ref: '#/components/schemas/ClientAgentDetails'

          employers:
            type: object
            xml:
              name: employers
            properties:
              employers:
                type: array
                description: Enrolment employers
                items:
                  $ref: '#/components/schemas/EnrolmentEmployerDetails' 

          ad-hoc-fields:
            type: object
            xml:
              name: ad-hoc-fields
            properties:
              ad-hoc-fields:
                type: array
                description: Ad-hoc Fileds
                items:
                  $ref: '#/components/schemas/AdHocfields'


    IncludeEnrolment:
      title: Enrolment Include Options
      type: object
      properties:
          academic-periods:
            type: object
            xml:
              name: academic-periods
            properties:
              academic-periods:
                type: array
                items:
                  $ref: '#/components/schemas/AcademicPeriodDetailsLite'
      description: Response payload from a Get Enrolment query with include options.


#######################################
# Enrolment Employer                  #          
#######################################
    EnrolmentEmployerDetails:
      title: Enrolment Employer
      description: Enrolment Employer details
      required:
      - party-identifier
      xml:
        name: employer
      type: object
      properties:
          id: 
            type: integer
            description:  Automatically generated for employer records associated with an enrolment. Read-Only
            readOnly: true
          party-identifer:  
            type: string
            example: PATRA02507
            description: The Party Identifier of the employer party.
          name:
            type: string
            description:  The Employer’s name. Read-Only    
            readOnly: true


#######################################
# Event                               #          
#######################################
    EventDetails:
      title: Event
      description: Events are records for scheduling and include properties such as dates, times, locations and attendees.
      required:
      - name
      type: object
      xml:
        name: event
      properties:
          id:
            type: integer
            description: Internal DB id of the Event object
          external-id:
            type: string
            description: | 
                External id of the Event. 
                Id defined by the user for use in integrating with external systems
            nullable: true
          course-number:
            type: string
            description: |
              Course number, if the event is attached to a course. Course number can be retrieved from resource course. 
              
              For non-course events: It will be ignored if timetable_id is specified.  At least 1 of course_number and timetable_id must be specified or an error will be returned
          timetable-id:
            type: integer
            description: |
              Timetable ID, if the event is attached to a timetable. Timetable ID can be retrieved from resource timetable.
              
              For non-course events: Will override course_number if both are specified. At least 1 of course_number and timetable_id must be specified or an error will be returned. 
          title:
            type: string
            description: Title of the event.
          event-type:
            type: string
            description: "Type of the event. Reference data table_name: event_type"
          description :
            type: string
            description: event description.
          colour:
            type: string
            example: "#ffffff"
            description: "HEXRGB code of the colour the Event  as displayed in the UI (#FFFFFF). If not specified will be system assigned."
          enabled:
            type: boolean
            default: true
            description: Used to manage whether the event is rescheduled or not. ‘False’ if the event has been rescheduled otherwise ‘True’.
          event-date:
            type: string
            format: date
            description: Scheduled Date of the event, in ISO 8601 format.
          start-time:
            type: string
            example: "13:30:00"
            description: Start Time of the event, in ISO 8601 format.
          end-time:
            type: string
            example: "15:30:00"
            description: End Time of the event, in ISO 8601 format.
          all-day:
            type: boolean
            description: True if the event has been scheduled for whole day, otherwise false.
          location-room:
            type: string
            description: The location room where the event will be conducted which can be retrieved from menu bar Administration > Lookups > Locations.
          unit-id:
            type: integer
            description:  The internal id of the unit_scope, this is the internal database ID for the unit-scope
          unit-code:
            type: string
            description:  The Unit Code of the unit_scope (note this is called “Unit ID” in the Unit_Scope UI, this is the Unit Code)        
          unit:
            type: string
            description:  "A valid unit name of the Program. Can be retrieved from the menu bar: Administration > Curriculum > program < Units Qualified"
          element:
            type: string
            description:  "A valid element of the program. Can be retrieved from the menu bar: Administration > Curriculum > program < elements Qualified"
          all-staff:
            type: boolean
            description: If checked All Staffs will be included in the event.
          all-students:
            type: boolean
            description:  If checked All Students will be included in the event.
          minimum-number-of-attendees:
            type: integer
            format: int32
            description: The minimum number of attendees required for the event.
          maximum-number-of-attendees:
            type: integer
            format: int32
            description: The maximum number of attendees for the event.
          trainer:
            type: string
            description:  Party identifier of the trainer can be retrieved from resource trainer.
          number-of-invitees:
            type: integer
            format: int32
            description: Total number of parties (students, trainers and other parties) invited to this event. Read-Only
          event-repeat-type:
            type: string
            description: The type of repeat to apply.
            enum:
              - Does not repeat
              - Daily
              - Weekday
              - Weekly
              - Fortnightly
              - Monthly
              - Yearly
          repeat-every:
            type: string
            description: 1 to repeat every X, 2 to repeat every second X, etc., where X is day, week, month, etc. as specified by event-repeat-type.
          repeat-end:
            type: string
            format: date
            description:  The last date of the repeated series in ISO 8601 format.
          repeat-days:
            type: string
            description: Comma-separated list of number to indicate days if event-repeat-type is Weekly. 0 = Sunday, 1 = Monday, etc. For instance, the value “2,3,5” means repeat every Tuesday, Wednesday and Friday.
          created-on:
            type: string
            format: date-time
            example: "2020-06-11T11:49:39+10:00"
            description: Created at timestamp in ISO 8601 format. Read-Only
            readOnly: true
          updated-on:
            type: string
            format: date-time
            example: "2020-06-11T11:49:39+10:00"
            description: Updated at timestamp in ISO 8601 format. Read-Only
            readOnly: true
          update:
            type: string
            nullable: true
            description:  Only used when updating an existing event part of a repeated series. 
            enum:
              - Current
              - Following
              - All
              - Event items
                - Event item
                  - course
                  - unit-scope
                  - element-scope


#######################################
# Event Links                         #          
#######################################

    EventLinks:
      title: Event links
      type: object
      description: |
        Optional

        Contents in the <event-links> tag will only be returned if object(s) is/are linked to the event.
  
        `Note:` <events-links> are not returned if Events are part of a Course i.e. when <course-number> is not NULL. They are returned for Timetable Events i.e when <timetable-id> has a value.

      properties:
          event-links:
            type: object
            xml:
              name: event-links
            properties:
              event-link:
                type: array
                items:
                  type: object
                  xml:
                    name: event-link
                  properties:
                    id:  
                      type: integer
                      format: int32
                      description: Link id
                      readOnly: true
                    object-type:
                      type: string
                      description: |
                        Object type.
                        
                        The following table indicate the <OBJECT_TYPE> tag and which attribute is returned as the OBJECT_IDENTIFIER
                        
                          | Object Type     | Object Identifier   |
                          | -----------     | ------------------  |
                          | course          | course_number       |
                          | academic-period | academic_period_id|
                          | group           | group_id            |
                          | unit_scope      | unit_id             |
                          | subject         | subject_code        |
                          | element_scope   | element_scope_code  |
            
                    object-id:
                      type: string
                      description: Object identifier


#######################################
# Event Attendance Summary            #          
#######################################
    EventAttendanceSummary:
      title: Event Summary Attendance
      description: |
        A course enrolment will attend one or more events and attendance will be marked in them. The calculated percentages of actual attendance, projected attendance and overall attendance (if ELICOS is present) can be known from Event Attendance Summary child resource. 
      type: object
      xml:
        name: role-client
      properties:
          enrolment-identifier:
            type: string
            readOnly: true
            description: A valid enrolment id. Read Only
          total-scheduled-hours:
            type: number
            readOnly: true
            description: Scheduled hours for the enrolment. Read Only
          attended-hours:
            type: number
            readOnly: true
            description: Attended hours for the enrolment. Read Only
          actual-attendance:
            type: number
            readOnly: true
            description: Actual attendance of the enrolment. Read Only
          projected-attendance:
            type: number
            readOnly: true
            description: Projected attendance of the enrolment. Read Only
          overall-attendance:
            type: number
            readOnly: true
            description: Overall attendance of the enrolment. Read Only


#######################################
# Event Series                        #          
#######################################
    EventSeriesDetails:
      title: Event Series
      description: |
        Event Series Details.
        Name is required only when creating an Event Series
      required:
      - name
      type: object
      xml:
        name: event-series
      properties:
          id:
            type: integer
            description: Internal DB id of the Series object
          external-id:
            type: string
            nullable: true
            description: |
              External id of the Series object

              A unique identifier from an external system which this object can be referenced by.  If an Update or Create call is made with a duplicate external-id an error will be returned and no Create or Update performed.
              
              Sending <external-id></external-id> on an Update will set the value to NULL  (Note it should be excluded from a create call if not being set). 
          course-number:
            type: string
            description: |
              Course that this Event Series is attached to. 
              
              It will be ignored if timetable_id is specified.  At least 1 of course_number and timetable_id must be specified or an error will be returned
          unit:
            type: string
            description: Unit Code the event series is linked to.
            readOnly: true
          timetable-id:
            type: integer
            description: |
              id of the timetable associated with the event series.
              
              `id can be substituted with the external_id using "ext_id:<external_id>"` `external_id` is the id of the Timetable from an external system.
              
              Set this to associate the Event Series to a timetable. 
              
              Will override course_number if both are specified. At least 1 of course_number and timetable_id must be specified or an error will be returned 
          name:
            type: string
            description: Name of the Event Series. Visible to the user in the UI and searchable string.
          series-type:
            type: string
            description: name parameter from the ref data refering to the type of series (Course Series | Timetable Series). table:event_series_type:name 
          description :
            type: string
            description: event series description.
          enrolment-start-date:
            type: string
            format: date
            description: students who wish to add themselves to this event series via the student portal must have an enrolment start date AFTER this date. ISO 8601 Date Format.
          census-date:
            type: string
            format: date
            description: |
              students who wish to add themselves to this event series via the student portal must have an enrolment start date BEFORE this date. ISO 8601 Date Format.
              
              Series will not appear in the student portal for self-enrollment if the student's enrollment is before this date.
          enabled:
            type: boolean
            default: true
            description: States if this event series enabled, Defaults to True when creating a new Event Series.
          publish-to-portals:
            type: boolean
            description: |
              States if Event Series is visible in the student portal

              Defaults to false if not specified when creating a new Event Series. Ignore if not specified when updating an Event Series.
          publish-to-teachers:
            type: boolean
            description: |
              States if Event Series is visible to teachers.
              
              Defaults to false if not specified.
          number-of-events:
            type: integer
            format: int32
            description: Number of Events in the series. Read Only.
            readOnly: true
          series-start-date:
            type: string
            format: date
            description: Event Series start date. Determined by member events. ISO 8601 date Format. Read Only.
            readOnly: true
          series-end-date:
            type: string
            format: date
            description: Event Series end date. Determined by member events. ISO 8601 date Format. Read Only.
            readOnly: true
          created-on:
            type: string
            format: date-time
            example: "2017-11-20T15:13:58+10:00"
            description: Date Event Series was created. ISO 8601 date Format. Read Only.
            readOnly: true
          updated-on:
            type: string
            format: date-time
            example: "2017-11-20T15:13:58+10:00"
            description: Date Event Series was last updated. ISO 8601 date Format. Read Only.
            readOnly: true
          colour:
            type: string
            example: "#ffffff"
            description: "HEXRGB code of the colour the Event Series is displayed in the UI (#FFFFFF). If not specified will be system assigned."

    IncludeEvent:
      title: Event Series Include Options
      type: object
      properties:
          academic-periods:
            type: object
            xml:
              name: events
            properties:
              academic-periods:
                type: array
                items:
                  $ref: '#/components/schemas/EventDetails'


    AddEventDetails:
      title: Associate an Event to Event Series
      description: |
        Payload for associating an event to event series
        
        `NOTE` - Only id OR external_id should be sent for each event. Sending both is not supported.
      required:
        - id
      type: object
      xml:
        name: event-series
      properties:
        events:
          type: array
          xml:
            name: events
          items:
            type: object
            properties:
              event:
                type: object
                properties:
                  id:
                    type: integer
                    description: |
                      id of the event to link.
                      
                      id can be substituted with “ext_id:<external_id>”for the same result
                      
                      id and external_id can be mixed in the same call, i.e. <event> 1 might be id and <event> 2 in the call might use external_id
                    example: 1

#######################################
# FILE NOTE                           #          
#######################################
    FileNoteDetails:
      title: File Note
      description: |
          At the moment, only file notes associated with parties are available. The URL must contain the unique party identifier of an existing party record whose file notes are to be retrieved, modified or created.

          A file note can be assigned to either a user or a user group. This is specified by providing a username in the assigned-user field or a name of a user group in the assigned-user-group field. If both values are provided the behaviour is undefined, as a file note can only be assigned to either or.
      required:
      - name
      - category
      - priority
      type: object
      xml:
        name: file-note
      properties:
        id:
          type: number
          format: int32
          readOnly: true
          description: Automatically generated - cannot be assigned
        name:
          type: string
          description:  The file note’s name
        description:
          type: string
          description:  FThe file note’s description
        party-identifier:
          type: string
          description: The party identifier of a valid party **Read Only
          readOnly: true
        category:
          type: string
          description: "Category of the file note. Can be found under Administration > Templates > Entity > Party > Notes > Categories"
        status:
          type: string
          description: The file note status.
          nullable: true
          enum:
          - Open
          - Closed
          - Cancelled
        priority:
          type: string
          description: TThe file note’s priority level
          enum:
          - Low
          - Normal
          - High
        followup-date:
          type: string
          description: The followup date in ISO 8601 format. Read-Only
          format: date
          readOnly: true
        specific-time:
          type: boolean
          description: Enables start-time and end-time.     
        start-time:
          type: string
          description: The start time of the followup in “HH:mm” format, e.g “10:00”. Mandatory if specific-time is enabled
          example: "10:00"
        end-time:
          type: string
          description: The end time of the followup in “HH:mm” format, e.g “10:00”. Mandatory if specific-time is enabled
          example: "10:00"
        public:
          type: boolean
          description: States whether or not the file note is public.  
        private:
          type: boolean
          description: EStates whether or not the file note is private.  
        assigned-user:
          type: string
          description: Username of the user to whom the file note is assigned. Can be found under Administration > Security > User
        assigned-user-group:
          type: string
          description: Name of the group to which the file note is assigned. Can be found under Administration > Security > User Groups
        assigned-date:
          type: string
          description: The assigned date in ISO 8601 format. Read-Only
          format: date-time
          readOnly: true          
        closed-date:
          type: string
          description: The close date in ISO 8601 format. Read-Only
          format: date-time
          readOnly: true   
        created-on:
          type: string
          description: Created on timestamp in ISO 8601 format, e.g. “2017-11-20T15:13:58+10:00” Read-Only
          format: date-time
          readOnly: true          
        updated-on:
          type: string
          description: Updated on timestamp in ISO 8601 format, e.g. “2017-11-21T12:11:51+10:00” Read-Only
          format: date-time
          readOnly: true 


#######################################
# Identification                      #          
#######################################
    IdentificationDetails:
      title: Identification
      description: Party Identification details.
      required:
      - identification-type-id
      - identification-number
      type: object
      xml:
        name: identification
      properties:
          id:
            type: integer
            readOnly: true
            description: The ID of the identification.  Automatically generated – cannot be assigned.
          identification-type-id:
            type: integer
            example: 10200
            description: "The identification type id. Reference data table_name: identification_type."
          identification-type:
            type: string
            example: Passport
            description: "The identification type, e.g. Passport. Reference data table_name: identification_type."
            readOnly: true
          identification-number:
            type: string
            example: A88801990B
            description: The identification number.
          identification-start-date:
            type: string
            format: date
            nullable: true
            description: The identification start date in ISO 8601 format.           
          identification-expiry-date:
            type: string
            format: date
            nullable: true
            description: The identification expiry date in ISO 8601 format.         


#######################################
# INVITEE                            #          
#######################################
    InviteeDetails:
      title: Invitee
      description: |
        Invitee Details
        
        This resource is used for listing and manipulating parties invited to events. Create a record via this resource to associate a party with an event. The party will then be expected to participate in the event and show up on event screens in the user interface.

        Parties can be implicitly invited to events if and only if all of the following conditions hold true: • The event is attached directly to a course, not through a separate timetable. • The party is a student or a trainer of the course. • all-clients or all-staff is true on the event record for students and trainers, respectively.

      required:
      - party-identifier
      type: object
      xml:
        name: invitees
      properties:
        id:
          type: number
          format: int32
          readOnly: true
          description: Automatically generated – cannot be assigned
        party-identifier:
          type: string
          description: Unique id of an existing party record.
        exclusion:
          type: string
          description:  "Populating this attribute is only necessary if the party has been implicitly invited. If true, the party is excluded from the event. e.g: false"

#######################################
# Invoice                             #          
#######################################
    InvoiceDetails:
      title: Invoice
      description: Invoice details.
      required:
      - invoice-date
      - party-identifier
      - delivery-method 
      - status
      type: object
      xml:
        name: invoice
      properties:
          rto-identifier:
            type: integer
            description: Unique Provider Code. Can be retrieved from Administration > Configuration > Preferences
          invoice-number:
            type: string
            description: Automatically generated for new records unless explicitly specified.
          invoice-date:
            type: string
            format: date
            description: Automatically defaulted to created date for new records unless explicitly specified, in ISO 8601 format. 
          internal-reference:
            type: string
            description: Used to set an invoice ID from an integrated finance system.
          purchase-order-id:
            type: string
            description: Used to track a related purchase order ID for the invoice.
          party-identifier:
            type: string
            description: The party identifier of a valid party.
          enrolment-identifier:
            type: string
            description: The enrolment identifier for the invoice if the invoice is related to an enrolment. Read-Only.
            readOnly: true
          rto-name:
            type: string
            description:  The name of the Provider. Read-Only
            readOnly: true
          delivery-method:
            type: string
            description:  "Delivery method options. Reference data table_name: Delivery_Method."
          description:
            type: string
            description:  Short note about the invoice.
          category:
            type: string
            description: "Category of the invoice. Reference data table_name: Ledger_Category."
          payment-term-days:
            type: number
            example: 30
            description: "Number of days to be paid, eg: ‘30’."
          status:
            type: string
            description: "Status of the invoice. Reference data table_name: Invoice_Status."
          created-on:
            type: string
            format: date-time
            description:  Created on timestamp in ISO 8601 format. Read-Only
            readOnly: true
          updated-on:
            type: string
            format: date-time
            description:  Created on timestamp in ISO 8601 format. Read-Only
            readOnly: true
          invoice-items:
            type: array
            required:
            - quantity
            - ledger-code
            - amount
            xml:
              name: invoice-items
            items:
                type: object
                properties:
                  invoice-item:
                    type: object
                    properties:
                      id: 
                        type: number
                        description:   Automatically generated – cannot be assigned.
                        readOnly: true
                      quantity:  
                        type: number
                        example: 1
                        description: Defaults to 1 if not specified.
                        default: 1
                      ledger-code:
                        type: string
                        description:  "A valid ledger code. Reference data table_name: Ledger_Code_Lookup."   
                      description:
                        type: string
                        description:  Short description about the line item.  
                      job-account:
                        type: string
                        description: "A valid job code. Reference data table_name: Job_Account."
                      amount:
                        type: number
                        description:  "An amount being paid in this transaction for the line item. Can be the full or partial amount for the line item. Format: 2 decimal precision float."
                        example: 199.99
                      tax-treatment:
                        type: string
                        description: "A valid tax treatment code. Reference data table_name: Tax_Treatment."
                      tax-amount:
                        type: number
                        example: 1.99
                        description:  "Total tax amount. Format: 2 decimal precision float. Read-Only"
                        readOnly: true
                      sub-total:
                        type: number
                        example: 199.99
                        description:  "Total amount including tax. Format: 2 decimal precision float. Read-Only."
                        readOnly: true


#######################################
# Invoice Options                     #          
#######################################
# The Invoice Option (aka Payment Options) child resource is created against the Course resource via the user interface. Invoice Options are used to invoice fees and services to Parties or Debtors, e.g. students or employers. The Invoice Option child resource is only available as a read-only request (GET) via the JobReady Plus API.
    InvoiceOptions:
      title: Invoice Options
      type: object
      readOnly: true
      xml:
        name: invoice-option
      properties:
        date-from:
          type: string
          description: Date from in ISO 8601 format. Read Only.
          readOnly: true          
          format: date
        date-to:
          type: string
          description: Date from in ISO 8601 format. Read Only.
          readOnly: true  
          format: date
        option-type:
          type: string
          description: "The invoice option type. Reference data table_name: invoice_option_type."
          readOnly: true
        online-enrolments-enabled:
          type: boolean
          description: States whether or not the invoice option is enabled on online enrolments. Read Only.
          readOnly: true
        name:
          type: string
          description: Name of the Invoice Option. Read Only.
          readOnly: true
        description:
          type: string
          description: Description of the Invoice Option. Read Only.
          readOnly: true
        total:
          type: number
          example: "0.0"
          description: The total amount of Invoice Option. Read Only.
          readOnly: true
        enabled:
          type: boolean
          description: States whether or not the invoice option or not. Read Only
          readOnly: true


#######################################
# Invoice Templates                   #          
#######################################
    InvoiceTemplateDetails:
      title: Invoice Template
      description: Invoice Template details.
#      required:
#      - invoice-option-id
#      - party-identifier
#      - delivery-method 
#      - status
      type: object
      xml:
        name: invoice-template
      properties:
            id: 
              type: number
              description:   Invoice template id.
              example: 1
            invoice-option-id: 
              type: number
              example: 1
              description:   Invoice option id.
#              readOnly: true
            ledger-code:
              type: string
              description:  "A valid ledger code. Reference data table_name: Ledger_Code_Lookup."   
            description:
              type: string
              description:  Short description about the line item.  
            commission:
              type: boolean
              description:  States whether comision applies to invoice.  
            employer-rate:
              type: string
              example: No override
              description:  Imvoice employer rate.  
            job:
              type: string
              description: "A valid job code. Reference data table_name: Job_Account."
            amount-ex:
              type: number
              description:  "An amount being paid in this transaction for the line item. Can be the full or partial amount for the line item. Format: 2 decimal precision float."
              example: 7500.50
            per-nominal-hour:
              type: boolean
              description:  States whether invoice is per nominal hour or not.  
            discount-code:
              type: boolean
              description:  States whether discount code applies to invoice.  
            scholarships:
              type: boolean
              description:  States whether scholarships can be applied to invoice.  
            deferred-revenue:
              type: boolean
              description:  States whether deferred revenue applies to invoice.  
            tax-treatment:
              type: string
              example: FRE
              description: "A valid tax treatment code. Reference data table_name: Tax_Treatment."
            tax-amount:
              type: number
              example: 1.99
              description:  "Total tax amount. Format: 2 decimal precision float. Read-Only"
#              readOnly: true
            total:
              type: number
              example: 7500.50
              description:  "Total amount including tax. Format: 2 decimal precision float. Read-Only."
#              readOnly: true
            invoicing-method:
              type: string
              description:  Invoicing Method.  
              example: Immediate
            invoice-to:
              type: string
              description:  States who the invoice should be sent to.  
              example: Student
            adjustment-days:
              type: number
              description:  Invoice adjustment days.  
            create-on:
              type: string
              example: Enrolment
              description:  Invoice created on. 
            frequency:
              type: string
              example: Once
              description:  Frequency of the invoice. 
                        

#######################################
# Location                            #          
#######################################
    LocationDetails:
      title: Location
      description: Location Details.
      required:
      - name
      type: object
      xml:
        name: location
      properties:
          id:
            type: integer
            description: Location Id
            readOnly: true
          name:
            type: string
            description: Name of the Location.
          description:
            type: string
            description: Short note about the location.
          address:
            type: object
            properties:
              unit-details:
                type: string
                description: The details of the unit.
              unit-number:
                type: string
                description: The unit number.
              street-number:
                type: string
                description: The street number.
              street-name:
                type: string
                description: Name of the street.
              street-type:
                type: string
                description: Type of the street.
              suburb:
                type: string
                description: Suburb of the address.
              post-code:
                type: string
                description: Post code for the address’s suburb.
              state:
                type: string
                description: The state where the address is located. 
          contact-number:
            type: number
            example: "0199999999"
            description: Contact number of the location.
          enabled:
            type: boolean
            description: Indicates if the location is active or not.
          information:
            type: string
            description: Detailed description about the location.
          brand-id:
            type: integer
            format: int32
            example: 1
            nullable: true
            description: Location brand Id. If no Brand is set, a Null value is returned.


#######################################
# Party                              #          
#######################################

    PartyDetails:
      title: Party
      required:
      - party-type
      - contact-method
      - surname
      - first-name
      - birth-date
      - legal-name
      - trading-name
      type: object
      xml:
        name: party
      description: | 
        INDIVIDUAL PARTY 
        This is a record for an individual. This acts as a base record where all details common to each individual are captured.
        
        A party record can have many ‘roles’ (i.e. a Party can have the role of a Trainer, User and Student Enrolment) and as such a party record must be created before you can create a student enrolment for example.
        
        EMPLOYER PARTY 
        This is a record for an employer. It is effectively the same as that for an individual, but is distinguished by a ‘Type’. This changes the fields on the record to show those applicable for a company (e.g. legal name, trading name etc). 

      properties:
          id:
            type: integer
            description: Auto-assigned Id. Read only
            format: int32
            readOnly: true
          party-identifier:
            type: string
            description: Party identifier.  Automatically generated for new records unless explicitly specified.
          job-seeker-identifier:
            type: string
            description: Job Seeker Identifier of the Party.
          rto-identifier:
            type: integer
            description: Unique Provider Code. Can be retrieved from Administration > Configuration > Preferences
          job-seeker:
            type: string
            description: "The id of the jobseeker. Note: This won’t display unless “Employment Services” is enabled."
          party-type:
            type: string
            description:  "Either Person or Employer. Reference data table_name: party_type."
          contact-method:
            type: integer
            description: "Either Letter or Email. Reference data table_name: contact_method."
          rto-name:
            type: string
            description: The name of the Provider.  Read only.
            readOnly: true
          surname:
            type: string
            description:  Used only for party-type person.
          first-name:
            type: string
            description:  Used only for party-type person.
          middle-name:
            type: string
            nullable: true
            description:  Used only for party-type person.
          known-by:
            type: string
            nullable: true
            description:  Used only for party-type person.
          birth-date:
            type: string
            format: date
            description: Used only for party-type person.
          gender:
            type: string
            description: " Used only for party-type person. Reference data table_name: gender."
            enum: 
            - Female
            - Male
            - X
          title:
            type: string
            nullable: true
            description:  "Used only for party-type person. Reference data table_name: title."
          tags:
            nullable: true
            type: string
            description: " Multiple tags must be separated by commas. Can be found under Administration > Lookup > Tags"
          legal-name:
            type: string
            description: Used only for party-type employers.
          trading-name:
            type: string
            description: Used only for party-type employers.
          website:
            type: string
            nullable: true
            description: Used only for party-type employers. Must be prefixed with “http://” or “https://”
          num-of-employees:
            type: number
            format: int32
            description: Used only for party-type employers.
            nullable: true
          company-level:
            type: string
            nullable: true
            description: Used only for party-type employers.
            enum: 
            - Local
            - State
            - National
          employer-source:
            type: string
            nullable: true
            description: Used only for party-type employers.
            enum: 
            - Cold Call
            - Mail-out
            - Partner
            - Trade Show
            - Web Enquiry
            - Existing Client
            - AAC Referral
          anzsic-code:
            type: string
            description: " Used only for party-type employers. Reference data table_name: anzsic_code."
          description:
            type: string
            nullable: true
            description: Used only for party-type employers.
          industry:
            type: string
            nullable: true
            description: Used only for party-type employers.
          image:
            type: string
            nullable: true
            description: Person’s profile picture or employer’s logo.
          do-not-market:
            type: boolean
            nullable: true
            description: Used to manage marketing related privacy for a party.
          login:
            type: string
            nullable: true
            description: Username for portals.
          password:
            type: string
            nullable: true
            description: Used to set a new password (will always be blank when returned).
          password-temporary:
            type: string
            nullable: true
            description: Value visible in the application.
          logon-enabled:
            type: boolean
            nullable: true
            description: Whether to enable portal login.
          created-on:
            type: string
            format: date-time
            readOnly: true
            description: Created on timestamp in ISO 8601 format. Read-Only
          updated-on:
            type: string
            format: date-time
            readOnly: true
            description: Updated on timestamp in ISO 8601 format. Read-Only  
          usi-number:
            type: string
            description: The Unique Student Identifier.     
          usi-status:
            type: string
            readOnly: true
            description:  Return Verified if the USI is present and has been verified by the USI portal OR Unverified if the USI is present and has not been verified by the USI portal OR No USI if USI is not present. Read only  
          addresses:
            type: object
            xml:
              name: addresses
            properties:
              addresses:
                type: array
                description: Party Addresses
                items:
                  $ref: '#/components/schemas/PartyAddress'
          contact-details:
            type: object
            xml:
              name: contact-details
            properties:
              contact-details:
                type: array
                description: Party Contact details
                items:
                  $ref: '#/components/schemas/ContactDetails'
          identifications:
            type: object
            xml:
              name: identifications
            properties:
              identifications:
                type: array
                description: Party identifications
                items:
                  $ref: '#/components/schemas/IdentificationDetails'
          avetmiss:
            $ref: '#/components/schemas/AvetmissDetails'
          party-vet-fee-help:
            $ref: '#/components/schemas/PartyVetFeeHelp'
          party-cricos:
            $ref: '#/components/schemas/PartyCricos'
          party-group-members:
            type: object
            xml:
              name: party-group-members
            properties:
              party-group-members:
                type: array
                description: Party Group Members
                items:
                  $ref: '#/components/schemas/PartyGroupMember'
          prior-qualifications:
            type: object
            xml:
              name: prior-qualifications
            properties:
              prior-qualifications:
                type: array
                description: Party Prior Qualifications
                items:
                  $ref: '#/components/schemas/PartyPriorQual'

          ad-hoc-fields:
            type: object
            xml:
              name: ad-hoc-fields
            properties:
              ad-hoc-fields:
                type: array
                description: Ad-hoc Fileds
                items:
                  $ref: '#/components/schemas/AdHocfields'


#######################################
# Party Authentication                #          
#######################################
    PartyAuthentication:
      title: Party Authentication
      description: Party Authentication Details
      type: object
      xml:
        name: party
      properties:
        login:
          type: string
          description: The party login username
        password:
          type: string
          description: The clear text user password
          writeOnly: true
        valid-password:
          type: boolean
          description: password
          readOnly: true


#######################################
# PARTY CONTACT                       #          
#######################################
    PartyContact:
      title: Party Contact
      description: Party Contact Details
      required:
      - first-name
      type: object
      xml:
        name: party-contact
      properties:
        id:
          type: number
          format: int32
          readOnly: true
          description: The unique party contact id. Read-Only
        primary:
          type: boolean
          description:  States whether or not the party contact is primary.
        first-name:
          type: string
          description:  First name of the party contact.
        surname:
          type: string
          description: Surname of the party contact.
        title:
          type: string
          nullable: true
          description: "Title of the party contact. Reference data table_name: title."
        relationship:
          type: string
          description: Used only for party-type Person.
        jobtitle:
          type: string
          description: Used only for party-type Employer.      
        phone:
          type: string
          description: Phone number of the party contact.   
        email:
          type: string
          description: Email address of the party contact.     
        address:
          type: string
          readOnly: true
          description: Address of the party contact. Read Only
        contact-method:
          type: string
          description: "Method of contact for party contact. Reference data table_name: contact_type."
        party-identifier:
          type: string
          description: "If used, the party with the given identifier will be used instead of the details above. Can be retrieved from resource Party."
        party-contact-roles:
            type: array
            items:
              type: object
              properties:
                party-contact-role:
                  type: object
                  properties:
                    contact-role:
                      type: string
                      description: "The roles of a party contact . Reference data table_name: role_type."


#######################################
# Party CRICOS                        #          
#######################################
    PartyCricos:
      title: Party CRICOS
      description: |
        Party CRICOS Details
        
        There is a maximum of 1 child of this resource per party. To create or update these records, the details should be included as part of the party xml and sent to the party (i.e. the ‘parent’ of the ‘child’) endpoint.
      type: object
      xml:
        name: party-cricos
      properties:
        visa-status:
          type: string
          description: "Reference data lookup > International Reference Data > Visa Status."
        visa-type:
          type: string
          description:  "Reference data table_name: visa_type."
        visa-subtype:
          type: string
          description: "Reference data table_name: visa_subtype."
        visa-education-sector:
          type: string
          description: "Reference data lookup > International Reference Data > Visa Education Sector."
        svp-assessment-level:
          type: string
          description: "Reference data table_name: svp_assessment_level."
        english-test-type:
          type: string
          description: "Reference data table_name: english_test_type."
        english-test-delivery-method:
          type: string
          description: "Reference data table_name: english_test_delivery_method."
        english-test-score:
          type: string
          description: "Score achieved in the english test."
        english-test-date:
          type: string
          format: date
          description: The English test date in ISO 8601 format.
        agent-party-identifier:
          type: string
          description: "An agent party identifier that can be retrieved from rescource party."
        citizenship-status:
          type: string
          description: "Reference data table_name: citizenship_status."
        nationality:
          type: string
          description: "Reference data table_name: country."
        country-of-birth:
          type: string
          description: "Reference data table_name: country."          
        country-of-passport:
          type: string
          description: "Reference data table_name: country."
        oshc:
          type: boolean
          description: States whether OSHC is enabled or disabled.
        oshc-provider:
          type: string
          description: "Reference data lookup > International Reference Data > OSHC."
        oshc-member-number:
          type: string
          description: OHSC number
        oshc-expiry-date:
          type: string
          format: date
          description: OHSC expiry date in ISO 8601 format.        
        created-on:
          type: string
          format: date-time
          readOnly: true
          description: Created on timestamp in ISO 8601 format. Read-Only
        updated-on:
          type: string
          format: date-time
          readOnly: true
          description: Updated on timestamp in ISO 8601 format. Read-Only  


#######################################
# Party Group Member                  #          
#######################################

    PartyGroupMember:
      title: Party Group Member
      description: |
        Party Group Member details.
        
        Party group member does not work like other child resources in that an update request does not replace all records with the new ones, and sending an empty party-group-members collection does not remove any party group member records. Instead, matching and updating is done by looking at the value of the group-type property. A party group can be reset by providing an empty name property.
      required:
      - name
      type: object
      xml:
        name: party-group-member
      properties:
          id:
            type: integer
            readOnly: true
            description: The party group member Id
          group-type:
            type: string
            readOnly: true
            description: A valid party group type which is drawn from party group name. Read Only
          name:
            type: string
            description: "A valid party group name. Reference data table_name: party_group."


#######################################
# PARTY IMAGE                         #          
#######################################
    PartyImageDetails:
      title: Party Image
      description: Party Image Details
      required:
      - image
      type: object
      xml:
        name: party
      properties:
        image:
          type: string
          description: validated URL string - location of the image file that is to be uploaded


#######################################
#  PARTY IMAGE BATCH LOG              #
#######################################
    PartyImageBatchLog:
      title: Party Image batch log details - running, enqueued, or error
      description: Party Image batch log details - running, enqueued, or error
      type: object
      readOnly: true
      xml:
        name: image
      properties:
        batch-log-status:
          type: string
          description: Status of the batch log
          enum: [Running/Enqueued,Error]
          readOnly: true
        batch-log-id:
          type: integer
          example: 123
          description:  Description of the document
          readOnly: true
        batch-log-error:
          type: string
          nullable: true
          description:  'Description of the error.  Only applicable if the batch log status is "Error"'
          readOnly: true


#######################################
# Party VET fee help                  #
#######################################
    PartyVetFeeHelp:
      title: Party VET fee help
      description: |
        Party CRICOS Details
        
        There is a maximum of 1 child of this resource per party. To create or update these records, the details should be included as part of the party xml and sent to the party (i.e. the ‘parent’ of the ‘child’) endpoint. 
      type: object
      xml:
        name: party-vet-fee-help
      properties:
        fee-type:
          type: string
          description: Reference data, any of the below
          enum:
          - Full Fee Paying
          - Subsidised by a Reform State/Territory Government
          - None of the above
        chessn :
          type: string
          description:  A valid Commonwealth Higher Education Student Support Number
        tax-file-number:
          type: string
          description: A valid TFN Number.
        tfn-status:
          type: string
          description: Reference data, any of the below
          enum:
          - Received
          - Awaiting
          - Not Supplied
          - Applicable Submitted
        visa:
          type: string
          description: "Reference data table_name: visa_type."
        year-of-arrival:
          type: string
          description: Arrival year to Australia.


#######################################
# Payments                           #          
#######################################
    PaymentsDetails:
      title: Payments
      description: Payments details.
      required:
      - party-identifier
      - type
      - source
      - enabled
      type: object
      xml:
        name: payments
      properties:
          rto-identifier:
            type: integer
            description: Unique Provider Code. Can be retrieved from Administration > Configuration > Preferences
          invoice-number:
            type: string
            description: The invoice number for which the payment was made. Read-Only
            readOnly: true
          payment-date:
            type: string
            format: date
            description: Automatically defaulted to created date for new records unless explicitly specified, in ISO 8601 format. 
            readOnly: true
          party-identifier:
            type: string
            description: The party identifier of a valid party. `resource party`
          rto-name:
            type: string
            description:  The name of the Provider. Read-Only
            readOnly: true
          type:
            type: string
            description: "Refers to the type of payment [table_name: payment_type] (#reference-data-reference-data-get-1)"
          description:
            type: string
            description: The payment description.
          source:
            type: string
            description: "Refers to the source of payment [table_name: payment_source] (#reference-data-reference-data-get-1)"
          amount-total:
            type: number
            description:  Total payment amount. Payment amounts are created on the Payment Item child resource. `resource Payment Item`
            example: 80.01
          location:
            type: string
            description:  "Reference data table_name: contact_location."
          enabled:
            type: boolean
            description: States whether or not the payment is enabled
          created-on:
            type: string
            format: date-time
            description:  Created at timestamp in ISO 8601 format. Read-Only
            readOnly: true
          updated-on:
            type: string
            format: date-time
            description:  Created on timestamp in ISO 8601 format. Read-Only
            readOnly: true
          payment-items:
            type: array
            xml:
              name: payment-items
            items:
                type: object
                properties:
                  payment-item:
                    type: object
                    properties:
                      invoice-item-id: 
                        type: number
                        description:   Used to assign a Payment Item to an Invoice Item. If left blank, the first Invoice Item will be used. Read-Only
                        readOnly: true
                      quantity:  
                        type: number
                        description: Quantity of payment items. Read Only
                        readOnly: true
                      ledger-code:
                        type: string
                        description:  "References from [table_name: ledger_code_lookup] (#reference-data-reference-data-get-1)"   
                        readOnly: true
                      ledger-account-name:
                        type: string
                        description:  Can be found under Menu item Administration > Lookups > References > Ledger Code Lookup Read Only  
                        readOnly: true
                      description:
                        type: string
                        description:  Description of the payment item Read Only 
                        readOnly: true
                      amount:
                        type: number
                        description:  Total Invoice line item amount Read Only
                        example: 199.99
                        readOnly: true
                      paid-to-date:
                        type: string
                        description: Total amount paid to date for the line item Read Only
                        readOnly: true
                      payment-amount:
                        type: number
                        example: 1.99
                        description:  Amount being paid in this transaction for the line item. Can be the full or partial amount for the line item.


#######################################
# PRIOR QUALIFICATION                 #          
#######################################
    PartyPriorQual:
      title: Prior Qualification
      description: Prior Qualification Details
      required:
      - code
      - qualification-level
      - completed-on
      type: object
      xml:
        name: prior-qualification
      properties:
        code:
          type: string
          description:  "Reference data table_name: XXXXXX"
        description:
          type: string
          description: Prior qualification description. Read Only
        training-institute:
          type: string
          description: Training Institute
        qualification-level:
          type: string
          description: "Qualification Level. Reference data table_name: qualification_level"
        completed-on:
          type: string
          format: date
          description: Prior education completion date in ISO 8601 format.      
        prior-qualification-units:
            type: array
            items:
              type: object
              properties:
                prior-qualification-unit:
                  type: object
                  properties:
                    code:
                      type: string
                      description: Prior qualification unit code.
                    description:
                      type: string
                      description: Prior qualification unit description
                    completed-on:
                      type: string
                      format: date
                      description: Prior education unit completion date in ISO 8601 format.     
                    expires-on:
                      type: string
                      format: date
                      description: Prior education unit expiry date in ISO 8601 format.     


#######################################
# Program                             #          
#######################################
    ProgramDetails:
      title: Program
      description: A program record is a base record for a course. It contains all the fields common to that type of record (e.g. Course number, Unit outcome, etc).
      required:
      - name
      type: object
      xml:
        name: course-scope
      properties:
          course-code:
            type: string
            description: Academic Period Code. Could be a training.gov.au qualification code or a custom code. Read Only resource course.
            readOnly: true
          name:
            type: string
            description: The Program's name. Read Only.
            readOnly: true
          internal-name:
            type: string
            description: The internal name can be used to distinguish between Programs with the same name and code. It is not included on AVETMISS reports or certificates. Read Only.
            readOnly: true
          enabled:
            type: boolean
            description: States whether or not the Program is enabled. Read Only.
            readOnly: true
          vet:
            type: boolean
            description: States whether a Program is a VET Program or not. Read Only.
            readOnly: true
          acrredited:
            type: boolean
            description: States whether or not the Program is an accredited on. Read Only.
            readOnly: true
          individual-unit-enrolments:
            type: boolean
            description: The internal name can be used to distinguish between Programs with the same name and code. It is not included on AVETMISS reports or certificates. Read Only.
            readOnly: true
          recognition-status-type:
            type: string
            description: "The recognition status type of the Program.Reference data table_name: recognition_status_type. Read Only."
            readOnly: true
          qualification-level:
            type: string
            description: "Qualification level of the Program. Reference data table_name: qualification_level. Read Only."
            readOnly: true
          foe-code:
            type: string
            description: "Field of Education code of the Program. Reference data table_name: foe_code. Read Only."
            readOnly: true
          anzsco-code:
            type: string
            description: " ANZSCO code of the Program. Reference data table_name: anzsco_code. Read Only."
            readOnly: true
          nominal-hours:
            type: integer
            format: int32
            description: Hours of training required to achieve the outcomes of units of competency. Read Only.
            readOnly: true
          estimated-course-cost:
            type: number
            example: "0.0"
            description: Estimated course cost (New field for VSL). Read Only.
            readOnly: true
          applicable-loan-cap:
            type: number
            example: "0.0"
            description: Applicable loan cap (New field for VSL). Read Only.
            readOnly: true
          RPL-accepted:
            type: boolean
            description: States whether the Program is RPL accepted or not.
          cost-centre-code:
            type: string
            description: Cost Centre code.
          brand-id:
            type: integer
            format: int32
            example: "1"
            nullable: true
            description: Brand Id. If no Brand is set, a Null value is returned.  
          program-category-id:
            type: integer
            format: int32
            description: "Program category id. Reference data table_name: program_categories. Read Only."
            readOnly: true
          program-sub-category-id:
            type: integer
            format: int32
            description: "Program sub category id.  Reference data table_name: program_sub_categories. Read Only."
          course-type-id:
            type: integer
            format: int32
            description: "Course type id. Reference data table_name: course_type. Read Only."
          program-owner-id:
            type: string
            description: Party identifier of the Program owner.
          cricos-code:
            type: string
            description: CRICOS Code associated with the Program.
          status-id:
            type: integer
            format: int32
            description: "Status id of the Program. Reference data table_name: course_program_status. Read Only."
            readOnly: true
          study-area-id:
            type: integer
            format: int32
            description: "Study area id of the Program. Reference data table_name: study_area. Read Only."
            readOnly: true
          ad-hoc-fields:
            type: object
            xml:
              name: ad-hoc-fields
            properties:
              ad-hoc-fields:
                type: array
                description: Ad-hoc Fileds
                items:
                  $ref: '#/components/schemas/AdHocfields'

    IncludeProgram:
      title: Program Include Options
      type: object
      properties:
          units:
            type: object
            xml:
              name: units
            properties:
              units:
                type: array
                description: Optional. Only returned if included in the query request.
                items:
                  $ref: '#/components/schemas/UnitDetailsLite'
          subjects:
            type: object
            xml:
              name: subjects
            properties:
              subjects:
                type: array
                description: Optional. Only returned if included in the query request.
                items:
                 $ref: '#/components/schemas/SubjectDetailsLite'
          academic-periods:
            type: object
            xml:
              name: academic-periods
            properties:
              academic-periods:
                type: array
                description: Optional. Only returned if included in the query request.
                items:
                  $ref: '#/components/schemas/AcademicPeriodDetails'
          marketing-data:
              type: object
              xml:
                name: campaigns
              properties:
                campaign:
                  type: array
                  description: Optional. Only returned if included in the query request.
                  items:
                    $ref: '#/components/schemas/WebContentDetails'


#######################################
# PROSPECT                           #          
#######################################
    ProspectDetails:
      title: Prospect
      description: Prospect Details
      required:
      - party_identifier
      - course_number
      - status
      - prospect-type
      type: object
      xml:
        name: prospect
      properties:
        id:
          type: number
          format: int32
          readOnly: true
          description: Automatically generated – cannot be assigned. Read-Only
        party-identifier:
          type: string
          description: Party Identifier. Cannot be changed after creation.
        course-number:
          type: string
          description: Course number can be retrieved from `resource course`.
        status:
          type: string
          description:  "Status of the prospect. Reference data table_name: prospect_status(placeholder)."
        prospect-type:
          type: string
          description:  "Type of the prospect. Reference data table_name: role_prospect_type."
        assignee:
          type: string
          example: PAJOB17532
          description: The party ID of the prospect assignee from `resource party`.
        start-date:
          type: string
          format: date
          readOnly: true
          description: Start date of the prospect. Date in ISO8601 format. Read Only
        target-end-date:
          type: string
          format: date
          readOnly: true
          description: End date of the prospect. Date in ISO8601 format. Read Only
        created-on:
          type: string
          format: date-time
          readOnly: true
          description: The date prospect was created on. Date in ISO8601 format. Read Only
        updated-on:
          type: string
          format: date-time
          readOnly: true
          description: The date prospect was updated on. Date in ISO8601 format. Read Only
        referring-agent:
          type: string
          readOnly: true
          description: The name of the agent that the prospect was referred by, from `resource party`. Read only
        sales-lead:
          type: object
          properties:
            id:
              type: number
              description:  The id of sales lead. 
              readOnly: true
            name: 
              type: string
              description: Name of the sales lead.


#######################################
# Quote                               #          
#######################################
    QuoteDetails:
      title: Quote
      description: Quote details.
      required:
      - quote-date
      - party-identifier
      - status
      type: object
      xml:
        name: quote
      properties:
          quote-number:
            type: string
            description: Automatically generated for new records unless explicitly specified.
          quote-date:
            type: string
            format: date-time
            description: Used to set the quote date, in ISO 8601 format. 
          party-identifier:
            type: string
            description: The party identifier of a valid party.
          description:
            type: string
            description:  Short note about the quote.
          target-entity-type-id:
            type: string
            description: Refers to the type of target selected. Read-Only
            readOnly: true
            enum:
            - 1005 - Party
            - 1007 - Enrolment
            - 1855985168 - Service
          target-entity-instance:
            type: string
            description:  Used to select a particular instance of the target type. Read-Only
            readOnly: true
          status:
            type: string
            description: "Status of the quote. Reference data table_name: Quote_status."
          created-on:
            type: string
            format: date-time
            description:  Created on timestamp in ISO 8601 format. Read-Only
            readOnly: true
          updated-on:
            type: string
            format: date-time
            description:  Created on timestamp in ISO 8601 format. Read-Only
            readOnly: true
          quote-items:
            type: array
            required:
            - quantity
            - ledger-code
            - amount
            xml:
              name: quote-items
            items:
                type: object
                properties:
                  quote-item:
                    type: object
                    properties:
                      id: 
                        type: number
                        description:   Automatically generated – cannot be assigned.
                        readOnly: true
                      quantity:  
                        type: number
                        example: 1
                        description: Defaults to 1 if not specified.
                        default: 1
                      ledger-code:
                        type: string
                        description:  "A valid ledger code. Reference data table_name: Ledger_Code_Lookup."   
                      description:
                        type: string
                        description:  Short description about the line item.  
                      job-account:
                        type: string
                        description: "A valid job code. Reference data table_name: Job_Account."
                      amount:
                        type: number
                        description:  "An amount being paid in this transaction for the line item. Can be the full or partial amount for the line item. Format: 2 decimal precision float."
                        example: 199.99
                      tax-treatment:
                        type: string
                        description: "A valid tax treatment code. Reference data table_name: Tax_Treatment."
                      tax-amount:
                        type: number
                        example: 1.99
                        description:  "Total tax amount. Format: 2 decimal precision float. Read-Only"
                        readOnly: true
                      sub-total:
                        type: number
                        example: 199.99
                        description:  "Total amount including tax. Format: 2 decimal precision float. Read-Only."
                        readOnly: true


#######################################
# Reference Data                      #          
#######################################
    ReferenceTables:
      title: Reference
      description: Reference Tables
      type: object
      xml:
        name: reference
      properties:
        name:
          type: string
          description: name
        table-name:
          type: string
          description: table name

    ReferenceTableData:
      title: Reference Data Table
      description: Reference Table Details
      type: object
      xml:
        name: tablename
      properties:
        id:
          type: integer
          description: id of the reference data.
        name:
          type: string
          description: name of the reference data
        description:
          type: string
          description: Decsription of the reference data
        enabled:
          type: boolean
          description: states whether dat is enabled or not


#######################################
# Refunds                             #          
#######################################
    RefundDetails:
      title: Refunds
      description: A refund can be created against an invoice belonging to an individual or employer resource party.
      required:
      - party-identifier
      - type
      - source
      - enabled
      type: object
      xml:
        name: refund
      properties:
          invoice-number:
            type: string
            description: The invoice number for which the payment was made. Read-Only
            readOnly: true
          refund-date:
            type: string
            format: date
            description: Automatically defaulted to created date for new records unless explicitly specified, in ISO 8601 format. Read Only.
            readOnly: true
          party-identifier:
            type: string
            description: The party identifier of a valid party. `resource party`
          type:
            type: string
            description: "Refers to the type of payment table_name: payment_type"
          description:
            type: string
            description: The payment description.
          source:
            type: string
            description: "Refers to the source of payment table_name: payment_source"
          amount-total:
            type: number
            description:  Total payment amount. Payment amounts are created on the Payment Item child resource. resource Payment Item Read Only
            readOnly: true
          location:
            type: string
            description:  "Reference data table_name: contact_location."
          enabled:
            type: boolean
            description: States whether or not the payment is enabled
          created-on:
            type: string
            format: date-time
            description:  Created at timestamp in ISO 8601 format. Read-Only
            readOnly: true
          updated-on:
            type: string
            format: date-time
            description:  Created on timestamp in ISO 8601 format. Read-Only
            readOnly: true
          refund-items:
            type: array
            xml:
              name: refund-items
            items:
                type: object
                required: 
                - refund-amount
                properties:
                  refund-item:
                    type: object
                    properties:
                      invoice-item-id: 
                        type: number
                        description:   Used to assign a Refund Item to an Invoice Item. If left blank, the first Invoice Item will be used. Read-Only
                        readOnly: true
                      quantity:  
                        type: number
                        description: Quantity of refund items. Read Only
                        readOnly: true
                      ledger-code:
                        type: string
                        description:  "References from table_name: ledger_code_lookup Read Only"   
                        readOnly: true
                      ledger-account-name:
                        type: string
                        description:  Can be found under Menu item Administration > Lookups > References > Ledger Code Lookup Read Only  
                        readOnly: true
                      description:
                        type: string
                        description:  Description of the refund item Read Only 
                        readOnly: true
                      amount:
                        type: number
                        description:  "Total Invoice line item amount. Format: 2 decimal precision float. Read Only"
                        example: 199.99
                        readOnly: true
                      paid-to-date:
                        type: string
                        description: Total amount paid to date for the line item Read Only
                        readOnly: true
                      refund-amount:
                        type: number
                        example: -199.99
                        description:  "A negative amount being paid in this transaction for the line item. Can be the full or partial amount for the line item. Format: 2 decimal precision float."


#######################################
# Sales Lead                          #          
#######################################
    SalesLeadDetails:
      title: Sales Lead
      description: Sales Lead details.
      required:
      - name
      - status 
      - source
      type: object
      xml:
        name: sales-lead
      properties:
          id:
            type: integer
            description: Auto-assigned Id
            format: int32
            readOnly: true
          name:
            type: string
            description: Sales lead name.
          description:
            type: string
            description: Description of the lead.
          status:
            type: string
            description: "Status of the lead. Reference data table_name: sale_lead_status."
          source:
            type: string
            description: "Source of the lead. Reference data table_name: sales_lead_source."
          course-number:
            type: string
            description: Course number can be retrieve from `resource course`.
          course-name:
            type: string
            description:  A course name. Read Only
            readOnly: true
          course-scope-code:
            type: string
            description:  A program code. Read Only
            readOnly: true
          course-scope-name:
            type: string
            description:  A program name. Read Only
            readOnly: true
          employer:
            type: string
            description: An employer party identifier can be retrieved from `resource party`.
          agent:
            type: string
            description: An agent party identifier can be retrieved from `resource party`.
          estimated:
            type: object
            description: Estimated
            xml:
              name: estimated
            properties:
              enrolments:
                type: number
                description: Estimated number of enrolments.
              revenue:
                type: number
                description: Estimated revenue from enrolments.
              close-date:
                type: string
                format: date
                description:  Estimated close date for the sales lead. Date in ISO8601 format.  
          actual:
            type: object
            description: Actual
            xml:
              name: actual
            readOnly: true
            properties:
              enrolments:
                type: number
                description: Estimated number of enrolments.
                readOnly: true
              revenue:
                type: number
                description: Estimated revenue from enrolments.
                readOnly: true
              close-date:
                type: string
                format: date
                description:  Estimated close date for the sales lead. Date in ISO8601 format.  
                readOnly: true
          net:
            type: object
            description: Net
            xml:
              name: net
            readOnly: true
            properties:
              enrolments:
                type: number
                description: Estimated number of enrolments.
                readOnly: true
              revenue:
                type: number
                description: Estimated revenue from enrolments.
                readOnly: true
              close-date:
                type: string
                format: date
                description:  Estimated close date for the sales lead. Date in ISO8601 format.  
                readOnly: true


#######################################
# Subject                             #          
#######################################
    SubjectDetails:
      title: Subject
      description: Subject Details
      type: object
      xml:
        name: subject
      properties:
        subject-code:
          type: string
          description: Code of the subject.
        name:
          type: string
          description: Name of the subject.
        discipline-code:
          type: string
          description: Disciplie Code.
        eftsl:
          type: number
          example: "0.0"
          description: Subject eftsl
        points:
          type: number
          example: "0.0"
          description: Subject Points
        rpl-status:
          type: string
          description: RPL Status.
          enum: [No RPL, All RPL, Partly RPL]
        enabled:
          type: boolean
          description: indicates if the subject is enabled or not.
        description:
          type: string
          description: Subject description
        units:
            type: array
            items:
              type: object
              properties:
                unit:
                  type: object
                  properties:
                    unit-code:
                      type: string
                      description: unit code associated with the subject.
                    name:
                      type: string
                      description: unit name associated with the subject.

    SubjectDetailsLite:
      title: Subject minimal dataset - Program
      description: |
        Optional. Truncated Response payload for Subjects. 
        Only returned if included in the query request.
      type: object
      xml:
        name: subject
      properties:
        subject-code:
          type: string
          description: Code of the subject.
        name:
          type: string
          description: Name of the subject.
        order:
          type: integer
          description: Order of the subjct.
        optional:
          type: boolean
          description: indicates if the subject is optional or not.
        units:
            type: array
            items:
              type: object
              properties:
                unit:
                  type: object
                  properties:
                    unit-code:
                      type: string
                      description: unit codes associated with the subject.

    SubjectDetailsLite-Course:
      title: Subject minimal dataset - Course
      description: |
        Optional. Truncated Response payload for Subjects. 
        Only returned if included in the query request.
      type: object
      xml:
        name: subject
      properties:
        subject-code:
          type: string
          description: Code of the subject.
        name:
          type: string
          description: Name of the subject.
        units:
            type: array
            items:
              type: object
              properties:
                unit:
                  type: object
                  properties:
                    unit-code:
                      type: string
                      description: unit codes associated with the subject.


    SubjectDetailsLite-Enrolment:
      title: Subject dataset - for enrolment
      description: Subject details - enrolment
      required:
      - subject-scope
      type: object
      xml:
        name: subject
      properties:
        id:
          type: integer
          description: The id of the enrolment subject (Unit of Study)
        subject-scope:
          type: string
          description: "A valid subject scope code. Can be retrieved from the menu bar: Administration > Curriculum > Subject scope"
        score:
          type: number
          example: 72
          description: Denotes the score in that enrolment subject
        outcome:
          type: string
          description: "Refers to the enrolment subject outcome table_name: outcome_identifier_avetmiss"
        outcome-date:
          type: string
          format: date
          description: Outcome date of the enrolment subject in ISO 8601 format. Read Only
        start-date:
          type: string
          format: date
          description: Start date of the enrolment subject in ISO 8601 format.
        end-date:
          type: string
          format: date
          description: End date of the enrolment subject in ISO 8601 format. Mandatory if outcome is a final outcome (e.g. Competent)
        target-end-date:
          type: string
          format: date
          description: Target end date of the enrolment subject in ISO 8601 format
        note:
          type: string
          description: Note for the enrolment subject
        tuition-fee:
          type: number
          example: 7568.0
          description: The tuition fee for the enrolment subject
        paid-up-front:
          type: number
          example: 1200.0
          description: The amount of tuition fee paid upfront
        vet-fee-help-debt:
          type: number
          description: The VET fee help debt calculated from tuition_fee subtract paid_up_front. Read Only
        vet-fee-help-loan-fee::
          type: number
          example: 2000.0
          description: The VET help loan fee
        census-date:
          type: string
          format: date
          description: Census date for the enrolment subject in ISO 8601 format
        admin-date:
          type: string
          format: date
          description: Admin date for the enrolment subject in ISO 8601 format
        attendance-mode:
          type: string
          nullable: true
          example: 1 - Internal Mode of Attendance at an on-shore or off-shore campus (includes classroom based)       
          description: Only relevant if the course state is Victoria  
        student-status:
          type: string
          nullable: true
          example: 401 - Deferred all/part of tuition fee through VET FEE-HELP - non State Government subsidised 
          description: Only relevant if the course state is Victoria        
        created-at:
          type: string
          format: date-time
          description: Created on timestamp in ISO 8601 format. Read-Only
        updated-at:
          type: string
          format: date-time
          description: Updated on timestamp in ISO 8601 format. Read-Only  


#######################################
# TEMPLATE                            #          
#######################################
    TemplateDetails:
      title: Templates
      description: Templates Details
      required:
      - document-category
      type: object
      xml:
        name: template
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
          description: The unique template id. Read-Only
        entity:
          type: string
          description: The template’s name.
        name:
          type: string
          description: The template’s name.
        from-address:
          type: string
          description:  Default email address
        subject:
          type: string
          description:  Template email subject name
        type-id:
          type: integer
          description:  "Template type id. Reference data table: document_type"
        type:
          type: string
          description:  Document type
          example: Template Type
        category:
          type: string
          description:  Template record category
          example: Category
        document-category:
          type: string
          description:  Document Category
          example: Document Category
        status:
          type: string
          description:  Status
          enum:
            - Enabled
            - Disabled
        format:
          type: string
          description: Format
          enum:
            - HTML
            - Text
        content:
          type: string
          description: HTML body source codes
          example: <p>Test Content</p>


#######################################
# Timetable                           #          
#######################################
    TimetableDetails:
      title: Timetable
      xml:
        name: timetable
      description: Calendar framework to manage ‘Events’. A timetable can exist against either a course or at system level.
      required:
      - name
      properties:
          id:
            type: number
            format: int32
            example: 1
            readOnly: true
            description: The Timetable Id. Auto-assigned. Read-Only
          external-id:
            type: string
            example: Ext-1
            nullable: true
            description: The Timetable id from an external system, can be substituted for id in the form of “ext_id:<external_id>” in any call. 
          name:
            type: string
            description: Name of the timetable.
          description :
            type: string
            description: Short note about the timetable.
          created-at:
            type: string
            format: date-time
            readOnly: true
            description: Created at timestamp in ISO 8601 format. Read-Only
          updated-at:
            type: string
            format: date-time
            readOnly: true
            description: Updated at timestamp in ISO 8601 format. Read-Only
          event-series:
            type: array
            readOnly: true
            xml:
              name: event-series
            items:
                type: object
                properties:
                  event-series:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: Internal DB id of the Series object
                      external-id:
                        type: string
                        description: |
                          External id of the Series object
                          Id defined by the user for use in integrating with external systems
                      course-number:
                        type: string
                        description: |
                          Course that this Event Series is attached to. 
                          
                          Note this should not be specified when using the /webservices/courses/{course_number}/event_series create and update calls as its implied from the URL path parameter.
                      name:
                        type: string
                        description: name of the event series as displayed in the UI.


#######################################
# TRAINER                             #          
#######################################
    TrainerDetails:
      title: Trainer
      description: Trainer Details
      required:
      - party_identifier
      type: object
      xml:
        name: trainer
      properties:
        id:
          type: number
          format: int32
          readOnly: true
          description: Automatically generated – cannot be assigned. Read-Only
        party-identifier:
          type: string
          description: Party Identifier. Cannot be changed after creation.
        enabled:
          type: boolean
          description: Can be set to false if the trainer was not active.
        accreditation-identifier:
          type: string
          readOnly: true
          description:  Unique number used to identify staff-member. Read-Only
        job-title:
          type: string
          readOnly: true
          description:  "Job title of staff. Reference data table_name: staff_job_type. Read Only."
        staff-types:
            type: array
            items:
              type: object
              properties:
                staff-type:
                  type: object
                  properties:
                      id:
                        type: string
                        description:  "id of the staff type. Reference data table_name: staff_type."
                      name:
                        type: string
                        readOnly: true
                        description:  "Type of staff. Reference data table_name: staff_type.  Read Only."
        staff-status-id:
          type: string
          description:  "id of the staff status. Reference data table_name: staff_status."
        staff-status:
          type: string
          description:  "staff-status (string) - Status of staff. Reference data table_name: staff_status. Read Only"
          readOnly: true
        employment-basis-id:
          type: string
          description:  "id of the staff employment basis. Reference data table_name: employment_basis."
        employment-basis:
          type: string
          description:  "Relates to type of employment. Reference data table_name: employment_basis"
          readOnly: true
        ind-assessor:
          type: boolean
          description: Whether this is an assessor.
        ind-coordinator:
          type: boolean
          description: Whether this is a coordinator.
        ind-trainer:
          type: boolean
          description: Whether this is a trainer.
        profile:
          type: string
          description:  Details of the trainer.
          example: <p>profile</p>;
        updated-on:
          type: string
          format: date-time
          readOnly: true
          description:  Updated at timestamp in ISO 8601 format. Read-Only    
        ad-hoc-fields:
            type: object
            xml:
              name: ad-hoc-fields
            properties:
              ad-hoc-fields:
                type: array
                description: Ad-hoc Fileds
                items:
                  $ref: '#/components/schemas/AdHocfields'


#######################################
# Transfer                            #          
#######################################
    TransferDetails:
      title: Transfer
      description: Transfer details
      required:
      - to-course
      type: object
      xml:
        name: transfer
      properties:
          to-course:
            type: string
            description: The course number of the new course to transfer to, Course number can be retrieved from resource course.


#######################################
# Unit                                #          
#######################################
    UnitDetails:
      title: Unit
      type: object
      xml:
        name: unit-scope
      properties:
          unit-scope-id:
            type: string
            description: Unit Code
          name:
            type: string
            description: Name of Unit
          internal-name:
            type: string
            description: Internal Name of Unit
          enabled:
            type: boolean
            description: Indicator whether Unit is enabled or not
          vet-accredited:
            type: boolean
            description: States whether a Unit is VET accredited or not. 
          vet-exclude:
            type: boolean
            description: States whether a Unit is excluded from VET reporting or not
          avetmiss-unit-type:
            type: string
            description: AVETMISS Unit Type
            enum: [Unit of Competency, Module]
          exclude-from-overall-score-calc:
            type: boolean
            description: States whether a Unit is excluded from overall score calculation or not
          grading-preference:
            type: string
            description: Grading Preference of Unit
            enum: [Percentage, Score]
          outcome-id:
            type: integer
            format: int32
            description: Identifier of the Outcome Type associated to Unit. Reference table_name:outcome_identifier_avetmiss
          weight:
            type: number
            example: "0.0"
            description: Weight of the Unit
          disable-auto-credit-transfer-recognition:
            type: boolean
            description: States whether Auto Credit Transfer recognition is disabled for the unit or not.
          expiry-length:
            type: integer
            format: int32
            description: Unit expiry lengh
          expiry-period:
            type: string
            description: Unit expiry period
            enum: [day, week, month, year]
          expiry:
            type: string
            format: date                
            description: Calculated Unit Expiry Date
          tga:
            type: object
            description: The <tga> collection.
            properties:
              accredited:
                type: string
                description: States whether Unit is TGA accredited or not
                enum: [Yes, No]
              status:
                type: string
                description: Unit TGA Accreditation Status 
              field-of-education:
                type: string
                description: Unit field of Education
          unit-points: 
            type: number
            example: "0.0"
            description: Unit points
          hide-from-student-portal:
            type: boolean
            description: States whether unit is hidden from student portal or not
          prerequsite-rules:
            type: string
            description: Unit prerequisite rules
          nominal-hours:
            type: object
            properties:
              default-hours:
                type: integer
                format: int32
                description: Unit required nominal hours
              supervised-hours:
                type: integer
                format: int32
                description: Unit required supervised hours
              south-australia-hours:
                type: integer
                format: int32
                description: South Australia nominal hours
              northern-territory-hours:
                type: integer
                format: int32
                description: Northern Territory nominal hours
              victoria-hours:
                type: integer
                format: int32
                description: Victoria nominal hours
              tasmania-hours:
                type: integer
                format: int32
                description: Tasmania nominal hours
              new-south-wales-hours:
                type: integer
                format: int32
                description: New South Wales nominal hours          
              australian-capital-territory-hours:
                type: integer
                format: int32
                description: Australian Capital Territory nominal hours  
              western-australia-hours:
                type: integer
                format: int32
                description: Western Australia nominal hours  
              queensland-hours:
                type: integer
                format: int32
                description: Queensland nominal hours  
      description: Response payload from a Get Unit details.


#######################################
# Unit Details Lite                   #          
#######################################
    UnitDetailsLite:
      title: Unit minimal dataset 
      description: |
        Optional. Truncated Response payload for Units. 
        Only returned if included in the query request.
      type: object
      xml:
        name: unit
      properties:
        unit-scope:  
          type: string
          description: Unit Code
        name:
          type: string
          description: Name of Unit
        unit-scope-type:
          type: integer
          format: int32
          description: Unit Scope Type Id
        enabled-for-program:
          type: boolean
          description: States whether Unit is enabled for program or not.
          enum:  [True, False]
        tga:
           type: object
           properties:
              accredited:
                type: boolean
                description: States whether Unit is TGA accredited or not
                enum:  [True, False]
              status:
                type: string
                description: Unit TGA Accreditation Status
                enum: [Current,Superseded,Deleted]


#######################################
# Unit Details Lite - Enrolment       #          
#######################################
    UnitDetailsLite-Enrolment:
      title: Unit dataset - for enrolment
      description: Unit details - enrolment
      required:
      - unit-scope
      type: object
      xml:
        name: unit
      properties:
        id:
          type: integer
          description: The id of the enrolment subject (Unit of Study)
          readOnly: true
        unit-scope:
          type: string
          description: " A valid unit scope code. Can be retrieved from the menu bar: Administration > Curriculum > Unit scope"
        name:
          type: string
          description:  Name of the enrolment unit. Read Only        
        score:
          type: number
          example: 72
          description: Denotes the score in that enrolment unit
        outcome:
          type: string
          description: "Refers to the enrolment unit outcome table_name: outcome_identifier_avetmiss"
        outcome-date:
          type: string
          format: date
          description: Outcome date of the enrolment unit in ISO 8601 format. Read Only
        start-date:
          type: string
          format: date
          description: Start date of the enrolment unit in ISO 8601 format.
        end-date:
          type: string
          format: date
          description: End date of the enrolment unit in ISO 8601 format. Mandatory if outcome is a final outcome (e.g. Competent)
        target-end-date:
          type: string
          format: date
          description: Target end date of the enrolment unit in ISO 8601 format
        note:
          type: string
          description: Note for the enrolment unit
        delivery-mode:
          type: string
          description: "Mandatory if avetmiss = true. Reference data table_name: delivery_mode."
        funding-source-state:
          type: string
          description: "The funding source state for the enrolment unit. Reference data table_name: funding_source_state."
        scheduled-hours:
          type: number
          description: Scheduled hours for the enrolment unit
        vet-disable:
          type: boolean
          description: States whether or not the enrolment unit is a VET enabled unit
        assessment-method:
          type: string
          description: "Assessment method of the course. Reference data table_name: assessment_method."
        internal-name:
          type: string
          description: The internal name of the enrolment unit. Read Only
        created-on:
          type: string
          format: date-time
          description: Created on timestamp in ISO 8601 format. Read-Only
        updated-on:
          type: string
          format: date-time
          description: Updated on timestamp in ISO 8601 format. Read-Only  


#######################################
# Unit Details Lite - Course          #  
#######################################
    UnitDetailsLite-Course:
      title: Unit minimal dataset 
      description: |
        Optional. Truncated Response payload for Units. 
        Only returned if included in the query request.
      type: object
      xml:
        name: unit
      properties:
        unit-scope:  
          type: string
          description: Unit Code
        name:
          type: string
          description: Name of Unit
        tga:
           type: object
           properties:
              accredited:
                type: boolean
                description: States whether Unit is TGA accredited or not
                enum:  [True, False]
              status:
                type: string
                description: Unit TGA Accreditation Status
                enum: [Current,Superseded,Deleted]
        starts-after:  
          type: number
          format: int32
          description: Number of days after which the unit will start after the enrolment start date.
        duration:
          type: integer
          format: int32
          description: Unit duration .
        start-date:
          type: string
          format: date
          description: Start date of the unit
        target-end-date:
          type: string
          format: date
          description: Target end date of the unit.
        enabled:
          type: boolean
          description: States whether Unit is enabled or not.
          enum:  [True, False]        


#######################################
# USER ROLE                           #          
#######################################
    UserRoleDetails:
      title: User Role
      description: User Roles Details
      type: object
      xml:
        name: user-role
      properties:
        role-user-id:
          type: integer
          format: int32
          readOnly: true
          description: The unique user role id. Read-Only
        rto-identifier:
          type: string
          readOnly: true
          example: 12345
          description: User role name. Read-Only          
        role-name:
          type: string
          readOnly: true
          description: User role name. Read-Only
        role-description:
          type: string
          readOnly: true
          description: User role description. Read-Only
        enabled:
          type: boolean
          readOnly: true
          description:   States whether or not the user role is enabled/disabled. Read-Only
        trainer:
          type: boolean
          readOnly: true
          description:  States whether or not the user role is a Trainer role. Read-Only
        system:
          type: boolean
          readOnly: true
          description:  States whether or not the user role is system level. Read-Only

#######################################
# Web Content Data                    #          
#######################################
    WebContentDetails:
      title: Web Content
      description: Web Content details.
      type: object
      xml:
        name: campaign
      properties:
        campaign-id: 
          type: integer
          description: Internal campaign id.
        campaign-name:
          type: string
          description: Name of the Campaign.
        version: 
          type: integer
          description: Version of the campaign.
        latest-version: 
          type: integer
          description: Latest Version of the campaign.
        brand:
          type: integer
          format: int32
          example: 1
          description: Internal id of the Brand object.
        approved:
          type: boolean
          description: Indicates if the campaign is approved or not.
        enabled:
          type: boolean
          description: Indicates if the campaign is enabled or not.
          default: true
        modified-on:
          type: string
          format: date-time
          description: Date campaign was last modified.
        modified-by:
          type: string
          description: Name of the user who last modified the campaign.
        cost-centre-code:
          type: string
          description: "Cost Centre Code. table:cost_center"
        publishing-category-id:
          type: integer
          format: int32
          example: 1
          description: "Publishing category id of the campaign.  table:publishing_category"
        upcoming-courses:
          type: array
          xml:
            name: upcoming-courses
          items:
            type: object
            properties:
              upcoming-course:
                type: object
                properties:
                  id: 
                    type: integer
                    description: Internal Id or the upcoming Course.
                  type: 
                    type: string
                    description: Type of the upcoming course. Indicates if the returned data is a real Course or a proposed course (only exists in the web content data at this point).
                    enum: [course, proposed]
#                  course-id: 
#                    type: string
#                    description: Course id of the upcoming course.
#                    nullable: true
                  location-id:
                    type: integer
                    format: int32
                    description: Id of the location of the upcoming course from the Ref data table

                  entry-point:
                    type: string
                    description: Entry point of the upcoming course.
                  exit-point:
                    type: string
                    description: Exit point of the upcoming course.
                  study-day-start:
                    type: string
                    description: Day of the week the upcoming course starts.
                    enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
                  academic-period-id:
                    type: string
                    description: Academic Period internal id.
                  academic-period:
                    type: string
                    description: Code of the Academic Period of the intake.
                  enabled:
                    type: boolean
                    description: States if the upcoming course is enabled or not.
                  enrolment-types:
                    type: array
                    xml:
                      name: enrolment-types
                    items:
                      type: object
                      properties:
                        enrolment-type:
                          type: object
                          properties:
                            enrolment-type:
                              type: string
                              description: Enrolment type
        contents:
          type: array
          xml:
            name: contents
          items:
            type: object
            properties:
              content:
                type: object
                properties:
                  id:  
                    type: integer
                    format: int32
                    description: "id of the title from table:program_custom_contents"
                  value:  
                    type: string
                    example: <p>some campaign edit&nbsp; approved edit&nbsp;</p>
                    description: The HTML Content value.

        information-sessions:
          type: array
          xml:
            name: information-sessions
          items:
            type: object
            properties:
              information-session:
                type: object
                properties:
                  id:  
                    type: integer
                    format: int32
                    description: id of the Information Session
                  date:  
                    type: string
                    format: date
                    description: Date of the Information Session.
                  start-time:  
                    type: string
                    example: 02:00:00
                    description: Start time of the Information Session.
                  end-time:  
                    type: string
                    example: 02:00:00
                    description: End time of the Information Session.
                  location-id:  
                    type: integer
                    format: int32
                    example: 5
                    description: id of the Location of the Information Session from the Ref data table.
                  location-room:  
                    type: string
                    example: Room A
                    description: Location room of the Information Session.
                  details:  
                    type: string
                    description: Details of the Information Session.


security:
  - basicAuth: []  # <-- use the same name here